<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[vue 分享记录]]></title>
      <url>https://chping2125.github.io/2017/02/04/vueShare/</url>
      <content type="html"><![CDATA[<p>本文是为了分享Vue相关知识点,从之前一篇<a href="http://chping.website/2016/11/28/Vue%E5%92%8CReact%E5%AF%B9%E6%AF%94/" target="_blank" rel="external">Vue和React对比</a>笔记中节选出来的。</p>
<p>一、数据双向绑定</p>
<p>1.插值表达式<br>2.指令系统（声明式绑定）<br>3.Class与Style绑定<br>4.条件渲染和列表渲染<br>5.时间处理器<br>6.表单控件<br>7.计算属性<br>8.数据获取（axios）</p>
<p>二、组件及数据流</p>
<p>1.创建组件<br>2.使用组件<br>3.生命周期<br>4.组件之间信息传递</p>
<p>三、状态管理</p>
<p>vuex</p>
<p>四、路由</p>
<p>vue-Router</p>
<p>五、其他</p>
<p>1.过渡系统<br>2.服务端渲染</p>
<a id="more"></a>
<h1 id="Vue-简单介绍"><a href="#Vue-简单介绍" class="headerlink" title="Vue 简单介绍"></a>Vue 简单介绍</h1><p>Vue也已经升级到2.0版本了，到现在为止，比较流行的MVVM框架有<strong>AngularJS</strong>（也有人认为其为MVC）、<strong>ReactJS</strong>和<strong>VueJS</strong>，这三个框架中，以我现在的情况来说（AngularJS2还没有去接触），Vue应该是发展最快的。</p>
<p>为什么现在MVVM框架这么火呢？JQuery挺好用的呀，为什么要去代替它？…</p>
<p>可能会产生这样的疑问，在我看来，MVVM框架的流行是因为随着前端技术的发展对于要求越来越高和前端面对的场景越来越复杂导致了现实对于前端性能的要求也越来越高，这样像JQuery那样频繁的操作DOM节点的方式显然就不太合适了。所以MVVM开始逐渐流行开来，另外我认为JQuery目前来看还是不会被代替的，因为对于一些对性能要求不是很高的前端项目，是用JQuery来开发还是非常爽的。</p>
<h1 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h1><p>1.插值表达式<br>2.指令系统（声明式绑定）<br>3.Class与Style绑定<br>4.条件渲染和列表渲染<br>5.时间处理器<br>6.表单控件<br>7.计算属性<br>8.数据获取（axios）</p>
<p>我理解的数据双向绑定是，MVVM框架中的View层和Model层的数据相互影响。那么，那些行为会引起数据变动呢？<br>首先，View层（即页面上）的<strong>表单操作</strong>、<strong>触发事件</strong>可能会引起数据变动；<strong>数据请求</strong>也可能会引起数据变动，这个变动我认为更多在Model层；还有一种情况就是，<strong>某一数据变动引起另外关联数据</strong>的改变。<br>不管是哪一种数据改变，都会导致View层和Model层的变化，View层变动引起页面变化，Model层变动保存数据。</p>
<h2 id="Vue的数据双向绑定"><a href="#Vue的数据双向绑定" class="headerlink" title="Vue的数据双向绑定"></a>Vue的数据双向绑定</h2><p>在Vue中，View层中与数据绑定有关的有<strong>插值表达式</strong>、<strong>指令系统</strong>、<strong>*Class和Style</strong>、<strong>事件处理器</strong>和<strong>表单控件</strong>，<strong>ajax请求</strong>和<strong>计算属性</strong>也和数据变化有关，下面我们分别说一下这些知识点设计的一些数据绑定问题。</p>
<h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>在Vue中，<strong>插值表达式</strong>和<strong>指令</strong>对于数据的操作又称为<strong>模板语法</strong>。</p>
<blockquote>
<p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>
<p>在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>
</blockquote>
<p>关于插值表达式的使用，在<a href="http://cn.vuejs.org/v2/guide/syntax.html#插值l" target="_blank" rel="external">Vue官网模板语法的插值</a>部分有详细的使用说明，不在赘述，需要注意的是，<strong>过滤器</strong>在插值中的使用有时可以起到意想不到的效果。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>Vue重的指令估计是从Angular那里学来的，有很多相似的地方，但是也不完全相同。<br>Vue中的指令我觉着非常的简单，并且就12个，很容易记忆：</p>
<ol>
<li><strong>v-bind</strong>:动态地绑定一个或多个 <em>html属性</em>，或一个组件 <em>prop 到表达式</em>（组件单项数据流使用）。</li>
<li><strong>v-once</strong>:绑定只渲染元素和组件 <em>一次</em> 的特性或prop表达式。</li>
<li><strong>v-model</strong>:在表单控件或者组件上创建双向绑定，<em>代替value值</em>。</li>
<li><strong>v-text</strong>:更新元素的 <em>textContent</em>。</li>
<li><strong>v-html</strong>:更新元素的 <em>innerHTML</em>。<strong>注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译</strong> 。</li>
<li><strong>v-on</strong>:绑定事件监听器。</li>
<li><strong>v-if / v-else / v-show</strong>:条件渲染。</li>
<li><strong>v-for</strong>:列表渲染。</li>
<li><strong>v-pre</strong>:跳过这个元素和它的子元素的编译过程。<br>10 <strong>v-cloak</strong>:这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] { display: none }</code>一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</li>
</ol>
<p>大概列举一下，详细使用请参考<a href="http://cn.vuejs.org/v2/api/#指令" target="_blank" rel="external">Vue API 指令</a>和<a href="http://cn.vuejs.org/v2/guide/" target="_blank" rel="external">Vue 指南的Class与Style绑定、条件渲染、列表渲染、事件处理器、表单控件绑定</a>部分内容。</p>
<h3 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h3><p>Vue为了方便操作控制元素的样式，专门增强了<strong>v-bind:class</strong>和<strong>v-bind:style</strong>,通过增强的这两个指令可以实用<strong>对象语法</strong>或者<strong>数组语法</strong>对元素的样式进行变动，这也不是本文重点，<a href="http://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="external">Vue官方Class与Style绑定</a>已经说得很详细了。</p>
<h3 id="条件渲染和列表渲染"><a href="#条件渲染和列表渲染" class="headerlink" title="条件渲染和列表渲染"></a>条件渲染和列表渲染</h3><p>条件渲染和列表渲染在Vue模板中动态创建模板很不错，让我里面想到了JSP中的EL表达式和Struts中的JSTL(后端模板语言中基本都有)，这就可以方便的根据后端传过来的数据进行模板创建了。你懂得，详细语法和使用还是参考<a href="http://cn.vuejs.org/v2/guide/conditional.html" target="_blank" rel="external">Vue文档列表渲染和条件渲染</a>，本篇主题是对比，并不是讲解基础语法，Vue的官方文档我觉着非常给力，简单明了。</p>
<h3 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h3><p>在Vue中我们可以通过<strong>v-on</strong>来给元素注册事件，完成<a href="http://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="external">事件注册</a>，Vue中的事件处理和平时使用的事件处理不同之处就是，既可以绑定数据处理函数，也可以使用内联处理器。并且，Vue还讲常用的事件方法，如<strong>preventDefault方法</strong>等通过修饰符的方式来方便使用。</p>
<h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><p>你可以用<strong>v-model</strong>指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。</p>
<p>Vue中对于<a href="http://cn.vuejs.org/v2/guide/forms.html" target="_blank" rel="external">表单控件</a>提供的<em>v-model*</em>指令非常的使用，可以方便的返回或者设置表单控件的信息。</p>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>在Vue中引入了<strong>计算属性</strong>来处理模板中放入太多的逻辑会让模板过重且难以维护的问题，这样不但解决了上面的问题，而且也同时让模板和业务逻辑更好的分离。<br><a href="http://cn.vuejs.org/v2/guide/computed.html" target="_blank" rel="external">Vue计算属性</a></p>
<h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><p>在Vue1.x的版本中，官方推荐的ajax数据请求库是<strong>vue-resource</strong>，但是在Vue2.0的版本中，不再推荐使用，该推荐使用<strong><a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a></strong>。</p>
<p>其实这些ajax数据请求的使用都大差不差，随你选择，并且<strong>vue-resource</strong>还是继续支持使用的，在Vue2.0中。</p>
<p>以上八个方面，我个人认为都是和数据绑定相关的一些Vue基本项，只是简单列举，具体内容请查看<a href="http://cn.vuejs.org/v2/guide" target="_blank" rel="external">Vue文档</a>或者<a href="http://cn.vuejs.org/v2/api/" target="_blank" rel="external">API</a>。<br>为什么这么多呢？因为Vue中有个<strong>模板</strong>的概念，所以，数据和模板进行数据绑定需要分别来做，而在的React中，你会发现，React的数据绑定虽然也是这八项功能点，但是其是通过JSX语法实现的。</p>
<h1 id="组件及数据流"><a href="#组件及数据流" class="headerlink" title="组件及数据流"></a>组件及数据流</h1><p>1.创建组件<br>2.使用组件<br>3.生命周期<br>4.组件之间信息传递</p>
<p>前端发展到现在，为了提高开发效率，组件化已经成为一个必然的趋势。而MVVM框架中，如果没有组件化的思想，它都不敢说拿出来宣传（纯属个人意淫）。下面我们再简单介绍一下VueJS中的<strong>组件思想</strong>和<strong>组件之间的数据流</strong>。</p>
<h2 id="React中的组件和数据流"><a href="#React中的组件和数据流" class="headerlink" title="React中的组件和数据流"></a>React中的组件和数据流</h2><p>上一节中提到过，React中的组件化是其重要的特点之一，因为在Angular1.x的出现，并没有明确提出组件的思想，只是有一个类似的<strong>指令思想</strong>来实现组件化的方式。所以，当React中明确提出<strong>组件</strong>思想后，前端好像重生了（吹的有点大了）。</p>
<h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>React中实现组件有两种方式，一种是<strong>createClass</strong>方法，另一种是通过ES2015的思想<strong>类继承React.Component</strong>来实现。</p>
<h4 id="createClass方式实现"><a href="#createClass方式实现" class="headerlink" title="createClass方式实现"></a>createClass方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这样，一个组件就创建完成，并且通过ES2015的模块化思想将其暴露出去了，其他组件就可以引入并使用了。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./hello.jsx'</span>;</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span>,</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>OK，这样就使用简单使用了一个组件。</p>
<h4 id="类继承React-Component来实现"><a href="#类继承React-Component来实现" class="headerlink" title="类继承React.Component来实现"></a>类继承React.Component来实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"comment"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.author &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.date &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; this.props.children &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentItem <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure>
<p>需要注意的是，这样创建组件的时候，组件名称首字母必须大写（如：CommentItem）。同样，我们使用一下这个组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> CommentItem <span class="keyword">from</span> <span class="string">'./comment-item'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">let</span> CommentNodes = <span class="keyword">this</span>.props.data.map(<span class="function">(<span class="params">comment, index</span>) =&gt;</span> &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">CommentItem</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">author</span>=<span class="string">&#123;comment.author&#125;</span> <span class="attr">date</span>=<span class="string">&#123;comment.date&#125;</span>&gt;</span></span></div><div class="line">&#123;comment.content&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">CommentItem</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">&#123; CommentNodes &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentList <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure></p>
<p>这样我们又创建了一个组件，并且在这个组件中我们使用了上面创建的那个组件。</p>
<h3 id="组件之间的数据流"><a href="#组件之间的数据流" class="headerlink" title="组件之间的数据流"></a>组件之间的数据流</h3><p>在上面<strong>类继承React.Component来实现</strong>一节中，我们可以看出例子中出现了组件嵌套的情况，仔细想想，组件之间传递信息肯定是必然的。那么React是怎样进行<strong>组件之间的数据通信</strong>的呢？</p>
<p>回答这个问题之前，我们需要考虑一下，组件之间有几种数据通信。首先，第一种比较容易想到，那就是<strong>父子组件</strong>之间的数据通信。第二种也就自然而然的出来了—-<strong>非父子组件</strong>之间的数据通信。</p>
<h4 id="父子组件数据通信"><a href="#父子组件数据通信" class="headerlink" title="父子组件数据通信"></a>父子组件数据通信</h4><p>父子组件之间的数据通信细分其实还有两种：<strong>父与子之间</strong>和<strong>子与父之间</strong>。</p>
<p>在React中，<strong>父与子</strong>之间的数据通信是通过<strong>props属性</strong>就行传递的；<br>而<strong>子与父</strong>之间的数据通信可以通过<strong>父组件定义事件，子组件触发父组件中的事件时，通过实参的形式来改变父组件中的数据</strong>来通信;</p>
<p>下面我们来分别通过例子来再现一下这种场景：<br><strong>父组件</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> CommentItem <span class="keyword">from</span> <span class="string">'./comment-item'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">let</span> CommentNodes = <span class="keyword">this</span>.props.data.map(<span class="function">(<span class="params">comment, index</span>) =&gt;</span> &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">CommentItem</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">author</span>=<span class="string">&#123;comment.author&#125;</span> <span class="attr">date</span>=<span class="string">&#123;comment.date&#125;</span>&gt;</span></span></div><div class="line">&#123;comment.content&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">CommentItem</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">&#123; CommentNodes &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentList <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>子组件</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"comment"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.author &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.date &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; this.props.children &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentItem <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure></p>
<p>通过上面我们可以看出，子组件CommentItem需要父组件传过来的值进行展示，而父组件是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;CommentItem key=&#123;index&#125; author=&#123;comment.author&#125; date=&#123;comment.date&#125;&gt; &#123;comment.content&#125; &lt;<span class="regexp">/CommentItem&gt;</span></div></pre></td></tr></table></figure></p>
<p>在父组件中添加了<code>key</code>、<code>author</code>、<code>date</code>属性来向子组件传值。想对象的，子组件通过props对象来获取父组件传过来的值，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span&gt;&#123; this.props.author &#125;&lt;/span&gt;</div><div class="line">&lt;span&gt;&#123; this.props.date &#125;&lt;/span&gt;</div><div class="line">&lt;div&gt;&#123; this.props.children &#125;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>好的，我们再来看一下另一种<strong>子与父</strong>之间的通信。</p>
<p><strong>父组件</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> CommentList <span class="keyword">from</span> <span class="string">'./comment-list'</span>;</div><div class="line"><span class="keyword">import</span> CommentForm <span class="keyword">from</span> <span class="string">'./comment-form'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentBox</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line"><span class="keyword">super</span>(props);</div><div class="line"><span class="keyword">this</span>.state = &#123;<span class="attr">data</span>: []&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">handleCommentSubmit(comment) &#123;</div><div class="line"><span class="keyword">let</span> comments = <span class="keyword">this</span>.state.data;</div><div class="line">comments.push(comment);</div><div class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">data</span>: comments&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line">&lt;div className="m-index"&gt;</div><div class="line">&lt;div&gt;</div><div class="line">&lt;h1&gt;评论&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;CommentList data=&#123;this.state.data&#125; /&gt;</div><div class="line">&lt;CommentForm onCommentSubmit=&#123;this.handleCommentSubmit.bind(this)&#125; /&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export &#123; CommentBox as default &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>子组件</strong>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">handleClick()&#123;</div><div class="line"><span class="keyword">let</span> author = <span class="keyword">this</span>.refs.author.value,</div><div class="line">content = <span class="keyword">this</span>.refs.content.value;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.props.onCommentSubmit(&#123;author, content, <span class="attr">date</span>:<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;);</div><div class="line"></div><div class="line"><span class="keyword">this</span>.refs.author.value = <span class="string">""</span>;</div><div class="line"><span class="keyword">this</span>.refs.content.value = <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"yo-list yo-list-a"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">className</span>=<span class="string">"item item-input"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">className</span>=<span class="string">"yo-input flex"</span> <span class="attr">ref</span>=<span class="string">"author"</span> <span class="attr">placeholder</span>=<span class="string">"发布人"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">className</span>=<span class="string">"item item-input"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">className</span>=<span class="string">"yo-input flex"</span> <span class="attr">ref</span>=<span class="string">"content"</span> <span class="attr">placeholder</span>=<span class="string">"留言内容"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span> <span class="attr">className</span>=<span class="string">"yo-btn yo-btn-l"</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export &#123; CommentForm as default &#125;;</div></pre></td></tr></table></figure></p>
<p>简单解释一下，子组件是一个表单组件，父组件中引用了该表单子组件，然后子组件中点击button按钮，触发子组件中的处理函数，处理函数通过<strong>refs</strong>获取到表单输入值然后调用父组件中传过来的函数，从而触发父组件中的函数执行改变data数据，data数据变动直接影响的是另一个组件CommentList的变化。</p>
<p>需要注意的是，在获取表单控件内的数据时，我们利用了一个<strong>refs</strong>对象，该对象用于获取真实DOM结构。具体来说就是，在React中组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM，这是React探索性的创新）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff （详细了解<a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="external">diff 算法</a>），它可以极大提高网页的性能表现。<br>在这里点击button时，input和textarea元素还是虚拟DOM，所以违法获取到输入的值，需要通过<strong>refs</strong>对象获取一下。</p>
<h4 id="非父子组件之间的通信"><a href="#非父子组件之间的通信" class="headerlink" title="非父子组件之间的通信"></a>非父子组件之间的通信</h4><p>React中在处理<strong>非父子组件之间的通信</strong>时，简单的，嵌套不深的非父子组件（如：兄弟组件）可以仍然使用上一节<strong>非父子组件之间通信</strong>中的<strong>事件函数，传形参</strong>的方式来实现。如子组件<strong>CommentList </strong>和子组件<strong>CommentFrom</strong>之间的通信就是这样实现的。</p>
<p>如果，需要通信的两个非父子组件之间嵌套比较深，可以使用Flux和Redux来实现状态管理，这里不做详细阐述，下面会详细对比vue的状态管理进行说明。想先了解的可以看一下阮一峰老师的blog：</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2016/01/flux.html" target="_blank" rel="external">Flux 架构入门教程</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">Redux 入门教程（一）：基本用法</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">Redux 入门教程（二）：中间件与异步操作</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">Redux 入门教程（三）：React-Redux 的用法</a></p>
</blockquote>
<h3 id="组件的声明周期"><a href="#组件的声明周期" class="headerlink" title="组件的声明周期"></a>组件的声明周期</h3><p><img src="http://upload-images.jianshu.io/upload_images/3333422-04ea055c73c50c98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="react 组件的声明周期"></p>
<p>上面这张图已经很清楚的展示了react组件的声明周期了，就不过多介绍了。这张图摘自<a href="http://www.jianshu.com/p/4784216b8194" target="_blank" rel="external">React组件生命周期小结</a>，对于理解React组件的声明周期钩子函数很有帮助。</p>
<h2 id="Vue中的组件和数据流"><a href="#Vue中的组件和数据流" class="headerlink" title="Vue中的组件和数据流"></a>Vue中的组件和数据流</h2><p>Vue比React出来的要晚一些，自然顺应了前端组件化的大潮，并且个人觉得借鉴了部分React的思想来实现其组件化思想。</p>
<p>Vue默认的是单向数据流，这是Vue直接提出来说明的，父组件默认可以向子组件传递数据，但是子组件向父组件传递数据就需要额外设置了。</p>
<p><strong>父子组件</strong>之间的数据通信是通过<strong>Prop</strong>和<strong>自定义事件</strong>实现的，而<strong>非父子组件</strong>可以使用<strong>订阅/发布</strong>模式实现（类似于Angualr中的非父子指令之间的通信），再复杂一点也是建议使用状态管理（vuex）。</p>
<p>我一直觉得Vue的官方文档是我看过最直接、易懂的技术文档，所以就直接给大家贴一个中文链接，自己去跟随尤雨溪学习吧。</p>
<blockquote>
<p><a href="https://vuefe.cn/v2/guide/components.html" target="_blank" rel="external">Vue 中的组件和数据流</a></p>
</blockquote>
<h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><p>上面对比React和Vue的<strong>组件及数据流</strong>的时候，都提到了<strong>当非父子组件之间嵌套过深</strong>的时候都建议使用状态管理来维护数据的变化，那么到底它们之间的状态管理有什么区别呢？</p>
<h2 id="Vue中的状态管理–vuex"><a href="#Vue中的状态管理–vuex" class="headerlink" title="Vue中的状态管理–vuex"></a>Vue中的状态管理–vuex</h2><p>先放个<a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">官方中文链接</a>，还是建议直接看官方文档。然后在放一下小例子去体会一下。</p>
<p>先简单说明一下，vuex状态管理的几个核心概念：</p>
<ol>
<li>State: Vuex 使用 <strong>单一状态树</strong> —— 是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个『唯一数据源(<a href="https://en.wikipedia.org/wiki/Single_source_of_truth" target="_blank" rel="external">SSOT</a>)』而存在。这也意味着，每个应用将仅仅包含一个 store 实例。</li>
<li>Getters: 从state中获取状态值</li>
<li>Mutation: 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutations 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</li>
<li>Action:  类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态；Action 可以包含任意异步操作。</li>
</ol>
<p>例子来了：<br><strong>store.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'../libs/vue.js'</span>;</div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'../libs/vuex.min.js'</span>;</div><div class="line">Vue.use(Vuex);</div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line"><span class="attr">loginPrePath</span>:[<span class="string">'/'</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> mutations =&#123;</div><div class="line">LOGINPREPATH(state,path)&#123;</div><div class="line">state.loginPrePath.unshift(path);</div><div class="line">&#125;,</div><div class="line">LOGINPREPATHSHIFT(state)&#123;</div><div class="line">state.loginPrePath.shift();</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">state,</div><div class="line">mutations</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>actions.js:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line"><span class="attr">loginPrePath</span>: <span class="function">(<span class="params">&#123;dispatch,state&#125;,path</span>)=&gt;</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'actions loginPrePath:'</span> +path);</div><div class="line">dispatch(<span class="string">'LOGINPREPATH'</span>,path);</div><div class="line">&#125;,</div><div class="line"><span class="attr">loginPrePathShift</span>: <span class="function">(<span class="params">&#123;dispatch,state&#125;</span>)=&gt;</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'delete....'</span>);</div><div class="line">dispatch(<span class="string">'LOGINPREPATHSHIFT'</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>getter.js:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line"><span class="attr">loginPrePath</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.loginPrePath</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>login.vue:</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">...</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">import Vue from '../libs/vue.js';</div><div class="line">import VueResource from '../libs/vue-resource.js';</div><div class="line">import Vuex from '../vuex/actions.js';</div><div class="line">import VuexGet from '../vuex/getters.js';</div><div class="line"></div><div class="line">Vue.use(VueResource);</div><div class="line">export default &#123;</div><div class="line">data()&#123;</div><div class="line">return &#123;</div><div class="line">username: '',</div><div class="line">password: '',</div><div class="line">loginBtn: 0</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">vuex: &#123;</div><div class="line">actions: &#123;</div><div class="line">setLoginPrePath: Vuex.loginPrePath</div><div class="line">&#125;,</div><div class="line">getters:&#123;</div><div class="line">getLoginPrePath: VuexGet.loginPrePath</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">forget()&#123;</div><div class="line">//使用vuex，修改状态值</div><div class="line">this.setLoginPrePath(&#123;path:this.$route.path,title:'忘记密码'&#125;);</div><div class="line">this.$router.go(&#123;path:'/index2/forget.json'&#125;);</div><div class="line">&#125;,</div><div class="line">submit()&#123;</div><div class="line">if(this.loginBtn === 3)&#123;</div><div class="line">if(this.checked)&#123;</div><div class="line">this.$http.post('/zhixiao/password.json',&#123;password:this.password&#125;).then(</div><div class="line">(res)=&gt;&#123;</div><div class="line">if(res.ok)&#123;</div><div class="line">console.log("注册成功，正在跳转登录页面");</div><div class="line">setTimeout(()=&gt;&#123;</div><div class="line">//获取状态值，通过getter</div><div class="line">var path = this.getLoginPrePath[0].path;</div><div class="line">this.loginPrePathShift();</div><div class="line">this.$router.go(path);</div><div class="line">&#125;,1500);</div><div class="line">&#125;</div><div class="line">&#125;,(res)=&gt;&#123;</div><div class="line">console.log('网络错误，请稍后重试');</div><div class="line">&#125;</div><div class="line">)</div><div class="line">&#125;else&#123;</div><div class="line">console.log('请选择同意用户协议');</div><div class="line">&#125;</div><div class="line">&#125;else&#123;</div><div class="line">console.log('请填写验证码');</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>上面的例子并无实际效果，是我从以前项目中拼出来的（vuex1.0），只是为了说明<strong>loginPrePath</strong>这个状态值在vuex中的使用方式。详细请看Vue官方文档。</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>要想实现SPA，路由是个不可避免的话题，作为主流的MVVM框架，怎么可能没有官方路由呢，两者的路由也很相似，都是利用各自的组件实现思想来实现的。</p>
<h2 id="Vue中的路由"><a href="#Vue中的路由" class="headerlink" title="Vue中的路由"></a>Vue中的路由</h2><p>还是先贴<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">官方链接</a>，简单易懂。<br>再给个例子(vue-router1.0)，仔细看一下：<br><strong>app.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用component</span></div><div class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./components/index.vue'</span>;</div><div class="line"><span class="keyword">import</span> main <span class="keyword">from</span> <span class="string">'./components/main.vue'</span>;</div><div class="line"><span class="keyword">import</span> my <span class="keyword">from</span> <span class="string">'./components/my.vue'</span>;</div><div class="line"></div><div class="line"><span class="comment">//APP route</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./libs/vue.js'</span>;</div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./libs/vue-router.js'</span>;</div><div class="line"></div><div class="line">Vue.use(VueRouter);</div><div class="line"></div><div class="line">router.map(&#123;</div><div class="line"><span class="string">'/'</span>:&#123;</div><div class="line"><span class="attr">component</span>: index,</div><div class="line"><span class="attr">subRoutes</span>:&#123;</div><div class="line"><span class="string">'/'</span>:&#123;</div><div class="line"><span class="attr">component</span>: main</div><div class="line">&#125;,</div><div class="line"><span class="string">'/my'</span>:&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'my'</span>,</div><div class="line"><span class="attr">component</span>: my</div><div class="line">&#125;,</div><div class="line"><span class="string">'/results/:key'</span>:&#123;</div><div class="line"><span class="attr">name</span>:<span class="string">'results'</span>,</div><div class="line"><span class="attr">component</span>:results</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//启动router</span></div><div class="line">router.start(App,<span class="string">'body'</span>);</div></pre></td></tr></table></figure></p>
<p><strong>index.vue</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index-container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-bind:class</span>=<span class="string">"getIndex == $index ? 'active' : ''"</span></span></div><div class="line"><span class="attr">v-for</span>=<span class="string">"data in navList"</span></div><div class="line"><span class="attr">v-on:click</span>=<span class="string">"changePage($index)"</span></div><div class="line"><span class="attr">v-link</span>=<span class="string">"&#123;path:data.path,exact: true&#125;"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>&#123;&#123;&#123;data.icon&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;&#123;data.name&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'../libs/vue.js'</span>);</div><div class="line"><span class="keyword">var</span> VueResource = <span class="built_in">require</span>(<span class="string">'../libs/vue-resource.js'</span>);</div><div class="line"><span class="keyword">import</span> &#123;getIndex&#125; <span class="keyword">from</span> <span class="string">'../vuex/getters.js'</span>;</div><div class="line"><span class="keyword">import</span> &#123;changeIndexPage&#125; <span class="keyword">from</span> <span class="string">'../vuex/actions.js'</span>;</div><div class="line">Vue.use(VueResource);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line"><span class="attr">vuex</span>: &#123;</div><div class="line"><span class="attr">actions</span>:&#123;</div><div class="line">changeIndexPage</div><div class="line">&#125;,</div><div class="line"><span class="attr">getters</span>:&#123;</div><div class="line">getIndex</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">data()&#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="attr">cur</span>: <span class="number">0</span>,</div><div class="line"><span class="attr">navList</span>:[</div><div class="line">&#123;<span class="attr">path</span>:<span class="string">'/'</span>,<span class="attr">icon</span>:<span class="string">''</span>,<span class="attr">name</span>:<span class="string">'主页'</span>&#125;,</div><div class="line">&#123;<span class="attr">path</span>:<span class="string">'/lee'</span>,<span class="attr">icon</span>:<span class="string">''</span>,<span class="attr">name</span>:<span class="string">'排行榜'</span>&#125;,</div><div class="line">&#123;<span class="attr">path</span>:<span class="string">'/search'</span>,<span class="attr">icon</span>:<span class="string">''</span>,<span class="attr">name</span>:<span class="string">'发现'</span>&#125;,</div><div class="line">&#123;<span class="attr">path</span>:<span class="string">'/my'</span>,<span class="attr">icon</span>:<span class="string">''</span>,<span class="attr">name</span>:<span class="string">'我的'</span>&#125;</div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>:&#123;</div><div class="line"><span class="attr">changePage</span>:<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.changeIndexPage(i);</div><div class="line"><span class="keyword">this</span>.cur = <span class="keyword">this</span>.getIndex;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>大概就这样，感觉像是配置的感觉，其实这就是利用的vue中组件思想来实现的，详细看官方文档。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1.过渡系统<br>2.服务端渲染</p>
<h2 id="过渡系统"><a href="#过渡系统" class="headerlink" title="过渡系统"></a>过渡系统</h2><p><a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/transitions.html</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/transitioning-state.html" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/transitioning-state.html</a></p>
<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><p>说道服务端渲染，其实官方对于使用SSR的原因和好处，解释的都很好，有兴趣的可以看一看 <a href="https://cn.vuejs.org/v2/guide/ssr.html" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/ssr.html</a></p>
<p>另外官方提供的服务端渲染的例子vue-hackernews2.0也很不错的，可以去借鉴看一看<br><a href="https://github.com/vuejs/vue-hackernews-2.0" target="_blank" rel="external">https://github.com/vuejs/vue-hackernews-2.0</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在我也是在搬砖阶段，深入的理解可能还需要一些时间。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vue-server-renderer 文档翻译]]></title>
      <url>https://chping2125.github.io/2017/01/01/vue-server-renderer/</url>
      <content type="html"><![CDATA[<h1 id="vue-server-renderer"><a href="#vue-server-renderer" class="headerlink" title="vue-server-renderer"></a>vue-server-renderer</h1><p>用于 Vue2.0 的服务端渲染</p>
<blockquote>
<p>这个包是自动生成的。如果你想合并请求请看 GigHub 上的 <a href="https://github.com/vuejs/vue/blob/dev/src/entries/web-server-renderer.js" target="_blank" rel="external">src/entries/web-server-renderer.js</a></p>
</blockquote>
<p>这个包提供了基于 Node.js 的 Vue2.0 服务端渲染。</p>
<ul>
<li><a href="#installation">安装</a></li>
<li><a href="#api">API</a></li>
<li><a href="#renderer-options">Renderer 选项</a></li>
<li><a href="#why-use-bundlerrenderer">为什么使用 bundleRenderer?</a></li>
<li><a href="#creating-the-server-bundle">服务端打包生成</a></li>
<li><a href="#component-caching">组件缓存</a></li>
<li><a href="#client-side-hydration">客户端合成</a></li>
</ul>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a name="installation" href="#installation">安装</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-server-rederer</div></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a><a name="api">API</a></h2><h3 id="createRenderer-rendererOptions"><a href="#createRenderer-rendererOptions" class="headerlink" title="createRenderer([rendererOptions])"></a>createRenderer([rendererOptions])</h3><p>创建一个<code>randerer</code>实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer();</div></pre></td></tr></table></figure></p>
<h3 id="renderer-renderToString-vm-cb"><a href="#renderer-renderToString-vm-cb" class="headerlink" title="renderer.renderToString(vm,cb)"></a>renderer.renderToString(vm,cb)</h3><p>渲染一个<code>string</code>类型的 Vue 实例。它的回调函数是第一个参数为接受到的<code>error</code>对象的标准 Node.js 的回调函数形式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</div><div class="line"> </div><div class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer()</div><div class="line"> </div><div class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  render (h) &#123;</div><div class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="string">'hello'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"> </div><div class="line">renderer.renderToString(vm, (err, html) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(html) <span class="comment">// -&gt; &lt;div server-rendered="true"&gt;hello&lt;/div&gt; </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="renderer-renderToStream-vm"><a href="#renderer-renderToStream-vm" class="headerlink" title="renderer.renderToStream(vm)"></a>renderer.renderToStream(vm)</h3><p>渲染一个流模式的 Vue 实例。返回一个 Node.js 的可读流。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 express 的一个例子 </span></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> vm = <span class="keyword">new</span> App(&#123; <span class="attr">url</span>: req.url &#125;)</div><div class="line">  <span class="keyword">const</span> stream = renderer.renderToStream(vm)</div><div class="line"> </div><div class="line">  res.write(<span class="string">`&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;...&lt;/title&gt;&lt;/head&gt;&lt;body&gt;`</span>)</div><div class="line"> </div><div class="line">  stream.on(<span class="string">'data'</span>, chunk =&gt; &#123;</div><div class="line">    res.write(chunk)</div><div class="line">  &#125;)</div><div class="line"> </div><div class="line">  stream.on(<span class="string">'end'</span>, () =&gt; &#123;</div><div class="line">    res.end(<span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="createBundleRenderer-code-rendererOptions"><a href="#createBundleRenderer-code-rendererOptions" class="headerlink" title="createBundleRenderer(code,[rendererOptions])"></a>createBundleRenderer(code,[rendererOptions])</h3><p>通过预打包应用程序代码（请看<a href="#creating-the-servver-bundle">服务端打包生成</a>）来创建一个<code>bundleRenderer</code>实例。对于每一次渲染调用，使用 Node.js 的 vm 模块实现代码在新的上下文中重新执行。这确保了你的应用程序状态是在请求之间是相互隔离的，并且你不用担心为了服务端渲染而在一个限制模式下构建你的应用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bundleRenderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createBundleRenderer(code)</div></pre></td></tr></table></figure>
<h3 id="bundleRenderer-renderToString-context-cb"><a href="#bundleRenderer-renderToString-context-cb" class="headerlink" title="bundleRenderer.renderToString([context],cb)"></a>bundleRenderer.renderToString([context],cb)</h3><p>渲染一个<code>string</code>类型的打包好的应用。和<code>renderer.renderToString</code>相同的回调接口。这个上下文参数对象将会传递给打包的输出函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bundleRenderer.renderToString(&#123; <span class="attr">url</span>: <span class="string">'/'</span> &#125;, (err, html) =&gt; &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="bundleRenderer-renderToString-context"><a href="#bundleRenderer-renderToString-context" class="headerlink" title="bundleRenderer.renderToString([context])"></a>bundleRenderer.renderToString([context])</h3><p>渲染一个流模式的打包好的应用。和<code>renderer.renderToStream</code>想用的流式接口。这个上下文对象将会传递给打包的输出函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bundleRenderer</div><div class="line">  .renderToStream(&#123; <span class="attr">url</span>: <span class="string">'/'</span> &#125;)</div><div class="line">  .pipe(writableStream)</div></pre></td></tr></table></figure>
<h2 id="Renderer-选项"><a href="#Renderer-选项" class="headerlink" title="Renderer 选项"></a><a name="renderer-options">Renderer 选项</a></h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>允许你提供一些自定义指令用于服务端渲染的实现。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> renderer = createRenderer(&#123;</div><div class="line">  <span class="attr">directives</span>: &#123;</div><div class="line">    example (vnode, directiveMeta) &#123;</div><div class="line">      <span class="comment">// transform vnode based on directive binding metadata </span></div><div class="line">      <span class="comment">// 基于绑定元数据的指令转化 vnode</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>还有一个例子，<a href="https://github.com/vuejs/vue/blob/dev/src/platforms/web/server/directives/show.js" target="_blank" rel="external">v-show’s server-side implementation</a>。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>提供了一种<a href="#component-caching">组件缓存</a>的实现。这个缓存对象必须实现下面的接口：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">key: string, [cb: <span class="built_in">Function</span>]</span>) =&gt;</span> string | <span class="keyword">void</span>,</div><div class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">key: string, val: string</span>) =&gt;</span> <span class="keyword">void</span>,</div><div class="line">  has?: <span class="function">(<span class="params">key: string, [cb: <span class="built_in">Function</span>]</span>) =&gt;</span> boolean | <span class="keyword">void</span> <span class="comment">// optional </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个典型的应用是传一个 <a href="https://github.com/isaacs/node-lru-cache" target="_blank" rel="external">lrc-cache</a>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> LRU = <span class="built_in">require</span>(<span class="string">'lru-cache'</span>)</div><div class="line"> </div><div class="line"><span class="keyword">const</span> renderer = createRenderer(&#123;</div><div class="line">  <span class="attr">cache</span>: LRU(&#123;</div><div class="line">    <span class="attr">max</span>: <span class="number">10000</span></div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>注意，缓存对象至少应该设置<code>get</code>和<code>set</code>。另外，<code>get</code>方法如果提供了第二个参数作为回调函数那么还可以选择异步使用。这允许缓存使用异步APIs，例如redis client 例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> renderer = createRenderer(&#123;</div><div class="line">  <span class="attr">cache</span>: &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">key, cb</span>) =&gt;</span> &#123;</div><div class="line">      redisClient.get(key, (err, res) =&gt; &#123;</div><div class="line">        <span class="comment">// handle error if any </span></div><div class="line">        cb(res)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">key, val</span>) =&gt;</span> &#123;</div><div class="line">      redisClient.set(key, val)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="为什么使用-bundleRenderer"><a href="#为什么使用-bundleRenderer" class="headerlink" title="为什么使用 bundleRenderer?"></a><a name="why-use-bundlerrenderer">为什么使用 bundleRenderer?</a></h2><p>在一个典型的 Node.js 应用中，后端服务是一个长时间运行的进程。如果我们直接请求我们的应用代码，实例化模块将会在每个请求中共享。这带了一些不方便的限制在我们构建时：比如我们必须避免使用全局状态单例（例如：Vuex里面的store）,否则每一次状态改变都会导致下一次请求被影响。</p>
<p>相反，<code>bundleRenderer</code>更容易保证我们的每一个请求在运行的应用程序中都是“新的”（即实例化模块不共享），这样我们不需要去考虑通过每次请求避免状态污染的问题了。这些都是<code>bundleRenderer</code>帮助我们实现的。</p>
<h2 id="服务端打包生成"><a href="#服务端打包生成" class="headerlink" title="服务端打包生成"></a><a name="creating-the-server-bundle">服务端打包生成</a></h2><p><img src="/images/vue/vue-server-renderer.png" alt="服务端打包生成"></p>
<p>应用程序的打包可以通过任何构建工具生成，你可以使用很简单的 Webpack + vue-loader 还有 bundleRenderer实现。你需要使用略微不同的 webpack 配置和为了服务端渲染的入口文件，但是这个不同是很小的：</p>
<ol>
<li><p>为你的 webpack 配置添加 <code>target:&#39;node&#39;</code> 和 <code>output:{libraryTarget:&#39;commonjs2&#39;}</code> 。这可能是一个比较好的处理你的外部依赖文件的方法。</p>
</li>
<li><p>在你的服务端入口文件抛出一个方法。这个方法将会接收到渲染的上下文对象（传递给<code>bundleRenderer.renderToString</code> 或者 <code>bundleRenderer.renderToStream</code>），并且返回一个Promise，这将最终解决应用程序 Vue 根实例的问题。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server-entry.js </span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(App)</div><div class="line"> </div><div class="line"><span class="comment">// 默认的输出应该是一个接收渲染调用时上文对象的函数。</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</div><div class="line">  <span class="comment">// data pre-fetching </span></div><div class="line">  <span class="keyword">return</span> app.fetchServerData(context.url).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> app</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h3><p>我们在使用<code>bundleRenderer</code>时，最好在服务端打包时通过默认的打包方式把每一个依赖文件打进我们的应用程序。这意味着在每次请求那些依赖文件时将需要解析和运行一遍，但是在大多数情况下这些是不需要的。</p>
<p>我们能够通过你打的包来优化这些外部依赖关系。在渲染过程中，任何原始的<code>require()</code>调用都将返回实际的 Node 模块从你的渲染进程中。使用 webpack ，我们可以很简单的通过<code>externals</code>配置选项来列举出那些我们想要处理的外部依赖模块。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js </span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 这些外部依赖中的所有模块都在你的package.json文件中的 “dependencies” 下面</span></div><div class="line">  externals: <span class="built_in">Object</span>.keys(<span class="built_in">require</span>(<span class="string">'./package.json'</span>).dependencies)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="外部警告"><a href="#外部警告" class="headerlink" title="外部警告"></a>外部警告</h3><p>由于外部依赖模块在每个请求中是共享的，所以你必须保证这些依赖关系是等同的。这样，通过不同的请求应该总是返回相同的结果，并且它不能拥有通过你的应用程序来改变的全局状态（如：使用 Vue 插件）。</p>
<h2 id="组件缓存"><a href="#组件缓存" class="headerlink" title="组件缓存"></a><a name="component-caching">组件缓存</a></h2><p>你可以容易的通过<code>serverCacheKyy</code>函数来在服务端渲染中来缓存组件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'item'</span>, <span class="comment">// required </span></div><div class="line">  props: [<span class="string">'item'</span>],</div><div class="line">  <span class="attr">serverCacheKey</span>: <span class="function"><span class="params">props</span> =&gt;</span> props.item.id,</div><div class="line">  render (h) &#123;</div><div class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.item.id)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意缓存组件<strong>必须配置唯一的“name”选项</strong>。这对于 Vue 在使用打包渲染时确定组件的身份来说是必须的。</p>
<p>使用唯一的名字来作为缓存组件的的键名：你不用担心两个组件返回相同的键。一个缓存组件的键名应该包含足够的信息来表述它渲染的结果。上面的这种方式是一种很好的实现如果这个渲染结果可以通过<code>props.item.id</code>能完全确定。然而，这个组件随着时间的推移原本的 ID 可能会改变，或者渲染结果还依赖另一个<code>prop</code>,这样你需要去修改你的<code>getCacheKey</code>来实现获取其他的变量在程序中。</p>
<p>返回一个常数总会被缓存，这对于纯粹的静态组件来说是很好的。</p>
<h3 id="什么时候使用组件缓存？"><a href="#什么时候使用组件缓存？" class="headerlink" title="什么时候使用组件缓存？"></a>什么时候使用组件缓存？</h3><p>如果渲染器在渲染期间渲染了一个组件，它将直接为真个子树重用缓存结果。所以<strong>不要缓存包含全局状态的子组件</strong>。</p>
<p>在大多数情况下，你不应该和不需要缓存简单的实例组件。最常见的组件缓存需要大名单。由于这些组件通常是一些由数据库中的对象集合驱动的，他们可以使用一些简单的缓存策略。生成它们的缓存键名使用它们自己的唯一ID加最后更新的时间戳。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serverCacheKey: <span class="function"><span class="params">props</span> =&gt;</span> props.item.id + <span class="string">'::'</span> + props.item.last_updated</div></pre></td></tr></table></figure>
<h2 id="客户端合成"><a href="#客户端合成" class="headerlink" title="客户端合成"></a><a name="client-side-hydration">客户端合成</a></h2><p>在服务端渲染输出，根元素将会有一个<code>server-rendered=true</code>的属性标记。在客户端，当你使用这个属性挂载一个 Vue 实例到元素上时，它将尝试合成到现有的DOM实例而不是创建新的DOM节点。</p>
<p>在开发模型中，Vue 将维护客户端生成的虚拟DOM树来匹配来自服务端渲染的DOM结构。如果不匹配，它将放弃合成，维持现有DOM并且从头开始渲染。<strong>在生产模型下，这种维护是被禁用的为了更高的性能。</strong></p>
<h2 id="合成警告"><a href="#合成警告" class="headerlink" title="合成警告"></a>合成警告</h2><p>有一些事情需要特别注意，当使用服务端渲染+客户端合成一些特殊HTML结构时，浏览器可能会改变HTML结构。比如，当你写下面这个样的Vue实例的时候：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>hello word<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>浏览器会自动添加<code>tbody</code>到<code>table</code>中，然而，Vue生成的虚拟DOM不会包含<code>tbody</code>，所以将会导致不匹配。为了确保正确的匹配，请准确书写有效的HTML在你的模板中。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文为个人在学习 Vue 服务端渲染时，翻译自<a href="https://www.npmjs.com/package/vue-server-renderer" target="_blank" rel="external">npm:vue-server-renderer</a>的README文档，本人初学 Vue 能力有限，翻译有误地方请大家指出。</p>
<p>另外，如果想学习Vue官方的服务端渲染的例子<a href="">vue-ssr-demo-simple</a>和<a href="https://github.com/vuejs/vue-hackernews-2.0" target="_blank" rel="external">vue-hackernews-2.0</a>的例子，而又对各种webpack配置和英文注释有些迷茫，可以看一下我对官方<a href="https://github.com/chping2125/vue-ssr-demo-simple" target="_blank" rel="external">vue-ssr-demo-simple</a>和<a href="https://github.com/chping2125/vue-hackernews-2.0" target="_blank" rel="external">vue-vue-hackernews-2.0</a>一个注释版本，根据自己的理解加的注释。当然个人能力有限，可能有些地方理解有误，还请谅解</p>
<ol>
<li><p><a href="https://github.com/chping2125/vue-ssr-demo-simple" target="_blank" rel="external">vue-ssr-demo-simple 个人理解版本</a></p>
</li>
<li><p><a href="https://github.com/chping2125/vue-hackernews-2.0" target="_blank" rel="external">vue-vue-hackernews-2.0 个人理解版本</a></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[同一客户端下使用多个git账号]]></title>
      <url>https://chping2125.github.io/2016/12/17/gitMore/</url>
      <content type="html"><![CDATA[<p>在日常使用git作为仓库使用的时候，有时可能会遇到这样的一些情况：</p>
<pre><code>1. 有两个github账号，一台电脑怎么同时连接这两个账号进行维护呢？
2. 自己用一个github账号，平时用来更新自己的一些资料；公司使用的gitlab（也是git的衍生产品）
</code></pre><p>总结来说，就是同一客户端（即同一台电脑）可能需要连接多个git衍生产品账号（以下简称git账号）。下面就记录一下我配置的方法，也是网上都可以搜到的。</p>
<p>首先来说，配置多个git账号分为两种情况：</p>
<ol>
<li>已经配置过git账号，想在添加一个账号。</li>
<li>没有配置过任何git账号，直接就像配置两个账号<a id="more"></a>
<h1 id="已配置过git账号"><a href="#已配置过git账号" class="headerlink" title="已配置过git账号"></a>已配置过git账号</h1>一般开发用户应该都配置过一个git的账号，让我们先来回顾一下，当时我们是怎样来配置git账号的（<strong>只有熟悉了配置的过程和原理才能更好地去理解</strong>）。</li>
</ol>
<h2 id="回顾配置git账号的过程"><a href="#回顾配置git账号的过程" class="headerlink" title="回顾配置git账号的过程"></a>回顾配置git账号的过程</h2><p>配置git本地和远程github连接通信的方法，网上有很多，想了解的同学可以看一下这里<a href="http://www.cnblogs.com/tinyphp/p/5025311.html" target="_blank" rel="external">http://www.cnblogs.com/tinyphp/p/5025311.html</a>或者想了解如何生成SSH keys的可以看一下这里<a href="http://www.jianshu.com/p/31cbbbc5f9fa/" target="_blank" rel="external">http://www.jianshu.com/p/31cbbbc5f9fa/</a></p>
<p><strong>解释一下：</strong><br>当本地git仓库和github上的仓库进行通信的时候，必须得双方建立连接才行，而SSH keys就是两者建立连接的一把钥匙，只要钥匙对了就完成了其中一步验证了。其中我们可以在生成的SSH keys中看到，里面包含了我们的账号信息和邮箱信息（后面会用到，先提一下）。</p>
<p>还有一步验证就是用户名和邮箱的验证，这个貌似可有可无（具体我也没搞清楚，反正不设置的时候也没有问题），有些连接本地git仓库和github仓库的教程中会有下面这样的设置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --golbal user.name <span class="string">'chping2125'</span> <span class="comment">//以我的git账号为例</span></div><div class="line"></div><div class="line">git config --golbal user.emil <span class="string">'chping_2125@163.com'</span></div><div class="line"><span class="comment">//该邮箱账号是我的github注册时的邮箱</span></div></pre></td></tr></table></figure></p>
<p>这其实就是在设置全局范围的用户名和邮箱的设置，有时不设置这一步，两者之间进行连接会有问题。</p>
<h2 id="设置多账号"><a href="#设置多账号" class="headerlink" title="设置多账号"></a>设置多账号</h2><p>简单回顾玩设置git账号的步骤和一些注意点，进入今天的主题，设置多账号。</p>
<h3 id="清除git的全局设置"><a href="#清除git的全局设置" class="headerlink" title="清除git的全局设置"></a>清除git的全局设置</h3><p>如果你之前在设置本地仓库和github连接的时候设置过<strong>user.name</strong>和<strong>user.email</strong>,那么你必须首先清楚掉该设置，因为不清楚掉该设置，两个账号在提交资料的时候，验证肯定冲突（只能设置一个全局的<strong>user.name</strong>和<strong>user.email</strong>，而你现在有两个账号就对应两个不同的）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"your_name"</span></div><div class="line">git config --global user.email  <span class="string">"your_email"</span></div></pre></td></tr></table></figure></p>
<p>就是重新设置覆盖了而已。。。</p>
<p>如果没有设置，可以直接跳转第二部。如果你忘了，最好还是覆盖一下。</p>
<h3 id="生成新站好的SSH-keys"><a href="#生成新站好的SSH-keys" class="headerlink" title="生成新站好的SSH keys"></a>生成新站好的SSH keys</h3><p>前面提到过生成的SSH keys里面包含了账号和邮箱信息，所以新账号必须另外在生成一份SSH keys，当然生成的方式和以前一样。</p>
<p><strong>1. 用ssh-keygen命令生成一组新的id_rsa_new和id_rsa_new.pub</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"new email"</span></div></pre></td></tr></table></figure></p>
<p>平时我们都是直接回车，默认生成id_rsa和id_rsa.pub。这里特别需要注意，出现提示输入文件名的时候(<code>Enter file in which to save the key (~/.ssh/id_rsa): id_rsa_new</code>)要输入与默认配置不一样的文件名，比如：我这里填的是 id_rsa_new</p>
<p>注：windows用户和mac用户的区别就是，mac中<code>.ssh</code>文件夹在根目录下，所以表示成<code>~/.ssh/</code>,而windwos用户是<code>C:\Users\Administrator\.ssh</code>。<br>下面同理，不在赘述。</p>
<p><strong>2. 执行ssh-agent让ssh识别新的私钥</strong></p>
<p>因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa_work</div></pre></td></tr></table></figure></p>
<p>如果出现<code>Could not open a connection to your authentication agent</code>的错误，就试着用以下命令：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-agent bash</div><div class="line">ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa_work</div></pre></td></tr></table></figure></p>
<p><strong>3. 配置~/.ssh/config文件</strong><br>前面我们在~/.ssh目录下面，使用ssh-keygen -C “your_email” -t rsa 生成公私秘钥，当有多个github账号的时候，可以生成多组rsa的公司密钥。然后配置~/.ssh/config文件（如果没有的话请重新创建一个）。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch config        # 创建config文件</div></pre></td></tr></table></figure></p>
<p>然后修改如下：<br>我的config配置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 该文件用于配置私钥对应的服务器</div><div class="line"># Default github user(chping_2125@163.com)</div><div class="line">Host git@github.com</div><div class="line"> HostName https://github.com</div><div class="line"> User git</div><div class="line"> IdentityFile ~/.ssh/id_rsa</div><div class="line"></div><div class="line"> # second user(second@mail.com)</div><div class="line"> # 建一个github别名，新建的帐号使用这个别名做克隆和更新</div><div class="line">Host git@code.xxxxxxx.com</div><div class="line"> HostName https://code.xxxxxxx.com    #公司的gitlab</div><div class="line"> User git</div><div class="line"> IdentityFile ~/.ssh/id_rsa_new</div></pre></td></tr></table></figure></p>
<p> 如果存在config文件的话，其实就是往这个config中添加一个Host：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#建一个github别名，新建的帐号使用这个别名做克隆和更新</div><div class="line">Host git@code.xxxxxxx.com</div><div class="line"> HostName https://code.xxxxxxx.com    #公司的gitlab</div><div class="line"> User git</div><div class="line"> IdentityFile ~/.ssh/id_rsa_new</div></pre></td></tr></table></figure>
<p> 其规则就是：从上至下读取<strong>config</strong>的内容，在每个Host下寻找对应的私钥。这里将GitHub SSH仓库地址中的<strong>git@github.com</strong>替换成新建的Host别名如：我直接就写成了<code>git@github.com</code>，那么原地址是：git@github.com:chping2125/test.git，替换后任然是：it@github.com:chping2125/test.git。<br> 如果你配置的是这样：<br> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 该文件用于配置私钥对应的服务器</div><div class="line"># Default github user(chping_2125@163.com)</div><div class="line">Host git1    #############不同在这里</div><div class="line"> HostName https://github.com</div><div class="line"> User git</div><div class="line"> IdentityFile ~/.ssh/id_rsa</div><div class="line"></div><div class="line"> # second user(second@mail.com)</div><div class="line"> # 建一个github别名，新建的帐号使用这个别名做克隆和更新</div><div class="line">Host git2  #############不同在这里</div><div class="line"> HostName https://code.xxxxxxx.com    #公司的gitlab</div><div class="line"> User git</div><div class="line"> IdentityFile ~/.ssh/id_rsa_new</div></pre></td></tr></table></figure></p>
<p> 那么你原本想在新账号克隆的命令是<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@xxxxxx.com:chping/test.git</div></pre></td></tr></table></figure></p>
<p> 就要相应的变成<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git2:chping/test.git</div></pre></td></tr></table></figure></p>
<p> <strong>4. 添加新的SSH keys到新账号的SSH设置中</strong><br> 可不要忘了将新生成的SSH keys添加到你的另一个github帐号(或者公司的gitlab)下的SSH Key中。</p>
<p> <strong>测试一下</strong><br> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">Hi BeginMan! You've successfully authenticated, but GitHub does not provide shell access.</div><div class="line"></div><div class="line"># 上面是github的成功返回语句，下面是gitlab的成功返回语句。</div><div class="line"></div><div class="line">$ ssh -T git@xxxxxx.com</div><div class="line">Welcome to GitLab, chping!</div></pre></td></tr></table></figure></p>
<h2 id="一次性配置两个账号"><a href="#一次性配置两个账号" class="headerlink" title="一次性配置两个账号"></a>一次性配置两个账号</h2><p>其实同理上面，先配置一个，在配置两一个。</p>
<p>。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/BeginMan/p/3548139.html" target="_blank" rel="external">http://www.cnblogs.com/BeginMan/p/3548139.html</a><br><a href="https://my.oschina.net/csensix/blog/184434" target="_blank" rel="external">https://my.oschina.net/csensix/blog/184434</a><br><a href="http://blog.csdn.net/guang09080908/article/details/46545335" target="_blank" rel="external">http://blog.csdn.net/guang09080908/article/details/46545335</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript原型链深入理解]]></title>
      <url>https://chping2125.github.io/2016/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>在JS中，原型链是一个重要的概念，不管是继承还是属性值的查找中，都用到了原型链的基本知识，有些朋友经常问我一些关于原型链的问题，今天整理一下自己对原型链的理解，下次我就不用在去解释了，直接看文章。</p>
<p>首先，大家都知道在JS中有六种<strong>基本数据</strong>类型和一种<strong>复杂类型</strong>。<br>六种基本数据类型：</p>
<blockquote>
<ol>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>null</li>
<li>undefined</li>
<li>Symbol（ES2015新加入，解决属性名的冲突问题。<a href="http://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="external">详情</a>）</li>
</ol>
</blockquote>
<p>另外一种复杂类型自然而然就是<strong>Object</strong>，有的人也说JS中<strong>一切皆是对象</strong>。上面的六种基本数据类型中，除了null和undefined没有构造函数外，其他4种都对应有其构造函数对象，有时利用这些构造函数可以强制转换数据类型。</p>
<p>要想讲清楚原型链的一些问题，还有一个特殊的Object对象必须事先说清楚，那就是<strong>Function</strong>对象。它也是对象，只不过比其他普通对象复杂点罢了。</p>
<a id="more"></a>
<h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><p>首先我们先写一个大家熟悉的组合继承(原型链+构造函数)，然后根据这个组合继承去了解原型链到底是怎样连接起来的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name,age);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name +<span class="string">'，今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了！'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//子类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,gride</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Student)&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name,age);</div><div class="line">    <span class="keyword">this</span>.gride = gride;</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    Student.call(<span class="keyword">this</span>,name,age,gride);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Student.prototype = <span class="keyword">new</span> Person();</div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line">Student.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name +<span class="string">'，今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了，考试考了'</span> + <span class="keyword">this</span>.gride + <span class="string">'分！'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'chping'</span>,<span class="number">23</span>,<span class="number">100</span>);</div><div class="line">stu.say();</div></pre></td></tr></table></figure></p>
<p>此时会输出<strong>我叫chping，今年23岁了，考试考了100分！</strong>，这说明我们的组合继承就实现了，下面可以根据这个例子逐句解释一下原型链的相关问题，顺便讲解这个组合继承了。</p>
<h2 id="第一个问题：安全使用构造函数"><a href="#第一个问题：安全使用构造函数" class="headerlink" title="第一个问题：安全使用构造函数"></a>第一个问题：安全使用构造函数</h2><p>首先可能你对<strong>Person</strong>和<strong>Student</strong>里面的那个判断有些疑问，你可能是下面这样写构造函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line">   <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不这样写，主要是<strong>防止构造函数被执行</strong>，因为一旦构造函数执行，其内的属性值会被挂载到window上面去了（当构造函数执行的时候，里面的<strong>this</strong>是指向window的）。</p>
<p>好的，这个问题解决了，在看第二个问题。</p>
<h2 id="第二个问题：prototype对象"><a href="#第二个问题：prototype对象" class="headerlink" title="第二个问题：prototype对象"></a>第二个问题：prototype对象</h2><p>接着我们来体会一下下面这句话：</p>
<p><strong>每一个函数对象都有一个prototype属性，该属性指向其prototype对象</strong>。</p>
<p>这句话相信你已经听了很多遍了，可能并不是这样说的，但是就是这么个意思。那么这句话应该怎么理解呢？</p>
<p>其实也不难，先看前半部分<strong>每一个函数对象都有一个prototype属性</strong>。这半句就是说<strong>函数对象</strong>默认有一个属性，这个属性叫<strong>prototype</strong>。另外，函数对象就是指用<strong>function</strong>声明的对象（补充一下：在ES2015之前，有两种声明变量的方式，<strong>function</strong>用来声明函数变量，<strong>var</strong> 用来声明普通变量。但是在ES2015中新加了<strong>let</strong>和<strong>const</strong>）。</p>
<p>再看一下后半部分<strong>该属性指向其prototype对象</strong>。后半句的意思就是说<strong>prototype</strong>属性指向的是一个也叫<strong>prototype</strong>的对象，该对象是随着函数对象而产生的。也就是说，只要通过<strong>function</strong>定义一个函数对象，就会生成一个<strong>prototype对象</strong>，并在函数上生成一个<strong>prototype属性</strong>来指向该<strong>prototype属性</strong>。用图来表示一下就是下面的样子：<br><img src="/images/prototype/1.jpg" alt="构造函数与其prototype对象">;</p>
<p>从图中你可以看到还有一个知识点，就是<strong>prototype对象</strong>中还有一个<strong>constructor</strong>对象，该对象又指向了构造函数，这也是一个需要注意的知识点，后面我们在展开来说，这里先记一下。</p>
<p>通过上面的这句话，我们可以联想到，Object好像也是一个构造函数，Function好像也是一个函数，他们是不是也是这样的呢？回答是肯定的，他们也是这样的。如下图：<br><img src="/images/prototype/2.jpg" alt="Object的构造函数与其prototype对象">;<br><img src="/images/prototype/3.jpg" alt="Function的构造函数与其prototype对象">;</p>
<h2 id="第三个问题：-proto-属性"><a href="#第三个问题：-proto-属性" class="headerlink" title="第三个问题：__proto__属性"></a>第三个问题：<code>__proto__</code>属性</h2><p>先说明一下，<code>__proto__</code>的写法是前后各两个英文输入法下的下划线，不是一个。<br>然后我们再来看这样一句话：</p>
<p><strong>每一个对象都有一个<code>__protto__</code>属性，该属性指向创建这个对象的构造函数的prototype对象</strong>。</p>
<p>这句话稍微有点绕，我再来解释一下这句话。这句话的前半部分比较好理解，就是说JS中的每一个对象都有一个属性，这个属性的名字叫做<code>__proto__</code>，还要再说的话，就是注意<strong>JS中一切皆是对象</strong>这句话。</p>
<p>这句话后半部分有点绕，我们把它分成两句话去理解：</p>
<ol>
<li><strong>创建这个对象的构造函数</strong></li>
<li><strong>的prototype对象</strong></li>
</ol>
<p>这样就明白了，但是创建这个对象的构造函数怎么确定呢？这是个问题，不好解释，我也解释不好。就总结一下:</p>
<ol>
<li><strong>function定义的函数对象的<code>__proto__</code>属性指向Function对象的prototype对象</strong>。</li>
<li><strong>非function定义的对象的<code>__proto__</code>属性指向创建它的构造函数的prototype对象</strong>。（就是都指向Object的prototype对象）</li>
<li><strong>Object的prototype对象的<code>__proto__</code>指向null</strong>。</li>
</ol>
<p>还是看图吧：</p>
<p><img src="/images/prototype/4.png" alt="对象的__proto__属性">;</p>
<p>相信通过图你已经看懂了<code>__proto__</code>属性的指向问题了。</p>
<h2 id="思考组合继承"><a href="#思考组合继承" class="headerlink" title="思考组合继承"></a>思考组合继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name,age);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//上面通过function声明了一个函数对象，那么该对象的肯定有一个prototype属性，</span></div><div class="line"><span class="comment">//并且指向其prototype对象。我们可以打印验证一下</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Person.prototype);</div><div class="line"><span class="comment">/*打印结果如下</span></div><div class="line">&#123;</div><div class="line">  constructor: function Person(name,age)</div><div class="line">    arguments:null</div><div class="line">    caller:null</div><div class="line">    length:2</div><div class="line">    name:"Person"</div><div class="line">    prototype:Object</div><div class="line">    __proto__:function()  </div><div class="line">  ,</div><div class="line">  __proto__: Object</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>这说明<strong>prototype对象</strong>就是一个空对象添加了一个<strong>constructor属性</strong>。<br>另外，也看到了<strong>prototype</strong>对象有一个<code>__proto__</code>属性，指向Object，先记住。<br>此外，我们也看到了<strong>constructor</strong>指向的Person函数确实存在prototype属性和<code>__proto__</code>属性，以及其指向问题，我们同时也可以打印验证一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__=== <span class="built_in">Object</span>.prototype);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(Person.__proto__=== <span class="built_in">Function</span>.prototype);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>我们再来验证一下<strong>Object</strong>和<strong>Function</strong>的prototype属性，constructor属性还有<code>__proto__</code>属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.constructor === <span class="built_in">Object</span>);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype);<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.constructor === <span class="built_in">Function</span>);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>OK，相信大家对原型链有了一定了解了。我们接着往下看。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name +<span class="string">'，今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了！'</span>)</div><div class="line">&#125;</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<p>在Person的<strong>prototype对象</strong>上添加了一个say方法，和给普通对象添加方法并没有区别，只不过在稍后使用的时候才会展现出它的与众不同。</p>
<p>接下来是Student类:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,gride</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Student)&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name,age);</div><div class="line">    <span class="keyword">this</span>.gride = gride;</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    Student.call(<span class="keyword">this</span>,name,age,gride);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在此时，Student和Person以<code>Person.call(this,name,age);</code>这一句代码产生了联系，此时Student仅仅是通过构造函数继承的方式调用了Person，这并不是本文重点，我们此时可以认为原型链上Student和Person并没有任何联系，让它们在原型链上产生联系的是下面这条语句。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student.prototype = <span class="keyword">new</span> Person();</div><div class="line">Student.prototype.constructor = Student;</div></pre></td></tr></table></figure></p>
<p>我们来想想这两条语句都干了啥？<br>首先我们知道，Student函数对象在被<strong>function</strong>声明的时候已经生成了其<strong>prototype</strong>对象，并且通过<strong>prototype属性</strong>建立了联系。<br>这里的第一条语句居然是，<strong>改变了Student函数对象的prototype属性指向，不再指向function声明时自动生成的prototype对象，而是指向Person函数对象的一个实例对象。</strong>让我们用图展示一下，就成了下面这样：</p>
<p><img src="/images/prototype/5.png" alt="原型链继承关键步骤图解">;</p>
<p>OK，原型链继承就这样实现了。但是由于我们让<strong>Student</strong>函数对象的<strong>prototype</strong>属性重新指向了一个<strong>Person</strong>函数对象的实例，而这个实例对象里面是不可能有<strong>constructor</strong>属性的，自然也不会指向<strong>Student</strong>（为什么没有呢？前面已经说了，因为只有用<strong>function</strong>声明函数对象的时候，自动生成的<strong>prototype对象</strong>中才默认有<strong>constructor属性</strong>，其他对象不会有）。</p>
<p>接下来就是在Student函数对象新指向的prototype对象上添加say方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Student.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name +<span class="string">'，今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了，考试考了'</span> + <span class="keyword">this</span>.gride + <span class="string">'分！'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个就没有说的必要了，就是在对象上加了一个方法，只不过这个对象有些特别罢了。然后就是通过Student构造函数来生成实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'chping'</span>,<span class="number">23</span>,<span class="number">100</span>);</div><div class="line">stu.say();</div></pre></td></tr></table></figure></p>
<p>此时，我们还是要看看这两句干了啥？<br>先看第一句，<code>new Student(&#39;chping&#39;,23,100);</code>，其中我们必须先得知道关键字<strong>new</strong>做了什么：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;</div><div class="line">Student.call(<span class="keyword">this</span>,<span class="string">'chping'</span>,<span class="number">23</span>,<span class="number">100</span>);</div><div class="line">obj.__proto__ = Student.prototype;</div><div class="line"><span class="keyword">return</span> obj;</div></pre></td></tr></table></figure></p>
<p>这样相信你就明白，第一句干的活了:</p>
<ol>
<li>首先创建一个空对象。</li>
<li>将属性挂载到该空对象上。</li>
<li>将空对象的<code>__proto__</code>属性连接到Student函数对象的prototype对象上，来生成原型链。</li>
<li>返回该对象给stu变量。</li>
</ol>
<p>接下来就是第二句<code>stu.say()</code>，这句话的意思就是<strong>stu实例</strong>对象调用<strong>say方法</strong>，但是在查找的时候发现，<strong>stu实例</strong>对象上并没有这个方法，于是<strong>原型链</strong>就来了。此时他会根据其<code>__proto__</code>属性来查找<strong>Student</strong>函数对象的<strong>prototype对象</strong>上有没有<strong>say方法</strong>，然后它发现正好有一个<strong>say方法</strong>，于是就可以执行该方法了。</p>
<p>此时又产生一个问题，在执行Student函数对象的prototype上的say方法时，里面的<strong>this</strong>指向谁呢？<br>可以想一下，此时<strong>say</strong>方法是被谁调用的，很明显是<strong>stu</strong>实例对象，所以<strong>this</strong>指向<strong>stu</strong>，所以，<code>this.name</code>、<code>this.age</code>、<code>this.gride</code>就是实例对象<strong>stu</strong>上面的<code>chping</code>、<code>23</code>、<code>100</code>了。</p>
<p>下面我们再来看一下完整的原型链继承的图解，如果你能完全看懂这张图，那么你对原型链的理解也就差不多了。<br><img src="/images/prototype/6.jpg" alt="原型链继承图解">;</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>原型链的基础知识差不多通过上面这个例子就介绍完了，我们来总结一下：</p>
<ol>
<li><strong>每一个函数对象都有一个prototype属性，该属性指向其prototype对象</strong>。</li>
<li><strong>每一个对象都有一个<code>__protto__</code>属性，该属性指向创建这个对象的构造函数的prototype对象</strong>。<ol>
<li><strong>function定义的函数对象的<strong>proto</strong>属性指向Function对象的prototype对象</strong>。</li>
<li><strong>非function定义的对象的<strong>proto</strong>属性指向创建它的构造函数的prototype对</strong>。（就是都指向Object的prototype对象）</li>
<li><strong>Object的prototype对象的<strong>proto</strong>指向null</strong>。</li>
</ol>
</li>
</ol>
<p>然后在看看下面几个常见的原型链的小题目，相信你对原型链会有一个新的认识了。</p>
<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">Person.prototype.name =<span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(person1.name); </div><div class="line"><span class="built_in">console</span>.log(person1.__proto__.name); </div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">name</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(person1.name); </div><div class="line"><span class="built_in">console</span>.log(person1.__proto__.constructor);</div><div class="line"><span class="built_in">console</span>.log(person1.__proto__.name);</div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person2.__proto__.name); </div><div class="line"><span class="built_in">console</span>.log(person2.__proto__.constructor == <span class="built_in">Object</span>);</div><div class="line"><span class="built_in">console</span>.log(person2.name);</div></pre></td></tr></table></figure>
<p>上面的<code>console.log</code>会打印什么？<br>这个题考察的是对prototype对象的理解。</p>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inner</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> outer = <span class="keyword">new</span> Outer();</div><div class="line">Inner.prototype = outer;</div><div class="line"><span class="keyword">var</span> inner = <span class="keyword">new</span> Inner();</div><div class="line"></div><div class="line">inner.a = inner.a + <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(inner);</div><div class="line"><span class="built_in">console</span>.log(outer);</div></pre></td></tr></table></figure>
<p>猜猜上面会是什么结果？<br>这个题考察的是对实例对象上属性的理解。</p>
<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> dog =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">animal.price = <span class="number">2000</span>;</div><div class="line">dog.prototype = animal;</div><div class="line"><span class="keyword">var</span> dd = <span class="keyword">new</span> dog();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(dog.price);</div><div class="line"><span class="built_in">console</span>.log(dd.price);</div></pre></td></tr></table></figure>
<p>在分析一下这个题目的输出结果？<br>这个题目考察的是<code>__proto__</code>属性的理解。</p>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p>下面放大招了，这个题目可能不完全是原型链的问题，对JS基础知识的一个综合考察，可以试一试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">a.param = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">foo.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo.get();</div><div class="line">get();</div><div class="line">foo().get();</div><div class="line">get();</div><div class="line"><span class="keyword">new</span> foo.get();</div><div class="line"><span class="keyword">new</span> foo().get();</div><div class="line"><span class="keyword">new</span> <span class="keyword">new</span> foo().get();</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue和React对比]]></title>
      <url>https://chping2125.github.io/2016/11/28/Vue%E5%92%8CReact%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<p>Vue也已经升级到2.0版本了，到现在为止（2016/11/19）比较流行的MVVM框架有<strong>AngularJS</strong>（也有人认为其为MVC）、<strong>ReactJS</strong>和<strong>VueJS</strong>，这三个框架中，以我现在的情况来说（AngularJS2还没有去接触），ReactJS和VueJS的对比应该是比较适合的，感觉这哥俩就是好基友，不管是<strong>单向数据流</strong>、<strong>组件化思想</strong>、还是构建大型应用的<strong>路由</strong>和<strong>状态管理</strong>都有些许相似之处。而AngularJS与Jquery对比我个人觉着比较合适。</p>
<p>为什么现在MVVM框架这么火呢？JQuery挺好用的呀，为什么要去代替它？…</p>
<p>可能会产生这样的疑问，在我看来，MVVM框架的流行是因为随着前端技术的发展对于要求越来越高和前端面对的场景越来越复杂导致了现实对于前端性能的要求也越来越高，这样像JQuery那样频繁的操作DOM节点的方式显然就不太合适了。所以MVVM开始逐渐流行开来，另外我认为JQuery目前来看还是不会被代替的，因为对于一些对性能要求不是很高的前端项目，是用JQuery来开发还是非常爽的。</p>
<p>废话有点多了，进入正题。接下来从<strong>数据双向绑定</strong>、<strong>组件及数据流</strong>、<strong>路由</strong>、<strong>状态管理</strong>等方面来分别对比一下怎样去使用Vue和React。</p>
<a id="more"></a>
<h1 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h1><p>我理解的数据双向绑定是，MVVM框架中的View层和Model层的数据相互影响。那么，那些行为会引起数据变动呢？<br>首先，View层（即页面上）的<strong>表单操作</strong>、<strong>触发事件</strong>可能会引起数据变动；<strong>ajax请求</strong>也可能会引起数据变动，这个变动我认为更多在Model层；还有一种情况就是，<strong>某一数据变动引起另外关联数据</strong>的改变。<br>不管是哪一种数据改变，都会导致View层和Model层的变化，View层变动引起页面变化，Model层变动保存数据。</p>
<h2 id="Vue的数据双向绑定"><a href="#Vue的数据双向绑定" class="headerlink" title="Vue的数据双向绑定"></a>Vue的数据双向绑定</h2><p>在Vue中，View层中与数据绑定有关的有<strong>插值表达式</strong>、<strong>指令系统</strong>、<strong>*Class和Style</strong>、<strong>事件处理器</strong>和<strong>表单控件</strong>，<strong>ajax请求</strong>和<strong>计算属性</strong>也和数据变化有关，下面我们分别说一下这些知识点设计的一些数据绑定问题。</p>
<h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>在Vue中，<strong>插值表达式</strong>和<strong>指令</strong>对于数据的操作又称为<strong>模板语法</strong>。</p>
<blockquote>
<p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>
<p>在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>
</blockquote>
<p>关于插值表达式的使用，在<a href="http://cn.vuejs.org/v2/guide/syntax.html#插值l" target="_blank" rel="external">Vue官网模板语法的插值</a>部分有详细的使用说明，不在赘述，需要注意的是，<strong>过滤器</strong>在插值中的使用有时可以起到意想不到的效果。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>Vue重的指令估计是从Angular那里学来的，有很多相似的地方，但是也不完全相同。<br>Vue中的指令我觉着非常的简单，并且就12个，很容易记忆：</p>
<ol>
<li><strong>v-bind</strong>:动态地绑定一个或多个 <em>html属性</em>，或一个组件 <em>prop 到表达式</em>（组件单项数据流使用）。</li>
<li><strong>v-once</strong>:绑定只渲染元素和组件 <em>一次</em> 的特性或prop表达式。</li>
<li><strong>v-model</strong>:在表单控件或者组件上创建双向绑定，<em>代替value值</em>。</li>
<li><strong>v-text</strong>:更新元素的 <em>textContent</em>。</li>
<li><strong>v-html</strong>:更新元素的 <em>innerHTML</em>。<strong>注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译</strong> 。</li>
<li><strong>v-on</strong>:绑定事件监听器。</li>
<li><strong>v-if / v-else / v-show</strong>:条件渲染。</li>
<li><strong>v-for</strong>:列表渲染。</li>
<li><strong>v-pre</strong>:跳过这个元素和它的子元素的编译过程。<br>10 <strong>v-cloak</strong>:这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] { display: none }</code>一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</li>
</ol>
<p>大概列举一下，详细使用请参考<a href="http://cn.vuejs.org/v2/api/#指令" target="_blank" rel="external">Vue API 指令</a>和<a href="http://cn.vuejs.org/v2/guide/" target="_blank" rel="external">Vue 指南的Class与Style绑定、条件渲染、列表渲染、事件处理器、表单控件绑定</a>部分内容。</p>
<h3 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h3><p>Vue为了方便操作控制元素的样式，专门增强了<strong>v-bind:class</strong>和<strong>v-bind:style</strong>,通过增强的这两个指令可以实用<strong>对象语法</strong>或者<strong>数组语法</strong>对元素的样式进行变动，这也不是本文重点，<a href="http://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="external">Vue官方Class与Style绑定</a>已经说得很详细了。</p>
<h3 id="条件渲染和列表渲染"><a href="#条件渲染和列表渲染" class="headerlink" title="条件渲染和列表渲染"></a>条件渲染和列表渲染</h3><p>条件渲染和列表渲染在Vue模板中动态创建模板很不错，让我里面想到了JSP中的EL表达式和Struts中的JSTL(后端模板语言中基本都有)，这就可以方便的根据后端传过来的数据进行模板创建了。你懂得，详细语法和使用还是参考<a href="http://cn.vuejs.org/v2/guide/conditional.html" target="_blank" rel="external">Vue文档列表渲染和条件渲染</a>，本篇主题是对比，并不是讲解基础语法，Vue的官方文档我觉着非常给力，简单明了。</p>
<h3 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h3><p>在Vue中我们可以通过<strong>v-on</strong>来给元素注册事件，完成<a href="http://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="external">事件注册</a>，Vue中的事件处理和平时使用的事件处理不同之处就是，既可以绑定数据处理函数，也可以使用内联处理器。并且，Vue还讲常用的事件方法，如<strong>preventDefault()</strong>等通过修饰符的方式来方便使用。</p>
<h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><p>你可以用<strong>v-model</strong>指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。</p>
<p>Vue中对于<a href="http://cn.vuejs.org/v2/guide/forms.html" target="_blank" rel="external">表单控件</a>提供的<em>v-model*</em>指令非常的使用，可以方便的返回或者设置表单控件的信息。</p>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>在Vue中引入了<strong>计算属性</strong>来处理模板中放入太多的逻辑会让模板过重且难以维护的问题，这样不但解决了上面的问题，而且也同时让模板和业务逻辑更好的分离。<br><a href="http://cn.vuejs.org/v2/guide/computed.html" target="_blank" rel="external">Vue计算属性</a></p>
<h3 id="ajax数据请求"><a href="#ajax数据请求" class="headerlink" title="ajax数据请求"></a>ajax数据请求</h3><p>在Vue1.x的版本中，官方推荐的ajax数据请求库是<strong>vue-resource</strong>，但是在Vue2.0的版本中，不再推荐使用，该推荐使用<strong><a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a></strong>。</p>
<p>其实这些ajax数据请求的使用都大差不差，随你选择，并且<strong>vue-resource</strong>还是继续支持使用的，在Vue2.0中。</p>
<p>以上八个方面，我个人认为都是和数据绑定相关的一些Vue基本项，只是简单列举，具体内容请查看<a href="http://cn.vuejs.org/v2/guide" target="_blank" rel="external">Vue文档</a>或者<a href="http://cn.vuejs.org/v2/api/" target="_blank" rel="external">API</a>。<br>为什么这么多呢？因为Vue中有个<strong>模板</strong>的概念，所以，数据和模板进行数据绑定需要分别来做，而在接下来的React中，你会发现，React的数据绑定虽然也是这八项，但是，不会展开八项来说明。</p>
<h2 id="React中的数据双向绑定"><a href="#React中的数据双向绑定" class="headerlink" title="React中的数据双向绑定"></a>React中的数据双向绑定</h2><p>在上面的Vue中，我们已经提及了有八个方面可以影响到数据的改变，但是React中就没有必要展开了说明了，因为在React中没有Vue中模板的概念，因为人家有一个JSX语法呀，可以将HTML和JS还有CSS混合写在一起呀，，这样写成的<strong>组件</strong>感觉还不错，<strong>组件化</strong>也是ReactJS的重要特点之一。</p>
<p>React中通过将<strong>state</strong>（Model层） 与View层数据进行双向绑定达到数据的实时更新变化，具体来说就是在View层直接写JS代码将Model层中的数据拿过来渲染，一旦像<strong>表单操作</strong>、<strong>触发事件</strong>、<strong>ajax请求</strong>等触发数据变化，则进行双向同步。</p>
<p>所以说React的特点是<strong>组件化</strong>，也就是说，接下来的小节才是React的重点部分。</p>
<h1 id="组件及数据流"><a href="#组件及数据流" class="headerlink" title="组件及数据流"></a>组件及数据流</h1><p>前端发展到现在，为了提高开发效率，组件化已经成为一个必然的趋势。而MVVM框架中，如果没有组件化的思想，它都不敢说拿出来宣传（纯属个人意淫，哈哈）。下面我们再分别简单介绍一下VueJS和ReactJS中<strong>组件思想</strong>和<strong>组件之间的数据流</strong>。</p>
<h2 id="React中的组件和数据流"><a href="#React中的组件和数据流" class="headerlink" title="React中的组件和数据流"></a>React中的组件和数据流</h2><p>上一节中提到过，React中的组件化是其重要的特点之一，因为在Angular1.x的出现，并没有明确提出组件的思想，只是有一个类似的<strong>指令思想</strong>来实现组件化的方式。所以，当React中明确提出<strong>组件</strong>思想后，前端好像重生了（吹的有点大了）。</p>
<h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>React中实现组件有两种方式，一种是<strong>createClass</strong>方法，另一种是通过ES2015的思想<strong>类继承React.Component</strong>来实现。</p>
<h4 id="createClass方式实现"><a href="#createClass方式实现" class="headerlink" title="createClass方式实现"></a>createClass方式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">   render() &#123;</div><div class="line">     <span class="keyword">return</span> (</div><div class="line">       <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">     )</div><div class="line">   &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这样，一个组件就创建完成，并且通过ES2015的模块化思想将其暴露出去了，其他组件就可以引入并使用了。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./hello.jsx'</span>;</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>OK，这样就使用简单使用了一个组件。</p>
<h4 id="类继承React-Component来实现"><a href="#类继承React-Component来实现" class="headerlink" title="类继承React.Component来实现"></a>类继承React.Component来实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"comment"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.author &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.date &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; this.props.children &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentItem <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure>
<p>需要注意的是，这样创建组件的时候，组件名称首字母必须大写（如：CommentItem）。同样，我们使用一下这个组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> CommentItem <span class="keyword">from</span> <span class="string">'./comment-item'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> CommentNodes = <span class="keyword">this</span>.props.data.map(<span class="function">(<span class="params">comment, index</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">CommentItem</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">author</span>=<span class="string">&#123;comment.author&#125;</span> <span class="attr">date</span>=<span class="string">&#123;comment.date&#125;</span>&gt;</span></span></div><div class="line">          &#123;comment.content&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">CommentItem</span>&gt;</span></div><div class="line">      )</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        &#123; CommentNodes &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentList <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure></p>
<p>这样我们又创建了一个组件，并且在这个组件中我们使用了上面创建的那个组件。</p>
<h3 id="组件之间的数据流"><a href="#组件之间的数据流" class="headerlink" title="组件之间的数据流"></a>组件之间的数据流</h3><p>在上面<strong>类继承React.Component来实现</strong>一节中，我们可以看出例子中出现了组件嵌套的情况，仔细想想，组件之间传递信息肯定是必然的。那么React是怎样进行<strong>组件之间的数据通信</strong>的呢？</p>
<p>回答这个问题之前，我们需要考虑一下，组件之间有几种数据通信。首先，第一种比较容易想到，那就是<strong>父子组件</strong>之间的数据通信。第二种也就自然而然的出来了—-<strong>非父子组件</strong>之间的数据通信。</p>
<h4 id="父子组件数据通信"><a href="#父子组件数据通信" class="headerlink" title="父子组件数据通信"></a>父子组件数据通信</h4><p>父子组件之间的数据通信细分其实还有两种：<strong>父与子之间</strong>和<strong>子与父之间</strong>。</p>
<p>在React中，<strong>父与子</strong>之间的数据通信是通过<strong>props属性</strong>就行传递的；<br>而<strong>子与父</strong>之间的数据通信可以通过<strong>父组件定义事件，子组件触发父组件中的事件时，通过实参的形式来改变父组件中的数据</strong>来通信;</p>
<p>下面我们来分别通过例子来再现一下这种场景：<br><strong>父组件</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> CommentItem <span class="keyword">from</span> <span class="string">'./comment-item'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> CommentNodes = <span class="keyword">this</span>.props.data.map(<span class="function">(<span class="params">comment, index</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">CommentItem</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">author</span>=<span class="string">&#123;comment.author&#125;</span> <span class="attr">date</span>=<span class="string">&#123;comment.date&#125;</span>&gt;</span></span></div><div class="line">          &#123;comment.content&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">CommentItem</span>&gt;</span></div><div class="line">      )</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        &#123; CommentNodes &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentList <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>子组件</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"comment"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.author &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; this.props.date &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; this.props.children &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; CommentItem <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</div></pre></td></tr></table></figure></p>
<p>通过上面我们可以看出，子组件CommentItem需要父组件传过来的值进行展示，而父组件是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;CommentItem key=&#123;index&#125; author=&#123;comment.author&#125; date=&#123;comment.date&#125;&gt; &#123;comment.content&#125; &lt;<span class="regexp">/CommentItem&gt;</span></div></pre></td></tr></table></figure></p>
<p>在父组件中添加了<code>key</code>、<code>author</code>、<code>date</code>属性来向子组件传值。想对象的，子组件通过props对象来获取父组件传过来的值，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span&gt;&#123; this.props.author &#125;&lt;/span&gt;</div><div class="line">&lt;span&gt;&#123; this.props.date &#125;&lt;/span&gt;</div><div class="line">&lt;div&gt;&#123; this.props.children &#125;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>好的，我们再来看一下另一种<strong>子与父</strong>之间的通信。</p>
<p><strong>父组件</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> CommentList <span class="keyword">from</span> <span class="string">'./comment-list'</span>;</div><div class="line"><span class="keyword">import</span> CommentForm <span class="keyword">from</span> <span class="string">'./comment-form'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentBox</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">data</span>: []&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleCommentSubmit(comment) &#123;</div><div class="line">    <span class="keyword">let</span> comments = <span class="keyword">this</span>.state.data;</div><div class="line">    comments.push(comment);</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">data</span>: comments&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className="m-index"&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;h1&gt;评论&lt;/h1&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;CommentList data=&#123;this.state.data&#125; /&gt;</div><div class="line">        &lt;CommentForm onCommentSubmit=&#123;this.handleCommentSubmit.bind(this)&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export &#123; CommentBox as default &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>子组件</strong>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  handleClick()&#123;</div><div class="line">    <span class="keyword">let</span> author = <span class="keyword">this</span>.refs.author.value,</div><div class="line">        content = <span class="keyword">this</span>.refs.content.value;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.props.onCommentSubmit(&#123;author, content, <span class="attr">date</span>:<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.refs.author.value = <span class="string">""</span>;</div><div class="line">    <span class="keyword">this</span>.refs.content.value = <span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"yo-list yo-list-a"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">className</span>=<span class="string">"item item-input"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">className</span>=<span class="string">"yo-input flex"</span> <span class="attr">ref</span>=<span class="string">"author"</span> <span class="attr">placeholder</span>=<span class="string">"发布人"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">className</span>=<span class="string">"item item-input"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">className</span>=<span class="string">"yo-input flex"</span> <span class="attr">ref</span>=<span class="string">"content"</span> <span class="attr">placeholder</span>=<span class="string">"留言内容"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span> <span class="attr">className</span>=<span class="string">"yo-btn yo-btn-l"</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export &#123; CommentForm as default &#125;;</div></pre></td></tr></table></figure></p>
<p>简单解释一下，子组件是一个表单组件，父组件中引用了该表单子组件，然后子组件中点击button按钮，触发子组件中的处理函数，处理函数通过<strong>refs</strong>获取到表单输入值然后调用父组件中传过来的函数，从而触发父组件中的函数执行改变data数据，data数据变动直接影响的是另一个组件CommentList的变化。</p>
<p>需要注意的是，在获取表单控件内的数据时，我们利用了一个<strong>refs</strong>对象，该对象用于获取真实DOM结构。具体来说就是，在React中组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM，这是React探索性的创新）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff （详细了解<a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="external">diff 算法</a>），它可以极大提高网页的性能表现。<br>在这里点击button时，input和textarea元素还是虚拟DOM，所以违法获取到输入的值，需要通过<strong>refs</strong>对象获取一下。</p>
<h4 id="非父子组件之间的通信"><a href="#非父子组件之间的通信" class="headerlink" title="非父子组件之间的通信"></a>非父子组件之间的通信</h4><p>React中在处理<strong>非父子组件之间的通信</strong>时，简单的，嵌套不深的非父子组件（如：兄弟组件）可以仍然使用上一节<strong>非父子组件之间通信</strong>中的<strong>事件函数，传形参</strong>的方式来实现。如子组件<strong>CommentList </strong>和子组件<strong>CommentFrom</strong>之间的通信就是这样实现的。</p>
<p>如果，需要通信的两个非父子组件之间嵌套比较深，可以使用Flux和Redux来实现状态管理，这里不做详细阐述，下面会详细对比vue的状态管理进行说明。想先了解的可以看一下阮一峰老师的blog：</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2016/01/flux.html" target="_blank" rel="external">Flux 架构入门教程</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="external">Redux 入门教程（一）：基本用法</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="external">Redux 入门教程（二）：中间件与异步操作</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="external">Redux 入门教程（三）：React-Redux 的用法</a></p>
</blockquote>
<h3 id="组件的声明周期"><a href="#组件的声明周期" class="headerlink" title="组件的声明周期"></a>组件的声明周期</h3><p><img src="/images/react&amp;vue/1.png" alt="react 组件的声明周期"></p>
<p>上面这张图已经很清楚的展示了react组件的声明周期了，就不过多介绍了。这张图摘自<a href="http://www.jianshu.com/p/4784216b8194" target="_blank" rel="external">React组件生命周期小结</a>，对于理解React组件的声明周期钩子函数很有帮助。</p>
<h2 id="Vue中的组件和数据流"><a href="#Vue中的组件和数据流" class="headerlink" title="Vue中的组件和数据流"></a>Vue中的组件和数据流</h2><p>Vue比React出来的要晚一些，自然顺应了前端组件化的大潮，并且个人觉得借鉴了部分React的思想来实现其组件化思想。</p>
<p>Vue默认的是单向数据流，这是Vue直接提出来说明的，父组件默认可以向子组件传递数据，但是子组件向父组件传递数据就需要额外设置了。</p>
<p><strong>父子组件</strong>之间的数据通信是通过<strong>Prop</strong>和<strong>自定义事件</strong>实现的，而<strong>非父子组件</strong>可以使用<strong>订阅/发布</strong>模式实现（类似于Angualr中的非父子指令之间的通信），再复杂一点也是建议使用状态管理（vuex）。</p>
<p>我一直觉得Vue的官方文档是我看过最直接、易懂的技术文档，所以就直接给大家贴一个中文链接，自己去跟随尤雨溪学习吧。</p>
<blockquote>
<p><a href="https://vuefe.cn/v2/guide/components.html" target="_blank" rel="external">Vue 中的组件和数据流</a></p>
</blockquote>
<h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><p>上面对比React和Vue的<strong>组件及数据流</strong>的时候，都提到了<strong>当非父子组件之间嵌套过深</strong>的时候都建议使用状态管理来维护数据的变化，那么到底它们之间的状态管理有什么区别呢？</p>
<h2 id="Vue中的状态管理–vuex"><a href="#Vue中的状态管理–vuex" class="headerlink" title="Vue中的状态管理–vuex"></a>Vue中的状态管理–vuex</h2><p>先放个<a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">官方中文链接</a>，还是建议直接看官方文档。然后在放一下小例子去体会一下。</p>
<p>先简单说明一下，vuex状态管理的几个核心概念：</p>
<ol>
<li>State: Vuex 使用 <strong>单一状态树</strong> —— 是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个『唯一数据源(<a href="https://en.wikipedia.org/wiki/Single_source_of_truth" target="_blank" rel="external">SSOT</a>)』而存在。这也意味着，每个应用将仅仅包含一个 store 实例。</li>
<li>Getters: 从state中获取状态值</li>
<li>Mutation: 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutations 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</li>
<li>Action:  类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态；Action 可以包含任意异步操作。</li>
</ol>
<p>例子来了：<br><strong>store.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'../libs/vue.js'</span>;</div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'../libs/vuex.min.js'</span>;</div><div class="line">Vue.use(Vuex);</div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">loginPrePath</span>:[<span class="string">'/'</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> mutations =&#123;</div><div class="line">  LOGINPREPATH(state,path)&#123;</div><div class="line">    state.loginPrePath.unshift(path);</div><div class="line">  &#125;,</div><div class="line">  LOGINPREPATHSHIFT(state)&#123;</div><div class="line">    state.loginPrePath.shift();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  state,</div><div class="line">  mutations</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>actions.js:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">loginPrePath</span>: <span class="function">(<span class="params">&#123;dispatch,state&#125;,path</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'actions loginPrePath:'</span> +path);</div><div class="line">    dispatch(<span class="string">'LOGINPREPATH'</span>,path);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">loginPrePathShift</span>: <span class="function">(<span class="params">&#123;dispatch,state&#125;</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'delete....'</span>);</div><div class="line">    dispatch(<span class="string">'LOGINPREPATHSHIFT'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>getter.js:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">loginPrePath</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.loginPrePath</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>login.vue:</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">...</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">import Vue from '../libs/vue.js';</div><div class="line">import VueResource from '../libs/vue-resource.js';</div><div class="line">import Vuex from '../vuex/actions.js';</div><div class="line">import VuexGet from '../vuex/getters.js';</div><div class="line"></div><div class="line">Vue.use(VueResource);</div><div class="line">export default &#123;</div><div class="line">  data()&#123;</div><div class="line">    return &#123;</div><div class="line">      username: '',</div><div class="line">      password: '',</div><div class="line">      loginBtn: 0</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  vuex: &#123;</div><div class="line">    actions: &#123;</div><div class="line">      setLoginPrePath: Vuex.loginPrePath</div><div class="line">    &#125;,</div><div class="line">    getters:&#123;</div><div class="line">      getLoginPrePath: VuexGet.loginPrePath</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    forget()&#123;</div><div class="line">      //使用vuex，修改状态值</div><div class="line">      this.setLoginPrePath(&#123;path:this.$route.path,title:'忘记密码'&#125;);</div><div class="line">      this.$router.go(&#123;path:'/index2/forget.json'&#125;);</div><div class="line">    &#125;,</div><div class="line">    submit()&#123;</div><div class="line">      if(this.loginBtn === 3)&#123;</div><div class="line">        if(this.checked)&#123;</div><div class="line">          this.$http.post('/zhixiao/password.json',&#123;password:this.password&#125;).then(</div><div class="line">            (res)=&gt;&#123;</div><div class="line">              if(res.ok)&#123;</div><div class="line">                console.log("注册成功，正在跳转登录页面");</div><div class="line">                setTimeout(()=&gt;&#123;</div><div class="line">                  //获取状态值，通过getter</div><div class="line">                  var path = this.getLoginPrePath[0].path;</div><div class="line">                  this.loginPrePathShift();</div><div class="line">                  this.$router.go(path);</div><div class="line">                &#125;,1500);</div><div class="line">              &#125;</div><div class="line">            &#125;,(res)=&gt;&#123;</div><div class="line">              console.log('网络错误，请稍后重试');</div><div class="line">            &#125;</div><div class="line">          )</div><div class="line">        &#125;else&#123;</div><div class="line">          console.log('请选择同意用户协议');</div><div class="line">        &#125;</div><div class="line">      &#125;else&#123;</div><div class="line">        console.log('请填写验证码');</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>上面的例子并无实际效果，是我从以前项目中拼出来的（vuex1.0），只是为了说明<strong>loginPrePath</strong>这个状态值在vuex中的使用方式。详细请看Vue官方文档。</p>
<h2 id="React中的状态管理–Flux"><a href="#React中的状态管理–Flux" class="headerlink" title="React中的状态管理–Flux"></a>React中的状态管理–Flux</h2><p>React中官方提供的状态管理是<strong>Flux</strong>，但是貌似现在第三方开发的<strong>Redux</strong>更强大，但是相比较使用的难度和学习曲线就有点陡峭了。</p>
<p>个人感觉<strong>Flux</strong>和Vue中的<strong>vuex</strong>思想基本相同，因为Vuex就是借鉴的Flux。<br>所以说，现在再来说<strong>Flux</strong>就简单了。</p>
<p>回想一下，在vuex中如果我们想修改一个状态值，我们应该怎么办呢？<br>在组件中配置vuex对象属性里面的<strong>actions</strong>和<strong>getters</strong>属性数组，然后配置的实际上是调用了<strong>Actions</strong>中的方法，<strong>Actions</strong>作用是将修改操作派生给<strong>store中的mutations</strong>,<strong>mutations</strong>真正处理业务逻辑并且修改状态值。</p>
<p>其实<strong>Flux</strong>也是如此，只不过在vuex中的<strong>Actions</strong>层执行了一个dispatcher方法将状态操作转发给了<strong>mutations</strong>，在Flux中直接需要显示的配置一层<strong>Dispatcher</strong>层进行转发。并且实现方式有所不同，vuex中<strong>mutations</strong>中隐藏了一些事件触发的操作，而Flux中直接通过我们自己编写代码实现，毕竟Flux是年纪大了，不如小弟vuex年轻呀。</p>
<p>例子：<br><strong>components.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> MyButton <span class="keyword">from</span> <span class="string">'./MyButton.jsx'</span>;</div><div class="line"><span class="keyword">import</span> ButtonActions <span class="keyword">from</span> <span class="string">'../actions/ButtonActions.js'</span>;</div><div class="line"><span class="keyword">import</span> ListStore <span class="keyword">from</span> <span class="string">'../stores/ListStore.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  getInitialState() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">items</span>: ListStore.getAll()</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  createNewItem() &#123;</div><div class="line">    ButtonActions.addNewItem(<span class="string">'New Item'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    ListStore.addChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    ListStore.removeChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  _onChange() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">items</span>: ListStore.getAll()</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.createNewItem&#125;</span> <span class="attr">items</span>=<span class="string">&#123;this.state.items&#125;</span> /&gt;</span></span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>ButtonActions.js:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> AppDispatcher <span class="keyword">from</span> <span class="string">'../dispatchers/AppDispatcher.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  addNewItem(text) &#123;</div><div class="line">    AppDispatcher.dispatch(&#123;</div><div class="line">      <span class="attr">actionType</span>: <span class="string">'ADD_NEW_ITEM'</span>,</div><div class="line">      <span class="attr">text</span>: text</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>AppDispatcher.js’：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dispatcher &#125; <span class="keyword">from</span> <span class="string">'flux'</span>;</div><div class="line"><span class="keyword">import</span> ListStore <span class="keyword">from</span> <span class="string">'../stores/ListStore.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> AppDispatcher = <span class="keyword">new</span> Dispatcher();</div><div class="line"></div><div class="line">AppDispatcher.register(<span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span>( action.actionType ) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_NEW_ITEM'</span>:</div><div class="line">      ListStore.addNewItemHandle(action.text);</div><div class="line">      ListStore.emitChange();</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> AppDispatcher;</div></pre></td></tr></table></figure></p>
<p><strong>ListStore.js: </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">Object</span>.assign(&#123;&#125;, EventEmitter.prototype, &#123;</div><div class="line">  <span class="attr">items</span>: [],</div><div class="line"></div><div class="line">  getAll()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  addNewItemHandler(text) &#123;</div><div class="line">    <span class="keyword">this</span>.items.push(text);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  emitChange() &#123;</div><div class="line">    <span class="keyword">this</span>.emit(<span class="string">'change'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  addChangeListener(callback) &#123;</div><div class="line">    <span class="keyword">this</span>.on(<span class="string">'change'</span>, callback);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  removeChangeListener(callback) &#123;</div><div class="line">    <span class="keyword">this</span>.removeListener(<span class="string">'change'</span>, callback);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>仔细按照例子走一遍工作流程，相信你就理解<strong>Flux</strong>实现状态管理的思想了。</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>要想实现SPA，路由是个不可避免的话题，作为主流的MVVM框架，怎么可能没有官方路由呢，两者的路由也很相似，都是利用各自的组件实现思想来实现的。</p>
<h2 id="Vue中的路由"><a href="#Vue中的路由" class="headerlink" title="Vue中的路由"></a>Vue中的路由</h2><p>还是先贴<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">官方链接</a>，简单易懂。<br>再给个例子(vue-router1.0)，仔细看一下：<br><strong>app.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用component</span></div><div class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./components/index.vue'</span>;</div><div class="line"><span class="keyword">import</span> main <span class="keyword">from</span> <span class="string">'./components/main.vue'</span>;</div><div class="line"><span class="keyword">import</span> my <span class="keyword">from</span> <span class="string">'./components/my.vue'</span>;</div><div class="line"></div><div class="line"><span class="comment">//APP route</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./libs/vue.js'</span>;</div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'./libs/vue-router.js'</span>;</div><div class="line"></div><div class="line">Vue.use(VueRouter);</div><div class="line"></div><div class="line">router.map(&#123;</div><div class="line">  <span class="string">'/'</span>:&#123;</div><div class="line">    <span class="attr">component</span>: index,</div><div class="line">    <span class="attr">subRoutes</span>:&#123;</div><div class="line">      <span class="string">'/'</span>:&#123;</div><div class="line">        <span class="attr">component</span>: main</div><div class="line">      &#125;,</div><div class="line">      <span class="string">'/my'</span>:&#123;</div><div class="line">        <span class="attr">name</span>:<span class="string">'my'</span>,</div><div class="line">        <span class="attr">component</span>: my</div><div class="line">      &#125;,</div><div class="line">      <span class="string">'/results/:key'</span>:&#123;</div><div class="line">        <span class="attr">name</span>:<span class="string">'results'</span>,</div><div class="line">        <span class="attr">component</span>:results</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//启动router</span></div><div class="line">router.start(App,<span class="string">'body'</span>);</div></pre></td></tr></table></figure></p>
<p><strong>index.vue</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index-container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-bind:class</span>=<span class="string">"getIndex == $index ? 'active' : ''"</span></span></div><div class="line">            <span class="attr">v-for</span>=<span class="string">"data in navList"</span></div><div class="line">            <span class="attr">v-on:click</span>=<span class="string">"changePage($index)"</span></div><div class="line">            <span class="attr">v-link</span>=<span class="string">"&#123;path:data.path,exact: true&#125;"</span>&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>&#123;&#123;&#123;data.icon&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;&#123;data.name&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'../libs/vue.js'</span>);</div><div class="line">  <span class="keyword">var</span> VueResource = <span class="built_in">require</span>(<span class="string">'../libs/vue-resource.js'</span>);</div><div class="line">  <span class="keyword">import</span> &#123;getIndex&#125; <span class="keyword">from</span> <span class="string">'../vuex/getters.js'</span>;</div><div class="line">  <span class="keyword">import</span> &#123;changeIndexPage&#125; <span class="keyword">from</span> <span class="string">'../vuex/actions.js'</span>;</div><div class="line">  Vue.use(VueResource);</div><div class="line"></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">vuex</span>: &#123;</div><div class="line">      <span class="attr">actions</span>:&#123;</div><div class="line">        changeIndexPage</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">getters</span>:&#123;</div><div class="line">        getIndex</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    data()&#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">cur</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">navList</span>:[</div><div class="line">          &#123;<span class="attr">path</span>:<span class="string">'/'</span>,<span class="attr">icon</span>:<span class="string">'&amp;#xe6bb;'</span>,<span class="attr">name</span>:<span class="string">'主页'</span>&#125;,</div><div class="line">          &#123;<span class="attr">path</span>:<span class="string">'/lee'</span>,<span class="attr">icon</span>:<span class="string">'&amp;#xe664;'</span>,<span class="attr">name</span>:<span class="string">'排行榜'</span>&#125;,</div><div class="line">          &#123;<span class="attr">path</span>:<span class="string">'/search'</span>,<span class="attr">icon</span>:<span class="string">'&amp;#xe65c;'</span>,<span class="attr">name</span>:<span class="string">'发现'</span>&#125;,</div><div class="line">          &#123;<span class="attr">path</span>:<span class="string">'/my'</span>,<span class="attr">icon</span>:<span class="string">'&amp;#xe735;'</span>,<span class="attr">name</span>:<span class="string">'我的'</span>&#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">      <span class="attr">changePage</span>:<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.changeIndexPage(i);</div><div class="line">        <span class="keyword">this</span>.cur = <span class="keyword">this</span>.getIndex;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>大概就这样，感觉像是配置的感觉，其实这就是利用的vue中组件思想来实现的，详细看官方文档。</p>
<h2 id="React中的路由"><a href="#React中的路由" class="headerlink" title="React中的路由"></a>React中的路由</h2><p>React中的路由只需要安装插件<strong>react-router</strong>即可。<br>再来看例子：<br><strong>app.jsx</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'../styles/usage/page/app.scss'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="comment">// import router</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory, IndexRoute, Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line"><span class="comment">// router components</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/router/router-app.jsx'</span>;</div><div class="line"><span class="keyword">import</span> TV <span class="keyword">from</span> <span class="string">'./components/router/router-tv.jsx'</span>;</div><div class="line"><span class="keyword">import</span> Shows <span class="keyword">from</span> <span class="string">'./components/router/router-show.jsx'</span>;</div><div class="line"><span class="keyword">import</span> ShowIndex <span class="keyword">from</span> <span class="string">'./components/router/router-show-index.jsx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> handleEnter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'entered'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> handleLeave = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'leaved'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render((</div><div class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">    &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">      &lt;Route path="tv" component=&#123;TV&#125;&gt;</div><div class="line">        &lt;IndexRoute component=&#123;ShowIndex&#125;&gt;&lt;/IndexRoute&gt;</div><div class="line">        &lt;Route path="/shows/:id" onEnter=&#123;handleEnter&#125; onLeave=&#123;handleLeave&#125; component=&#123;Shows&#125; /&gt;</div><div class="line">        &lt;Redirect from="shows/:id" to="/shows/:id" /&gt;</div><div class="line">      &lt;/Route&gt;</div><div class="line">    &lt;/Route&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">), app);</div></pre></td></tr></table></figure></p>
<p><strong>router-app.jsx:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="string">'ure strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="comment">// import router</span></div><div class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> | </div><div class="line">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/tv"</span>&gt;</span>电视剧<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>router-tv.jsx</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>router-show.jsx</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></div><div class="line">        节目内容 &#123;this.props.params.id&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>router-show-index.jsx</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"tv/shows/2"</span>&gt;</span>电视节目列表<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>例子很简单，但是将常用的路由操作基本都涵盖了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>大概通过自己的理解，对比了一下Vue和React的一些主要概念和实现方式，主要是为了加深自己理解，有些东西自己水平有限，不好表述，大概就是堆砌一些知识点而已。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular基础入门--数据绑定和指令]]></title>
      <url>https://chping2125.github.io/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>Angular的数据绑定在我的理解中也是双向绑定的，数据流才是单向的，本篇通过Angular内置指令系统来了解一下其双向数据绑定和单向数据流以及指令的基本使用的相关基础知识。</p>
<p>如果想深入详细了解Angular中的数据绑，可以看一下民工叔叔的<a href="https://github.com/xufei/blog/issues/14" target="_blank" rel="external">AngularJS实例教程（一）——数据绑定与监控</a>和<a href="https://github.com/xufei/blog/issues/10" target="_blank" rel="external">Angular沉思录（一）数据绑定</a>。</p>
<a id="more"></a>
<p><strong>说明</strong></p>
<blockquote>
<ol>
<li>Angular基础入门系列文章一共6篇，主要是为了<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上“course-angular”</a>仓库的一个说明性的小文章。</li>
<li>随着Vue、React的逐渐流行开来，Angular也发布了第二版，Angular1.x版使用开始减少，但是有时可能会遇到一些Angular1.x的一些问题，另外前端技术发展太快，技术一段时间不使用，就可能遗忘，这个小系列文章和<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上的course-angular</a>也是为了日后回头看看Angular相关基础之用。</li>
</ol>
</blockquote>
<p><strong>Angular基础入门</strong></p>
<ol>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4/" target="_blank" rel="external">Angular基础入门–数据绑定和指令</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/" target="_blank" rel="external">Angular基础入门—过滤器</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%80%9A%E4%BF%A1/" target="_blank" rel="external">Angular基础入门—作用域和通信</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ng-Route/" target="_blank" rel="external">Angular基础入门—ng-Route</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ui-Router/" target="_blank" rel="external">Angular基础入门—ui-Router</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%88%E7%BB%84%E4%BB%B6%EF%BC%89/" target="_blank" rel="external">Angular基础入门—自定义指令（组件）</a></li>
</ol>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ol>
<li><strong>ng-bind</strong>: 绑定 HTML 元素到应用程序数据</li>
<li><strong>ng-bind-html</strong>: 绑定 HTML 元素的 innerHTML 到应用程序数据，并移除 HTML 字符串中危险字符</li>
<li><strong>ng-class</strong>: 指定 HTML 元素使用的 CSS 类</li>
<li><strong>ng-style</strong>: 指定元素的 style 属性</li>
<li><strong>ng-click</strong>: 定义元素被点击时的行为</li>
<li><strong>ng-focus</strong>: 规定聚焦事件的行为</li>
<li><strong>ng-blur</strong>: 规定 blur 事件的行为</li>
<li><strong>ng-change</strong>: 规定在内容改变时要执行的表达式</li>
<li><strong>ng-checked</strong>: 规定元素是否被选中</li>
<li><strong>ng-value</strong>: 规定 input 元素的值</li>
<li><strong>ng-hide</strong>: 隐藏或显示 HTML 元素</li>
<li><strong>ng-show</strong>: 显示或隐藏 HTML 元素</li>
<li><strong>ng-if</strong>: 如果条件为 false 移除 HTML 元素</li>
<li><strong>ng-init</strong>: 定义应用的初始化值</li>
<li><strong>ng-repeat</strong>: 定义集合中每项数据的模板</li>
<li><strong>ng-controller</strong>: 定义应用的控制器对象</li>
</ol>
<p>更多指令请参考<a href="http://www.runoob.com/angularjs/angularjs-reference.html" target="_blank" rel="external">Angular指令</a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>利用Angular自带的<strong>内置指令</strong>绑定controller中$scope对象上的属性来实现mvvm数据双向绑定。</p>
<p><strong>以下每个实例的公共的util工具类</strong><br>common.util.js，其主要起到将html扔到页面上，然后Angular再去解析该html。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">    body.innerHTML = str + body.innerHTML;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ng-bind指令的使用"><a href="#ng-bind指令的使用" class="headerlink" title="ng-bind指令的使用"></a>ng-bind指令的使用</h3><p>demo1.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo1Tpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo1.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demo1Tpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> users = [&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'zhangsan'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">10</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'lisi'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">30</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  <span class="comment">//将数据绑定到对象$scope上</span></div><div class="line">  $scope.users = users;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo1.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"users[1].name"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;users[0].name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 利用ng-bind和双大括号可以取到$scope上面的属性值进行渲染 --&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-repeat指令"><a href="#ng-repeat指令" class="headerlink" title="ng-repeat指令"></a>ng-repeat指令</h3><p>demo2.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo2.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> users = [&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'zhangsan'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">10</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'lisi'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">30</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  $scope.users = users;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo2.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"user in users"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--$index:表示序号--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$index&#125;&#125;、<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-if-ng-show-ng-hide指令"><a href="#ng-if-ng-show-ng-hide指令" class="headerlink" title="ng-if/ng-show/ng-hide指令"></a>ng-if/ng-show/ng-hide指令</h3><p>demo3.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo3.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  $scope.isShow = <span class="literal">false</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo3.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- show/hide通过控制display来实现显示和隐藏--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"isShow"</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-hide</span>=<span class="string">"isShow"</span>&gt;</span>def<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- if是直接没有生成该DOM节点 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-if</span>=<span class="string">"isShow"</span>&gt;</span>ghi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-medel指令"><a href="#ng-medel指令" class="headerlink" title="ng-medel指令"></a>ng-medel指令</h3><p>demo4.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo4.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  <span class="comment">//$scope.username = 'zhangsan';</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo4.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-click指令"><a href="#ng-click指令" class="headerlink" title="ng-click指令"></a>ng-click指令</h3><p>demo5.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo5.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  $scope.counter = <span class="number">0</span>;</div><div class="line">  <span class="comment">//也可以向$scope对象添加方法</span></div><div class="line">  $scope.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $scope.counter++;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo5.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 在指令内执行方法 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"add()"</span>&gt;</span> + <span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-keyup指令"><a href="#ng-keyup指令" class="headerlink" title="ng-keyup指令"></a>ng-keyup指令</h3><p>demo6.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo6.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line"></div><div class="line">  $scope.item = <span class="string">""</span>;</div><div class="line"></div><div class="line">  $scope.items = [</div><div class="line">    <span class="string">"aaa"</span></div><div class="line">  ];</div><div class="line"></div><div class="line">  $scope.remove = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    $scope.items.splice(i, <span class="number">1</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  $scope.add = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(event.code === <span class="string">'Enter'</span>) &#123;</div><div class="line">      $scope.items.unshift($scope.item);</div><div class="line">      $scope.item = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo6.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 事件中的event对象通过$event的形式传参过去 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"item"</span> <span class="attr">ng-keyup</span>=<span class="string">"add($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items track by $index"</span>&gt;</span>&#123;&#123;$index&#125;&#125;.&#123;&#123;item&#125;&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"remove($index)"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ng-include指令"><a href="#ng-include指令" class="headerlink" title="ng-include指令"></a>ng-include指令</h3><p>demo13.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo13.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">myApp.filter(<span class="string">'gender'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(g) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'男'</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'女'</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'其他'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'showController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> persons = [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'chping'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">21</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'chengping'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'chyan'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">19</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  <span class="keyword">var</span> persons2 = [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'lala'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">21</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'lalala'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'lalalala'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">19</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  $scope.persons = persons;</div><div class="line">  $scope.persons2 = persons2;</div><div class="line">  $scope.template = <span class="string">'src/scripts/tpls/person.string'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo13.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"showController"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"template"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"src/scripts/tpls/person.string"</span>&gt;</span>tpl1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"src/scripts/tpls/person2.string"</span>&gt;</span>tpl2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">"template"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>person.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"p in persons"</span>&gt;</span></div><div class="line">        &#123;&#123;p.name&#125;&#125;/&#123;&#123;p.age&#125;&#125;/&#123;&#123;p.gender | gender&#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>person2.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"p in persons2"</span>&gt;</span></div><div class="line">        &#123;&#123;p.name&#125;&#125;/&#123;&#123;p.age&#125;&#125;/&#123;&#123;p.gender | gender&#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>通过结合几个指令系统简单的了解了一下Angular的数据双向绑定和指令的基本使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular基础入门---过滤器]]></title>
      <url>https://chping2125.github.io/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>Angular中过滤器结合指令系统可以快速的实现某些简单的业务逻辑。</p>
<a id="more"></a>
<p><strong>说明</strong></p>
<blockquote>
<ol>
<li>Angular基础入门系列文章一共6篇，主要是为了<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上“course-angular”</a>仓库的一个说明性的小文章。</li>
<li>随着Vue、React的逐渐流行开来，Angular也发布了第二版，Angular1.x版使用开始减少，但是有时可能会遇到一些Angular1.x的一些问题，另外前端技术发展太快，技术一段时间不使用，就可能遗忘，这个小系列文章和<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上的course-angular</a>也是为了日后回头看看Angular相关基础之用。</li>
</ol>
</blockquote>
<p><strong>Angular基础入门</strong></p>
<ol>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4/" target="_blank" rel="external">Angular基础入门–数据绑定和指令</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/" target="_blank" rel="external">Angular基础入门—过滤器</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%80%9A%E4%BF%A1/" target="_blank" rel="external">Angular基础入门—作用域和通信</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ng-Route/" target="_blank" rel="external">Angular基础入门—ng-Route</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ui-Router/" target="_blank" rel="external">Angular基础入门—ui-Router</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%88%E7%BB%84%E4%BB%B6%EF%BC%89/" target="_blank" rel="external">Angular基础入门—自定义指令（组件）</a></li>
</ol>
<p><strong>以下每个实例的公共的util工具类</strong><br>common.util.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">    body.innerHTML = str + body.innerHTML;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="limitTo和orderBy"><a href="#limitTo和orderBy" class="headerlink" title="limitTo和orderBy"></a>limitTo和orderBy</h2><p>demo7.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo7.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> items = [</div><div class="line">    &#123;<span class="attr">title</span>: <span class="string">'权利的游戏'</span>, <span class="attr">subscribe</span>: <span class="literal">true</span>, <span class="attr">updated</span>: <span class="number">1458691234</span>&#125;,</div><div class="line">    &#123;<span class="attr">title</span>: <span class="string">'真探'</span>, <span class="attr">subscribe</span>: <span class="literal">false</span>, <span class="attr">updated</span>: <span class="number">1458777656</span>&#125;,</div><div class="line">    &#123;<span class="attr">title</span>: <span class="string">'黑吃黑'</span>, <span class="attr">subscribe</span>: <span class="literal">true</span>, <span class="attr">updated</span>: <span class="number">1458864234</span>&#125;,</div><div class="line">    &#123;<span class="attr">title</span>: <span class="string">'大西洋帝国'</span>, <span class="attr">subscribe</span>: <span class="literal">true</span>, <span class="attr">updated</span>: <span class="number">1458950499</span>&#125;,</div><div class="line">    &#123;<span class="attr">title</span>: <span class="string">'罗马'</span>, <span class="attr">subscribe</span>: <span class="literal">false</span>, <span class="attr">updated</span>: <span class="number">1459036887</span>&#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  $scope.items = items;</div><div class="line"></div><div class="line">  $scope.limit = <span class="number">4</span>;</div><div class="line"></div><div class="line">  $scope.price = <span class="number">234.56</span>;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo7.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"limit"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;price | currency: '￥'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items | limitTo:limit | orderBy:'-updated'"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>名字：&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>是否发布：<span class="tag">&lt;<span class="name">b</span> <span class="attr">ng-class</span>=<span class="string">"&#123;'sub': item.subscribe&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>跟新时间：&#123;&#123;item.updated | date:'yyyy年MM月dd日,HH:mm'&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="过滤器调用一个方法"><a href="#过滤器调用一个方法" class="headerlink" title="过滤器调用一个方法"></a>过滤器调用一个方法</h2><p>demo8.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo8.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> friends = [&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'John'</span>,</div><div class="line">        <span class="attr">phone</span>: <span class="string">'555-1276'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Mary'</span>,</div><div class="line">        <span class="attr">phone</span>: <span class="string">'800-BIG-MARY'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Mike'</span>,</div><div class="line">        <span class="attr">phone</span>: <span class="string">'555-4321'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Adam'</span>,</div><div class="line">        <span class="attr">phone</span>: <span class="string">'555-5678'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Julie'</span>,</div><div class="line">        <span class="attr">phone</span>: <span class="string">'555-8765'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Juliette'</span>,</div><div class="line">        <span class="attr">phone</span>: <span class="string">'555-5678'</span></div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    $scope.friends = friends;</div><div class="line">    $scope.searchText = <span class="string">''</span>;</div><div class="line"></div><div class="line">    $scope.search = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span>($scope.searchText != <span class="string">""</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(value.name.toLowerCase().indexOf($scope.searchText.toLowerCase()) != <span class="number">-1</span> || value.phone.toLowerCase().indexOf($scope.searchText.toLowerCase()) != <span class="number">-1</span>) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo8.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"f in friends | limitTo:10 | filter:search:value"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;f.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;f.phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>demo12.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo12.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">myApp.filter(<span class="string">'gender'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(g) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'男'</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'女'</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'其他'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'showController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> persons = [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'chping'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">21</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'chengping'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'chyan'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">19</span>,</div><div class="line">      <span class="attr">gender</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  $scope.persons = persons;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo12.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-controller</span>=<span class="string">"showController"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"p in persons"</span>&gt;</span></div><div class="line">        &#123;&#123;p.name&#125;&#125;/&#123;&#123;p.age&#125;&#125;/&#123;&#123;p.gender | gender&#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular基础入门---作用域和通信]]></title>
      <url>https://chping2125.github.io/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<ol>
<li>在Angular中，controller父子之间是以一种原型链继 的方式来通信。</li>
<li>像ng-controller、ng-if、ng-include、ng-repeat、ng-switch等会创建DOM结构的指令都会创建作用域，这些作用域之间的通信可以通过$parent来访问父controller。</li>
</ol>
</blockquote>
<p>想深入详细了解Angular中的作用域，可以看<a href="https://github.com/xufei/blog/issues/18" target="_blank" rel="external">AngularJS实例教程（二）——作用域与事件</a></p>
<a id="more"></a>
<p><strong>说明</strong></p>
<blockquote>
<ol>
<li>Angular基础入门系列文章一共6篇，主要是为了<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上“course-angular”</a>仓库的一个说明性的小文章。</li>
<li>随着Vue、React的逐渐流行开来，Angular也发布了第二版，Angular1.x版使用开始减少，但是有时可能会遇到一些Angular1.x的一些问题，另外前端技术发展太快，技术一段时间不使用，就可能遗忘，这个小系列文章和<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上的course-angular</a>也是为了日后回头看看Angular相关基础之用。</li>
</ol>
</blockquote>
<p><strong>Angular基础入门</strong></p>
<ol>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4/" target="_blank" rel="external">Angular基础入门–数据绑定和指令</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/" target="_blank" rel="external">Angular基础入门—过滤器</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%80%9A%E4%BF%A1/" target="_blank" rel="external">Angular基础入门—作用域和通信</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ng-Route/" target="_blank" rel="external">Angular基础入门—ng-Route</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ui-Router/" target="_blank" rel="external">Angular基础入门—ui-Router</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%88%E7%BB%84%E4%BB%B6%EF%BC%89/" target="_blank" rel="external">Angular基础入门—自定义指令（组件）</a></li>
</ol>
<p><strong>以下每个实例的公共的util工具类</strong><br>common.util.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">    body.innerHTML = str + body.innerHTML;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="基于angular别名的父子控制器之间的通信（作用域链通信）"><a href="#基于angular别名的父子控制器之间的通信（作用域链通信）" class="headerlink" title="基于angular别名的父子控制器之间的通信（作用域链通信）"></a>基于angular别名的父子控制器之间的通信（作用域链通信）</h2><p>demo10.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo11.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'provinceController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"taiwan"</span>;</div><div class="line">&#125;);</div><div class="line">myApp.controller(<span class="string">'cityController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"taibei"</span>;</div><div class="line">&#125;);</div><div class="line">myApp.controller(<span class="string">'sectionController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"qianfeng"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo10.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"provinceController as p"</span>&gt;</span></div><div class="line">      &#123;&#123;p.name&#125;&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"cityController as c"</span>&gt;</span></div><div class="line">        &#123;&#123;p.name&#125;&#125;-&#123;&#123;c.name&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"sectionController as s"</span>&gt;</span></div><div class="line">          &#123;&#123;p.name&#125;&#125;-&#123;&#123;c.name&#125;&#125;-&#123;&#123;s.name&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="基于angular的服务通信"><a href="#基于angular的服务通信" class="headerlink" title="基于angular的服务通信"></a>基于angular的服务通信</h2><p>demo10.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo10.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">myApp.factory(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> user = &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">name</span>: <span class="string">'lurongtao'</span>,</div><div class="line">    <span class="attr">email</span>: <span class="string">'lurongtao@1000phone.com'</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> _getUser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> user;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> _setUser = <span class="function"><span class="keyword">function</span>(<span class="params">id, name, email</span>) </span>&#123;</div><div class="line">    user.id = id;</div><div class="line">    user.name = name;</div><div class="line">    user.email = email;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">get</span>: _getUser,</div><div class="line">    <span class="attr">set</span>: _setUser</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'showController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $log, $timeout, $http, $q, User</span>) </span>&#123;</div><div class="line">  $scope.user = User.get();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'saveController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $log, $timeout, $http, $q, User</span>) </span>&#123;</div><div class="line">  $scope.user = User.get();</div><div class="line">  $scope.save = <span class="function"><span class="keyword">function</span>(<span class="params">id, name, email</span>)</span>&#123;</div><div class="line">    User.set(id, name, email);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo10.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"showController"</span>&gt;</span></div><div class="line">      &#123;&#123;user.id&#125;&#125;/&#123;&#123;user.name&#125;&#125;/&#123;&#123;user.email&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"saveController"</span>&gt;</span></div><div class="line">      &#123;&#123;user.id&#125;&#125;/&#123;&#123;user.name&#125;&#125;/&#123;&#123;user.email&#125;&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"save('2', 'pengzhan', 'pengzhan@qq.com')"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="基于事件方式的控制器之前的通信"><a href="#基于事件方式的控制器之前的通信" class="headerlink" title="基于事件方式的控制器之前的通信"></a>基于事件方式的控制器之前的通信</h2><p>demo16.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo16.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'child1Ctrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $scope.$emit(<span class="string">'parent-ctrl'</span>);</div><div class="line">    $scope.$broadcast(<span class="string">'child-ctrl'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'parentCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.$on(<span class="string">'parent-ctrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parentCtrl has been emited~'</span>);</div><div class="line">  &#125;);</div><div class="line">  $scope.$on(<span class="string">'child-ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'childCtrl saved the broadcast info~'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'child2Ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.$on(<span class="string">'parent-ctrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---parentCtrl has been emited~'</span>);</div><div class="line">  &#125;);</div><div class="line">  $scope.$on(<span class="string">'child-ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---siblingCtrl saved the broadcast info~'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'grandsonCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.$on(<span class="string">'parent-ctrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parentCtrl has been emited~'</span>);</div><div class="line">  &#125;);</div><div class="line">  $scope.$on(<span class="string">'child-ctrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'grandsonCtrl saved the broadcast info~'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo16.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo16"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"parentCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"child1Ctrl"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"action()"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"grandsonCtrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"child2Ctrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="基于发布者-订阅者模式的控制器之间的通信"><a href="#基于发布者-订阅者模式的控制器之间的通信" class="headerlink" title="基于发布者/订阅者模式的控制器之间的通信"></a>基于发布者/订阅者模式的控制器之间的通信</h2><p>该部分内容请查看民工叔叔的<a href="https://github.com/xufei/blog/issues/18" target="_blank" rel="external">AngularJS实例教程（二）——作用域与事件</a>最后<strong>事件总线</strong>那段经典的代码实现。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular基础入门---ng-Route]]></title>
      <url>https://chping2125.github.io/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ng-Route/</url>
      <content type="html"><![CDATA[<p>为了实现SPA开发，路由是不可避免的一个话题，Angular有一套官方提供的ng-Route，但是并不是很好用。</p>
<p>ng-Route通过hash值和history两种方式实现路由工程。</p>
<blockquote>
<ol>
<li>服务$routeProvider定义了一个路由表</li>
<li>服务$routeParams保存了地址栏中的参数</li>
<li>服务$route完成路由匹配</li>
<li>服务$location ，同window.location.</li>
</ol>
</blockquote>
<p>主要事件：</p>
<blockquote>
<p>$routeChangeStart<br>$routeChangeSuccess<br>$routeChangeError</p>
</blockquote>
<a id="more"></a>
<p><strong>说明</strong></p>
<blockquote>
<ol>
<li>Angular基础入门系列文章一共6篇，主要是为了<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上“course-angular”</a>仓库的一个说明性的小文章。</li>
<li>随着Vue、React的逐渐流行开来，Angular也发布了第二版，Angular1.x版使用开始减少，但是有时可能会遇到一些Angular1.x的一些问题，另外前端技术发展太快，技术一段时间不使用，就可能遗忘，这个小系列文章和<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上的course-angular</a>也是为了日后回头看看Angular相关基础之用。</li>
</ol>
</blockquote>
<p><strong>Angular基础入门</strong></p>
<ol>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4/" target="_blank" rel="external">Angular基础入门–数据绑定和指令</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/" target="_blank" rel="external">Angular基础入门—过滤器</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%80%9A%E4%BF%A1/" target="_blank" rel="external">Angular基础入门—作用域和通信</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ng-Route/" target="_blank" rel="external">Angular基础入门—ng-Route</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ui-Router/" target="_blank" rel="external">Angular基础入门—ui-Router</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%88%E7%BB%84%E4%BB%B6%EF%BC%89/" target="_blank" rel="external">Angular基础入门—自定义指令（组件）</a></li>
</ol>
<p><strong>以下每个实例的公共的util工具类</strong><br>common.util.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">    body.innerHTML = str + body.innerHTML;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>demo14.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo14.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="comment">//1.在模块中注入ngRoute</span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, [<span class="string">'ngRoute'</span>]);</div><div class="line"></div><div class="line"><span class="comment">//2.定义$routeProvider</span></div><div class="line"><span class="comment">//$routeProvider对象有两个主要方法when()和oherwise()来定义路由</span></div><div class="line"><span class="comment">//还有一个常用属性caseInsensitiveMatch</span></div><div class="line">myApp.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">  <span class="comment">// 是否区分大小写</span></div><div class="line">  $routeProvider.caseInsensitiveMatch = <span class="literal">true</span>;</div><div class="line">  <span class="comment">//when(path,route)</span></div><div class="line">  <span class="comment">//参数route对象的属性</span></div><div class="line">  <span class="comment">//    controller：当前模板上的controller</span></div><div class="line">  <span class="comment">//    controllerAs: controller的别名</span></div><div class="line">  <span class="comment">//    template: 当前路由的模板</span></div><div class="line">  <span class="comment">//    templateUrl: 当前路由的模板路径</span></div><div class="line">  <span class="comment">//    resolve: 指定当前controller依赖的模板</span></div><div class="line">  <span class="comment">//    redirectTo: 重定向</span></div><div class="line">  $routeProvider</div><div class="line">    .when(<span class="string">'/home'</span>, &#123;</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/route/home.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'homeController'</span></div><div class="line">    &#125;)</div><div class="line">    .when(<span class="string">'/course'</span>, &#123;</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/route/courses.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'courseController'</span>,</div><div class="line">      <span class="attr">controllerAs</span>: <span class="string">'courseCtrl'</span></div><div class="line">    &#125;)</div><div class="line">    .when(<span class="string">'/employee'</span>, &#123;</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/route/employees.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'employeeController'</span>,</div><div class="line">      <span class="attr">resolve</span>: &#123;</div><div class="line">        <span class="attr">employeelist</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$http, $q</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> $http.get(<span class="string">'/mock/employee.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> res.data.data;</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .when(<span class="string">'/employee/:abc'</span>, &#123;</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/route/employeedetail.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'employeeDetailController'</span></div><div class="line">    &#125;)</div><div class="line">    .when(<span class="string">'/employeeSearch/:keywords'</span>, &#123;</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/route/employeeSearch.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'employeeSearchController'</span></div><div class="line">    &#125;)</div><div class="line">    .otherwise(&#123;</div><div class="line">      <span class="attr">redirectTo</span>: <span class="string">'/home'</span></div><div class="line">    &#125;)</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'homeController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $rootScope</span>)</span>&#123;</div><div class="line">  $scope.message = <span class="string">'home page'</span>;</div><div class="line">  <span class="comment">// $rootScope.$on('$routeChangeStart', function(event, next, cur)&#123;</span></div><div class="line">  <span class="comment">//   if (confirm('你真的要跳转到' + next.$$route.originalPath)) &#123;</span></div><div class="line">  <span class="comment">//     ;</span></div><div class="line">  <span class="comment">//   &#125; else &#123;</span></div><div class="line">  <span class="comment">//     event.preventDefault();</span></div><div class="line">  <span class="comment">//   &#125;</span></div><div class="line">  <span class="comment">// &#125;);</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// $rootScope.$on('$routeChangeSuccess', function(event, next, cur)&#123;</span></div><div class="line">  <span class="comment">//   console.log(cur.$$route.originalPath);</span></div><div class="line">  <span class="comment">// &#125;);</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// $rootScope.$on('$routeChangeError', function(event, next, cur)&#123;</span></div><div class="line">  <span class="comment">//   console.log(cur.$$route.originalPath);</span></div><div class="line">  <span class="comment">// &#125;);</span></div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'courseController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $rootScope</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> vm  = <span class="keyword">this</span>;</div><div class="line">  vm.courses = [<span class="string">'html5'</span>, <span class="string">'java'</span>, <span class="string">'android'</span>, <span class="string">'iOS'</span>];</div><div class="line">  $rootScope.color = <span class="string">'red'</span>;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'employeeController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="string">'$route'</span>, <span class="string">'$rootScope'</span>, <span class="string">'$location'</span>, <span class="string">'employeelist'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http, $route, $rootScope, $location, employeelist</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> vm  = $scope;</div><div class="line"></div><div class="line">  vm.keywords = <span class="string">""</span>;</div><div class="line">  vm.search = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (vm.keywords) &#123;</div><div class="line">      $location.url(<span class="string">'/employeeSearch/'</span> + vm.keywords);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  vm.reload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $route.reload();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// $http(&#123;</span></div><div class="line">  <span class="comment">//   url: '/mock/employee.json'</span></div><div class="line">  <span class="comment">// &#125;)</span></div><div class="line">  <span class="comment">// .then(function(res)&#123;</span></div><div class="line">  <span class="comment">//   vm.employees = res.data.data;</span></div><div class="line">  <span class="comment">// &#125;, function()&#123;</span></div><div class="line">  <span class="comment">//   ;</span></div><div class="line">  <span class="comment">// &#125;)</span></div><div class="line">  vm.employees = employeelist;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'employeeDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$routeParams'</span>, <span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $routeParams, $http</span>)</span>&#123;</div><div class="line">  $http(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/mock/employeedetail.json'</span>,</div><div class="line">    <span class="attr">params</span>: &#123;</div><div class="line">      <span class="attr">id</span>: $routeParams.abc</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">method</span>: <span class="string">'get'</span></div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    $scope.employee = res.data.data[<span class="number">0</span>];</div><div class="line">  &#125;)</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'employeeSearchController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$routeParams'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $routeParams</span>)</span>&#123;</div><div class="line">  $scope.keywords = $routeParams.keywords;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<p>demo14.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"leftMenu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/home"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/course"</span>&gt;</span>course<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/employee"</span>&gt;</span>employee<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"mainContent"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>courser.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Courses<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;color&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"course in courseCtrl.courses"</span>&gt;</span></div><div class="line">	&#123;&#123;course&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>employeedetail.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>employee Detail<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	&#123;&#123;employee.firstName&#125;&#125; &#123;&#123;employee.gender&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>employees.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>employees<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">搜索：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"keywords"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"search()"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"employee in employees"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/employee/&#123;&#123;employee.id&#125;&#125;"</span>&gt;</span>&#123;&#123;employee.firstName&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &#123;&#123;employee.gender&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"reload()"</span>&gt;</span>重新加载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>employeeSearch.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>employee Search<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	&#123;&#123;keywords&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>home.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;color&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">&#123;&#123;message&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular基础入门---ui-Router]]></title>
      <url>https://chping2125.github.io/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ui-Router/</url>
      <content type="html"><![CDATA[<p>Angular有一套官方提供的ng-Route，但是并不是很好用,于是有人开发了一套ui-Router。</p>
<blockquote>
<ol>
<li>服务$stateProvider定义了一个路由表</li>
<li>服务$stateParams保存了地址栏中的参数</li>
<li>服务$state完成路由匹配。$state主要的属性和方法：<br>——–current:保存了当前state中的配置项<br>——–params<br>——–get(name,context)<br>——–go(to,params,options)<br>——–reload()</li>
</ol>
</blockquote>
<p>主要事件：</p>
<blockquote>
<p>$routeChangeStart<br>$routeChangeSuccess<br>$routeChangeError</p>
</blockquote>
<a id="more"></a>
<p><strong>说明</strong></p>
<blockquote>
<ol>
<li>Angular基础入门系列文章一共6篇，主要是为了<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上“course-angular”</a>仓库的一个说明性的小文章。</li>
<li>随着Vue、React的逐渐流行开来，Angular也发布了第二版，Angular1.x版使用开始减少，但是有时可能会遇到一些Angular1.x的一些问题，另外前端技术发展太快，技术一段时间不使用，就可能遗忘，这个小系列文章和<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上的course-angular</a>也是为了日后回头看看Angular相关基础之用。</li>
</ol>
</blockquote>
<p><strong>Angular基础入门</strong></p>
<ol>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4/" target="_blank" rel="external">Angular基础入门–数据绑定和指令</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/" target="_blank" rel="external">Angular基础入门—过滤器</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%80%9A%E4%BF%A1/" target="_blank" rel="external">Angular基础入门—作用域和通信</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ng-Route/" target="_blank" rel="external">Angular基础入门—ng-Route</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ui-Router/" target="_blank" rel="external">Angular基础入门—ui-Router</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%88%E7%BB%84%E4%BB%B6%EF%BC%89/" target="_blank" rel="external">Angular基础入门—自定义指令（组件）</a></li>
</ol>
<p><strong>以下每个实例的公共的util工具类</strong><br>common.util.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">    body.innerHTML = str + body.innerHTML;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>demo14.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo17.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="comment">//1.在模块中注入依赖</span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, [<span class="string">'ui.router'</span>]);</div><div class="line"></div><div class="line"><span class="comment">//2.配置默认跳转路径</span></div><div class="line">myApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$urlRouterProvider</span>)</span>&#123;</div><div class="line">  $urlRouterProvider.otherwise(<span class="string">'/home'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//3.配置路径大小写敏感</span></div><div class="line">myApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$urlMatcherFactoryProvider</span>)</span>&#123;</div><div class="line">  $urlMatcherFactoryProvider.caseInsensitive(<span class="literal">false</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//4.定义路由表</span></div><div class="line"><span class="comment">// $stateProvider.state第二个参数配置项</span></div><div class="line"><span class="comment">//  url</span></div><div class="line"><span class="comment">//  controller</span></div><div class="line"><span class="comment">//  controllerAs</span></div><div class="line"><span class="comment">//  template</span></div><div class="line"><span class="comment">//  templateUrl</span></div><div class="line"><span class="comment">//  data    可以通过$state传递给其他路由，也是一个object，这对指令系统通信很有帮助</span></div><div class="line">myApp.config([<span class="string">'$stateProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$stateProvider</span>) </span>&#123;</div><div class="line">  $stateProvider</div><div class="line">    .state(<span class="string">'home'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/home'</span>,</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/ui-router/home.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'homeController'</span>,</div><div class="line">      <span class="attr">controllerAs</span>: <span class="string">'homeCtrl'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">customData</span>: <span class="string">'home自定义数据'</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .state(<span class="string">'course'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/course'</span>,</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/ui-router/courses.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'courseController'</span>,</div><div class="line">      <span class="attr">controllerAs</span>: <span class="string">'courseCtrl'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">customData</span>: <span class="string">'course自定义数据'</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    .state(<span class="string">'employeeParent'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/employee'</span>,</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/ui-router/employeeParent.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'employeeParentController'</span></div><div class="line">    &#125;)</div><div class="line">    .state(<span class="string">'employeeParent.employee'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/ui-router/employees.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'employeeController'</span>,</div><div class="line">      <span class="attr">controllerAs</span>: <span class="string">'employeeCtrl'</span>,</div><div class="line">      <span class="attr">resolve</span>: &#123;</div><div class="line">        <span class="attr">employeelist</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> $http.get(<span class="string">'/mock/employee.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> res.data.data;</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .state(<span class="string">'employeeParent.employeeDetail'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/:id'</span>,</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/ui-router/employeedetail.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'employeeDetailController'</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    .state(<span class="string">'employeeSearch'</span>, &#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'/employeeSearch/:keywords'</span>,</div><div class="line">      <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/ui-router/employeeSearch.html'</span>,</div><div class="line">      <span class="attr">controller</span>: <span class="string">'employeeSearchController'</span></div><div class="line">    &#125;)</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'homeController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$rootScope'</span>, <span class="string">'$state'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $rootScope, $state</span>)</span>&#123;</div><div class="line">  $scope.message = <span class="string">'home page'</span>;</div><div class="line">  $scope.customData2 = $state.get(<span class="string">'course'</span>).data.customData;</div><div class="line">  $scope.customData1 = $state.current.data.customData;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'courseController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$rootScope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $rootScope</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> vm  = <span class="keyword">this</span>;</div><div class="line">  vm.courses = [<span class="string">'html5'</span>, <span class="string">'java'</span>, <span class="string">'android'</span>, <span class="string">'iOS'</span>];</div><div class="line">  $rootScope.color = <span class="string">'red'</span>;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'employeeController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="string">'$state'</span>, <span class="string">'$rootScope'</span>, <span class="string">'employeelist'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http, $state, $rootScope, employeelist</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> vm  = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">  vm.keywords = <span class="string">""</span>;</div><div class="line">  vm.search = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (vm.keywords) &#123;</div><div class="line">      <span class="built_in">console</span>.log($state);</div><div class="line">      $state.go(<span class="string">'employeeSearch'</span>, &#123;</div><div class="line">        <span class="attr">keywords</span>: vm.keywords</div><div class="line">      &#125;)</div><div class="line">      <span class="comment">// $location.url('/employeeSearch/' + vm.keywords);</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  vm.reload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $state.reload();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  vm.employees = employeelist;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'employeeDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$stateParams'</span>, <span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $stateParams, $http</span>)</span>&#123;</div><div class="line">  $http(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'/mock/employeedetail.json'</span>,</div><div class="line">    <span class="attr">params</span>: &#123;</div><div class="line">      <span class="attr">id</span>: $stateParams.id</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">method</span>: <span class="string">'get'</span></div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    $scope.employee = res.data.data[<span class="number">0</span>];</div><div class="line">  &#125;)</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'employeeSearchController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$stateParams'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $stateParams</span>)</span>&#123;</div><div class="line">  $scope.keywords = $stateParams.keywords;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'employeeParentController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  ;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo14.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"leftMenu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"home"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"course"</span>&gt;</span>course<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"employeeParent.employee"</span>&gt;</span>employee<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"mainContent"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">ui-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular基础入门---自定义指令（组件）]]></title>
      <url>https://chping2125.github.io/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%88%E7%BB%84%E4%BB%B6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Angular1.x版本中并没有提出组件的概念，但是其自定义指令系统可以实现组件的概念。组件之间的通信则可以相应转换为controller之间的通信或者作用域问题。</p>
<p>自定义指令需要经过compile(编译)和link(链接)两个过程。</p>
<a id="more"></a>
<p><strong>说明</strong></p>
<blockquote>
<ol>
<li>Angular基础入门系列文章一共6篇，主要是为了<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上“course-angular”</a>仓库的一个说明性的小文章。</li>
<li>随着Vue、React的逐渐流行开来，Angular也发布了第二版，Angular1.x版使用开始减少，但是有时可能会遇到一些Angular1.x的一些问题，另外前端技术发展太快，技术一段时间不使用，就可能遗忘，这个小系列文章和<a href="https://github.com/chping2125/course-angular" target="_blank" rel="external">github上的course-angular</a>也是为了日后回头看看Angular相关基础之用。</li>
</ol>
</blockquote>
<p><strong>Angular基础入门</strong></p>
<ol>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4/" target="_blank" rel="external">Angular基础入门–数据绑定和指令</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/" target="_blank" rel="external">Angular基础入门—过滤器</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%80%9A%E4%BF%A1/" target="_blank" rel="external">Angular基础入门—作用域和通信</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ng-Route/" target="_blank" rel="external">Angular基础入门—ng-Route</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-ui-Router/" target="_blank" rel="external">Angular基础入门—ui-Router</a></li>
<li><a href="http://chping.website/2016/11/24/Angular%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%EF%BC%88%E7%BB%84%E4%BB%B6%EF%BC%89/" target="_blank" rel="external">Angular基础入门—自定义指令（组件）</a></li>
</ol>
<p><strong>以下每个实例的公共的util工具类</strong><br>common.util.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">    body.innerHTML = str + body.innerHTML;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>demo15.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demoTpl = <span class="built_in">require</span>(<span class="string">'../tpls/demo15.string'</span>);</div><div class="line"><span class="keyword">var</span> commonUtil = <span class="built_in">require</span>(<span class="string">'../utils/common.util.js'</span>);</div><div class="line">commonUtil.render(demoTpl);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'parentCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  $scope.message = <span class="string">"aaaa"</span>;</div><div class="line">  $scope.message2 = <span class="string">"parent message2"</span>;</div><div class="line">  $scope.changeValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $scope.message2 = <span class="string">'aaaaaaaa'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//directive方法回调函数返回对象属性</span></div><div class="line"><span class="comment">//  restrict: 'ECMA'    E: 指令标签 C：class指令  M：注释指令   A：属性指令</span></div><div class="line"><span class="comment">//  replace: true   使用模板替换元标记</span></div><div class="line"><span class="comment">//  controller      当前指令上的controller</span></div><div class="line"><span class="comment">//  template        当前路由的模板</span></div><div class="line"><span class="comment">//  templateUrl     当前路由的模板路径</span></div><div class="line"><span class="comment">//  scope    true 默认为false,继承父作用域；true为独立作用域。</span></div><div class="line"><span class="comment">//  link  表示当directive被angular编译后，执行该方法。link三个参数</span></div><div class="line"><span class="comment">//      scope:表示当前controller下的数据</span></div><div class="line"><span class="comment">//      element: 当前DOM</span></div><div class="line"><span class="comment">//      attr:当前DOM的自定义属性</span></div><div class="line">myApp.directive(<span class="string">'helloWorld'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'/src/scripts/tpls/directiveTpl.html'</span>,</div><div class="line">    <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">scope</span>: &#123;</div><div class="line">      <span class="attr">message2</span>: <span class="string">"="</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">      $scope.message = <span class="string">"zzzz"</span>;</div><div class="line">      <span class="comment">// $scope.message2 = 'bbbb';</span></div><div class="line">      $scope.changeValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $scope.message2 = <span class="string">'bbbbbbbbb'</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compile</span>: <span class="function"><span class="keyword">function</span>(<span class="params">elem, attrs</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">scope, elem, attrs</span>) </span>&#123;</div><div class="line">        <span class="comment">// console.log(scope.message);</span></div><div class="line">        elem.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="number">0</span>);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// console.log(attrs.scrollX);</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>demo15.string<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo15"</span> <span class="attr">ng-controller</span>=<span class="string">"parentCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- &lt;hello-world url="http://www.baidu.com" scroll-x="true"&gt;&lt;/hello-world&gt; --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hello-world</span> <span class="attr">message2</span>=<span class="string">"message2"</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>parent:&#123;&#123;message2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"changeValue()"</span>&gt;</span>parent changeValue<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的gulp使用]]></title>
      <url>https://chping2125.github.io/2016/11/09/%E6%88%91%E7%9A%84gulp%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>gulp作为流行的前端自动化构建工具，通过管道流的思想使我们更容易把控整个前端开发流程。本文简单记录一下我自己的gulp配置文件和自己学习和使用中收集的一部分资源，主要目的是为了自己在以后的开发过程中使用到gulp时，可以方便的查找一些基本配置和第三方插件。</p>
<p>如果想学习gulp的相关内容可以从下面第一小节<strong>关于gulp的一些资源bolg</strong>中查看一些网上的教程，如果你对gulp和webpack有疑问，想了解他们的区别也可以看一下这篇<a href="http://chping.website/2016/10/18/gulp%E5%92%8Cwebpack%E5%AF%B9%E6%AF%94/" target="_blank" rel="external">Gulp和Webpack对比</a><br><a id="more"></a></p>
<h1 id="关于gulp的一些资源bolg"><a href="#关于gulp的一些资源bolg" class="headerlink" title="关于gulp的一些资源bolg"></a>关于gulp的一些资源bolg</h1><ol>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">Gulp中文网</a></li>
<li><a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">gulp详细入门教程</a></li>
<li><a href="http://jafeney.com/2016/03/06/20160306-gulp/" target="_blank" rel="external">深入理解gulp自动化</a></li>
<li><a href="http://www.68kejian.com/app/detail.html?id=22&amp;&amp;c=80" target="_blank" rel="external">gulp插件大全</a></li>
</ol>
<p>暂时只有这么多，gulp只在一个项目中使用过，遇到问题通过这几篇bolg也差不多都能解决。</p>
<h1 id="gulp配置文件"><a href="#gulp配置文件" class="headerlink" title="gulp配置文件"></a>gulp配置文件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入 gulp 工具</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">//引入 gulp-webserver 模块</span></div><div class="line"><span class="keyword">var</span> webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>);</div><div class="line"><span class="comment">//引入 sass 模块</span></div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="comment">//引入 minify 模块</span></div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="comment">// 引入js 相关模块</span></div><div class="line"><span class="keyword">var</span> named = <span class="built_in">require</span>(<span class="string">'vinyl-named'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'gulp-webpack'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="comment">//引入 fs url模块</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="comment">//引入 rev revCollector 模块</span></div><div class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</div><div class="line"><span class="keyword">var</span> revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>);</div><div class="line"><span class="keyword">var</span> revAppend = <span class="built_in">require</span>(<span class="string">'gulp-rev-append'</span>);</div><div class="line"><span class="comment">//引入 sequence 模块</span></div><div class="line"><span class="keyword">var</span> sequence = <span class="built_in">require</span>(<span class="string">'gulp-sequence'</span>);</div><div class="line"><span class="comment">//引入 css前缀 模块</span></div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//启动server</span></div><div class="line">gulp.task(<span class="string">'webserver'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./'</span>)</div><div class="line">  .pipe(webserver(&#123;</div><div class="line">    <span class="attr">host</span>:<span class="string">'localhost'</span>,</div><div class="line">    <span class="attr">port</span>:<span class="number">80</span>,</div><div class="line">    <span class="comment">//浏览器自动刷新</span></div><div class="line">    livereload:<span class="literal">true</span>,</div><div class="line">    <span class="comment">//显示文件目录</span></div><div class="line">    directoryListing:&#123;</div><div class="line">      <span class="attr">enable</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">path</span>:<span class="string">'./'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//mock数据</span></div><div class="line">    middleware:<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> urlObj = url.parse(req.url,<span class="literal">true</span>);</div><div class="line">      <span class="keyword">switch</span> (urlObj.pathname) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'/pro/getPro'</span>:</div><div class="line">          res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/json;charaset=utf-8'</span>);</div><div class="line">          fs.readFile(<span class="string">'./mock/list.json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">            <span class="comment">//上面list.json路径使用相对路径，绝对路径前台无法获取数据</span></div><div class="line">            res.end(data);</div><div class="line">          &#125;);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'/web/getUser'</span>:</div><div class="line">          <span class="comment">//....</span></div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      next();</div><div class="line">    &#125;</div><div class="line">  &#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//css 预处理</span></div><div class="line"><span class="keyword">var</span> cssFiles = [</div><div class="line">  <span class="string">'./src/styles/usage/page/index.scss'</span></div><div class="line">]</div><div class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(cssFiles)</div><div class="line">  .pipe(sass().on(<span class="string">'error'</span>,sass.logError))</div><div class="line">  <span class="comment">// .pipe(minifyCSS())//压缩css</span></div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/prd/styles/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//js 模块化，合并压缩</span></div><div class="line"><span class="keyword">var</span> jsFiles = [</div><div class="line">  <span class="string">'./src/scripts/app.js'</span></div><div class="line">];</div><div class="line">gulp.task(<span class="string">'packjs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(jsFiles)</div><div class="line">  .pipe(named())</div><div class="line">  .pipe(webpack(&#123;</div><div class="line">    <span class="attr">output</span>:&#123;<span class="comment">//定义输出文件名</span></div><div class="line">      filename:<span class="string">'[name].js'</span><span class="comment">//此处[name]通过named()获取的</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>:&#123;</div><div class="line">      <span class="attr">loaders</span>:[&#123;</div><div class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">          <span class="attr">loader</span>:<span class="string">'imports?define=&gt;false'</span><span class="comment">//不符合commandJS规范的不编译</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">test</span>:<span class="regexp">/\.string$/</span>,</div><div class="line">          <span class="attr">loader</span>:<span class="string">'string'</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;))</div><div class="line">  <span class="comment">// .pipe(uglify().on('error',function(err)&#123;//压缩js文件</span></div><div class="line">  <span class="comment">//   console.log('\x07',err.lineNumber,err.message);</span></div><div class="line">  <span class="comment">//   return this.end();</span></div><div class="line">  <span class="comment">// &#125;))</span></div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/prd/scripts/'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">//合并成一个js文件</span></div><div class="line">gulp.task(<span class="string">'concat'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(jsFiles)</div><div class="line">  .pipe(concat(<span class="string">'all.js'</span>))<span class="comment">//合并后的文件名</span></div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/prd/scripts/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> cssDistFiles = [</div><div class="line">  <span class="string">'./build/prd/styles/app.css'</span></div><div class="line">];</div><div class="line"><span class="keyword">var</span> jsDistFiles = [</div><div class="line">  <span class="string">'./build/prd/scripts/app.js'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">//css 添加前缀</span></div><div class="line">gulp.task(<span class="string">'autoprefixer'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(cssDistFiles)</div><div class="line">  .pipe(autoprefixer(&#123;</div><div class="line">    <span class="attr">browsers</span>:[<span class="string">'last 2 cersions'</span>,<span class="string">'Android &gt;= 4.0'</span>],</div><div class="line">    <span class="attr">cascade</span>: <span class="literal">true</span>,<span class="comment">//是否美化属性值 默认：true 像这样：</span></div><div class="line">    <span class="comment">//-webkit-transform: rotate(45deg);</span></div><div class="line">    <span class="comment">//        transform: rotate(45deg);</span></div><div class="line">    remove:<span class="literal">true</span><span class="comment">//是否去掉不必要的前缀 默认：true</span></div><div class="line">  &#125;))</div><div class="line">  .pipe(gulp.dest(<span class="string">'.build/ver/styles'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 版本号控制</span></div><div class="line">gulp.task(<span class="string">'ver'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(cssDistFiles)</div><div class="line">  .pipe(rev())<span class="comment">//产生MD5码</span></div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/prd/styles/'</span>))</div><div class="line">  .pipe(rev.manifest())<span class="comment">//产生版本信息的json文件</span></div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/ver/styles/'</span>));</div><div class="line">  gulp.src(jsDistFiles)</div><div class="line">  .pipe(rev())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/prd/scripts/'</span>))</div><div class="line">  .pipe(rev.manifest())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/ver/scripts/'</span>));</div><div class="line">&#125;)</div><div class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src([<span class="string">'./build/ver/**/*'</span>,<span class="string">'./build/*.html'</span>])</div><div class="line">  .pipe(revCollector())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/'</span>));</div><div class="line">&#125;)</div><div class="line">gulp.task(<span class="string">'min'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">  sequence([<span class="string">'copy-index'</span>,<span class="string">'ver'</span>,<span class="string">'html'</span>])(callback);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// rev 版本控制</span></div><div class="line">gulp.task(<span class="string">'rev-append'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./build/*.html'</span>)</div><div class="line">  .pipe(revAppend())</div><div class="line">  .pipe(gulp.dest(<span class="string">'build/html'</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//拷贝 index.html 到 build 文件夹</span></div><div class="line">gulp.task(<span class="string">'copy-index'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./index.html'</span>)</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//拷贝 images 到 build 文件夹</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//注意：</span></div><div class="line"><span class="comment">//*.&#123;jpg,png&#125;    拷贝文件下的指定后缀的文件</span></div><div class="line"><span class="comment">//*.*           拷贝文件下的所有文件</span></div><div class="line"><span class="comment">//**/*          拷贝文件下所有文件（包括文件夹）</span></div><div class="line">gulp.task(<span class="string">'copy-images'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./images/**/*'</span>)</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/images/'</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 配置 default 任务，执行任务队列</div><div class="line"> * arg1[String]</div><div class="line"> *</div><div class="line"> */</div><div class="line"> <span class="comment">//侦测 文件变化，执行相应的任务</span></div><div class="line"> gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   gulp.watch(<span class="string">'./index.html'</span>,[<span class="string">'copy-index'</span>]);</div><div class="line">   gulp.watch(<span class="string">'./images/**/*'</span>,[<span class="string">'copy-images'</span>]);</div><div class="line">   gulp.watch(<span class="string">'./src/styles/**/*'</span>,[<span class="string">'sass'</span>,<span class="string">'min'</span>]);</div><div class="line">   gulp.watch(<span class="string">'./src/scripts/**/*'</span>,[<span class="string">'packjs'</span>,<span class="string">'min'</span>]);</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'watch'</span>,<span class="string">'webserver'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'所有任务队列执行完毕'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><p>gulp-webserver: server服务<br>gulp-sass: sass预编译<br>gulp-less: less预编译<br>gulp-autoprefixer: css厂商前缀<br>gulp-minify-css: css压缩<br>gulp-webpack: webpack插件<br>vingl-named: 文件名索引查找插件<br>gulp-uglify: JS压缩<br>gulp-rev: MD5码<br>gulp-rev-collector: 版本控制<br>gulp-sequence: 序列执行gulptask(v3.9使用，v4.0则不需要了)<br>gulp-connect/gulp-connect-proxy: server代理</p>
<p>这里有一个<a href="http://www.68kejian.com/app/course.html?id=22&amp;&amp;c=29&amp;&amp;name=gulp%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%A4%A7%E6%B1%87%E6%80%BB" target="_blank" rel="external">gulp插件常用大汇总</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>gulp用的不多，持续更新中相关资源和配置信息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的webpack使用]]></title>
      <url>https://chping2125.github.io/2016/11/09/%E6%88%91%E7%9A%84webpack%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>webpack作为模块打包机，在前端模块化开发中频繁的被使用。本篇主要记录一些我自己在学习和使用webpack中遇到问题，保存的一些比较好的博客文章和自己项目的webpack的配置文档，方便以后项目中使用时参考，不用每次都去翻老项目看webpack配置，有些第三方loader和插件的配置或者名称有时就是想不起来（看来老了呀）。</p>
<p>如果想学习webpack的相关内容可以从下面第一小节<strong>关于webpack的一些资源bolg</strong>中查看一些网上的教程，如果你对gulp和webpack有疑问，想了解他们的区别也可以看一下这篇<a href="http://chping.website/2016/10/18/gulp%E5%92%8Cwebpack%E5%AF%B9%E6%AF%94/" target="_blank" rel="external">Gulp和Webpack对比</a><br><a id="more"></a></p>
<h1 id="关于webpack的一些资源bolg"><a href="#关于webpack的一些资源bolg" class="headerlink" title="关于webpack的一些资源bolg"></a>关于webpack的一些资源bolg</h1><ol>
<li><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack，看这篇就够了</a></li>
<li><a href="http://webpackdoc.com/index.html" target="_blank" rel="external">Webpack 中文指南</a></li>
<li><a href="http://www.68kejian.com/app/detail.html?id=76&amp;&amp;c=442" target="_blank" rel="external">Webpack课件</a></li>
<li><a href="https://diamont1001.github.io/webpack-summary/" target="_blank" rel="external">Webpack学习总结</a></li>
<li><a href="http://www.cnblogs.com/xianyulaodi/p/5314769.html#_label0" target="_blank" rel="external">Webpack学习总结     另一份</a></li>
<li><a href="https://github.com/icepy/none-writing/issues/25" target="_blank" rel="external">webpack在PC项目中的应用</a></li>
<li><a href="http://www.cnblogs.com/ghost-xyx/p/5812902.html" target="_blank" rel="external">图片的路径与打包</a></li>
<li><a href="https://segmentfault.com/a/1190000005995267" target="_blank" rel="external">webpack 教程资源收集(包括与Vue，与React，与Angular项目使用)</a></li>
<li><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">阮一峰老师的webpack-demos(英文文档)</a></li>
</ol>
<p>上面这些关于webpack的资源已经可以满足你对webpack的学习了，其中每篇Bolg各有千秋，都有自己侧重点，值得好好学习。</p>
<h1 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h1><h2 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h2><p>所谓的单独使用就是在项目开发过程中，直接通过<code>webpack</code>或者<code>webpack server</code>来使用webpack的相关功能。与之相对的是通过nodeJS来配合使用webpack，下一小节介绍。</p>
<p>当我单独使用webpack时，我的配置文件就一个<code>webpack.config.js</code>，简单配置，可根据不通项目添加loader和plugins。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> Et = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> OpenBrowserPlugin = <span class="built_in">require</span>(<span class="string">'open-browser-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,<span class="comment">//配置生成Source Maps，选择合适的选项</span></div><div class="line">  entry: [ __dirname + <span class="string">"/src/scripts/app.js"</span>],<span class="comment">//唯一入口文件，可以是对象或者数组</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">"/prd/"</span>,<span class="comment">//打包后的文件存放的地方</span></div><div class="line">    <span class="comment">//filename: "[name]-[hash].js"//打包后输出文件的文件名并且版本控制，一般不用与生产环境中</span></div><div class="line">    filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>:&#123;</div><div class="line">    <span class="attr">loaders</span>:[</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">loader</span>:<span class="string">'style!css'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">        <span class="attr">loader</span>: Et.extract(<span class="string">'style'</span>,<span class="string">'css!sass'</span>)<span class="comment">//从js中抽离scss文件</span></div><div class="line">        <span class="comment">// loader:'style!css!sass'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,<span class="comment">//屏蔽不需要处理的文件（文件夹）（可选）</span></div><div class="line">        loader:<span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>:<span class="regexp">/\.string$/</span>,</div><div class="line">        <span class="attr">loader</span>:<span class="string">'string'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// &#123;</span></div><div class="line">      <span class="comment">//   test: /\.html$/,</span></div><div class="line">      <span class="comment">//   loader: 'html-withimg-loader'</span></div><div class="line">      <span class="comment">// &#125;,</span></div><div class="line">      &#123;</div><div class="line">　　　　　<span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</div><div class="line">　　　　　<span class="attr">loader</span>: <span class="string">'url-loader?limit=8192&amp;name=images/[hash:8].[name].[ext]'</span><span class="comment">//图片打包限制，这个限制并不是说超过了就不能打包，而是指当图片大小小于限制时会自动转成 base64 码引用。上例中大于8192字节的图片正常打包，小于8192字节的图片以 base64 的方式引用。</span></div><div class="line">　　　　&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="comment">//复制文件</span></div><div class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</div><div class="line">       &#123;</div><div class="line">         <span class="attr">from</span> : <span class="string">'./src/images'</span>,<span class="comment">//定义要拷贝的源目录   __dirname + ‘/src/public’</span></div><div class="line">         to : <span class="string">'./images'</span>,<span class="comment">//定义要拷贝的目标目录  __dirname + ‘/dist’</span></div><div class="line">        <span class="comment">//  toType : 'dir'//file 或者 dir , 可选，默认是文件</span></div><div class="line">        <span class="comment">//  force : 强制覆盖先前的插件 , 可选 默认false</span></div><div class="line">        <span class="comment">//  context : 不知道作用 , 可选 默认 base context 可用 specific context</span></div><div class="line">        <span class="comment">//  flatten :只拷贝文件不管文件夹 , 默认是false</span></div><div class="line">        <span class="comment">//  ignore : 忽略拷贝指定的文件 ,可以用模糊匹配</span></div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">from</span> : <span class="string">'./index.html'</span>,<span class="comment">//定义要拷贝的源目录   __dirname + ‘/src/public’</span></div><div class="line">      &#125;</div><div class="line">   ]),</div><div class="line">    <span class="comment">//自动打开浏览器</span></div><div class="line">    <span class="keyword">new</span> OpenBrowserPlugin(&#123;<span class="attr">url</span>: <span class="string">'http://localhost:80/'</span> + <span class="string">'index.html'</span>&#125;),</div><div class="line">    <span class="comment">//js文件压缩</span></div><div class="line">    <span class="comment">//new Webpack.optimize.UglifyJsPlugin(),</span></div><div class="line">    <span class="comment">//从js中抽离scss文件并且版本控制</span></div><div class="line">    <span class="comment">//new Et('[name]-[hash].css')</span></div><div class="line">    <span class="keyword">new</span> Et(<span class="string">'bundle.css'</span>),<span class="comment">//从js中抽离scss文件</span></div><div class="line">    <span class="comment">//html文件操作</span></div><div class="line">    <span class="comment">// new HtmlWebpackPlugin(&#123;</span></div><div class="line">    <span class="comment">//       template: './prd/index.html',</span></div><div class="line">    <span class="comment">//   &#125;)</span></div><div class="line">  ]，</div><div class="line">  devServer: &#123;</div><div class="line">    <span class="attr">contentBase</span>:  __dirname + <span class="string">'/prd'</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">    port:<span class="number">8080</span>,</div><div class="line">    <span class="attr">colors</span>: <span class="literal">true</span>,<span class="comment">//终端中输出结果为彩色</span></div><div class="line">    <span class="comment">//historyApiFallback: true,//不跳转</span></div><div class="line">    inline: <span class="literal">true</span>,<span class="comment">//实时刷新</span></div><div class="line">    hot: <span class="literal">true</span><span class="comment">//热启动</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上配置不代表任何含义，只是一个有助于自己以后方便查找的文档而已。</p>
<h2 id="通过NodeJS使用"><a href="#通过NodeJS使用" class="headerlink" title="通过NodeJS使用"></a>通过NodeJS使用</h2><p>此时需要一个另外配置server.js，通过node运行server.js来加载配置文件。</p>
<p><strong>server.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackeDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);<span class="comment">//webpack配置文件路径</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> webpackeDevServer(webpack(config),&#123;</div><div class="line">  <span class="attr">contentBase</span>:  __dirname + <span class="string">'/prd'</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">  port:<span class="number">80</span>,</div><div class="line">  <span class="attr">colors</span>: <span class="literal">true</span>,<span class="comment">//终端中输出结果为彩色</span></div><div class="line">  quiet: <span class="literal">false</span>, <span class="comment">//控制台中不输出打包的信息</span></div><div class="line">  historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></div><div class="line">  inline: <span class="literal">true</span>,<span class="comment">//实时刷新</span></div><div class="line">  hot: <span class="literal">true</span>,<span class="comment">//热启动</span></div><div class="line">  progress: <span class="literal">true</span>, <span class="comment">//显示打包的进度</span></div><div class="line">  lazy: <span class="literal">false</span>,<span class="comment">//懒加载</span></div><div class="line">  <span class="comment">//反向代理</span></div><div class="line">  proxy:&#123;</div><div class="line">    <span class="string">'/http://chping.site/*'</span>:&#123;</div><div class="line">      <span class="attr">target</span>:<span class="string">'http:localhost:3000'</span>,</div><div class="line">      <span class="attr">pathRewrite</span>: &#123;</div><div class="line">        <span class="string">'^/http://chping.site/'</span>:<span class="string">''</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;).listen(<span class="number">80</span>,<span class="string">'localhost'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'listening at localhost:80'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>webpack.config.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> Et = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> OpenBrowserPlugin = <span class="built_in">require</span>(<span class="string">'open-browser-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,<span class="comment">//配置生成Source Maps，选择合适的选项</span></div><div class="line">  entry: [</div><div class="line">    <span class="comment">//react-hot配置</span></div><div class="line">    <span class="string">'webpack-dev-server/client?http://localhost'</span>,</div><div class="line">    <span class="string">'webpack/hot/only-dev-server'</span>,</div><div class="line">		__dirname + <span class="string">"/src/scripts/app.js"</span>,</div><div class="line">	],<span class="comment">//已多次提及的唯一入口文件</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">"/prd/"</span>,<span class="comment">//打包后的文件存放的地方</span></div><div class="line">    <span class="comment">//filename: "[name]-[hash].js"//打包后输出文件的文件名并且版本控制</span></div><div class="line">    filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>:&#123;</div><div class="line">    <span class="attr">loaders</span>:[</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">loader</span>:<span class="string">'style!css'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">        <span class="attr">loader</span>: Et.extract(<span class="string">'style'</span>,<span class="string">'css!sass'</span>)<span class="comment">//从js中抽离scss文件</span></div><div class="line">        <span class="comment">// loader:'style!css!sass'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,<span class="comment">//屏蔽不需要处理的文件（文件夹）（可选）</span></div><div class="line">        loader:<span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>:<span class="regexp">/\.string$/</span>,</div><div class="line">        <span class="attr">loader</span>:<span class="string">'string'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// &#123;</span></div><div class="line">      <span class="comment">//   test: /\.html$/,</span></div><div class="line">      <span class="comment">//   loader: 'html-withimg-loader'</span></div><div class="line">      <span class="comment">// &#125;,</span></div><div class="line">      &#123;</div><div class="line">　　　　　<span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</div><div class="line">　　　　　<span class="attr">loader</span>: <span class="string">'url-loader?limit=8192&amp;name=images/[hash:8].[name].[ext]'</span><span class="comment">//图片打包限制，这个限制并不是说超过了就不能打包，而是指当图片大小小于限制时会自动转成 base64 码引用。上例中大于8192字节的图片正常打包，小于8192字节的图片以 base64 的方式引用。</span></div><div class="line">　　　　&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="comment">//plugin热启动</span></div><div class="line">    <span class="keyword">new</span> Webpack.HotModuleReplacementPlugin(),</div><div class="line">    <span class="comment">//复制文件</span></div><div class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</div><div class="line">       &#123;</div><div class="line">         <span class="attr">from</span> : <span class="string">'./src/images'</span>,<span class="comment">//定义要拷贝的源目录   __dirname + ‘/src/public’</span></div><div class="line">         to : <span class="string">'./images'</span>,<span class="comment">//定义要拷贝的目标目录  __dirname + ‘/dist’</span></div><div class="line">        <span class="comment">//  toType : 'dir'//file 或者 dir , 可选，默认是文件</span></div><div class="line">        <span class="comment">//  force : 强制覆盖先前的插件 , 可选 默认false</span></div><div class="line">        <span class="comment">//  context : 不知道作用 , 可选 默认 base context 可用 specific context</span></div><div class="line">        <span class="comment">//  flatten :只拷贝文件不管文件夹 , 默认是false</span></div><div class="line">        <span class="comment">//  ignore : 忽略拷贝指定的文件 ,可以用模糊匹配</span></div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">from</span> : <span class="string">'./index.html'</span>,<span class="comment">//定义要拷贝的源目录   __dirname + ‘/src/public’</span></div><div class="line">      &#125;</div><div class="line">   ]),</div><div class="line">    <span class="comment">//自动打开浏览器</span></div><div class="line">    <span class="keyword">new</span> OpenBrowserPlugin(&#123;<span class="attr">url</span>: <span class="string">'http://localhost:80/'</span> + <span class="string">'index.html'</span>&#125;),</div><div class="line">    <span class="comment">//js文件压缩</span></div><div class="line">    <span class="comment">//new Webpack.optimize.UglifyJsPlugin(),</span></div><div class="line">    <span class="comment">//从js中抽离scss文件并且版本控制</span></div><div class="line">    <span class="comment">//new Et('[name]-[hash].css')</span></div><div class="line">    <span class="keyword">new</span> Et(<span class="string">'bundle.css'</span>),<span class="comment">//从js中抽离scss文件</span></div><div class="line">    <span class="comment">//html文件操作</span></div><div class="line">    <span class="comment">// new HtmlWebpackPlugin(&#123;</span></div><div class="line">    <span class="comment">//       template: './prd/index.html',</span></div><div class="line">    <span class="comment">//   &#125;)</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相比较单独使用的webpack配置文件，此处的<code>webpack.config.js</code>文件中取消了dev-server的配置，并且在入口<strong>entry</strong>中添加了部分设置和在<strong>plugins</strong>中添加了热启动的相关配置。</p>
<h2 id="React中使用"><a href="#React中使用" class="headerlink" title="React中使用"></a>React中使用</h2><p>React开发中使用webpack是件很美妙的事情，这里有篇文章可以了解一下<a href="http://www.infoq.com/cn/articles/react-and-webpack?utm_source=articles_about_dive-into-react&amp;utm_medium=link&amp;utm_campaign=dive-into-react" target="_blank" rel="external">深入浅出React（二）：React开发神器Webpack</a>，热更新是个很方便使用的技能，用webpack实现其实也不难，只需要安装一个<strong>react-hot-loader</strong>，然后简单配置一下就好了。下面是webpack的相关配置：</p>
<p>server.js文件同上一小节总NodeJS中一致，下面是webpack.config.js的配置，重点注意入口文件配置项和plugins配置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> ET = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 入口</span></div><div class="line">  entry: [</div><div class="line">    <span class="string">'webpack-dev-server/client?http://localhost'</span>,</div><div class="line">    <span class="string">'webpack/hot/only-dev-server'</span>,</div><div class="line">    __dirname + <span class="string">'/src/scripts/app.js'</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  <span class="comment">// 出口</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">'/prd'</span>,</div><div class="line">    <span class="comment">// filename: '[name]-[hash].js'</span></div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// sourcemap</span></div><div class="line">  devtool: <span class="string">'source-map'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// 配置模块</span></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modues/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modues/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'style!css'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">        <span class="attr">loader</span>: ET.extract(<span class="string">'style'</span>, <span class="string">'css!sass'</span>)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">//plugins定义</span></div><div class="line">  plugins: [</div><div class="line">    <span class="comment">// new webpack.optimize.UglifyJsPlugin(),</span></div><div class="line">    <span class="keyword">new</span> ET(<span class="string">'bundle.css'</span>, &#123;</div><div class="line">      <span class="attr">allChunks</span>: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外除了<strong>webpack.config.js</strong>文件的配置外，在react的入口文件（或者说使用react-dom的文件中）添加三行语句：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'../styles/usage/page/app.scss'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> MyButtonController <span class="keyword">from</span> <span class="string">'./flux/components/MyButtonController.jsx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">MyButtonController</span> /&gt;</span></span></div><div class="line">  , app);</div><div class="line"></div><div class="line">//热更新三行语句</div><div class="line">if (module.hot) &#123;</div><div class="line">  module.hot.accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以开发react时使用热更新了。</p>
<h1 id="常用插件和loader"><a href="#常用插件和loader" class="headerlink" title="常用插件和loader"></a>常用插件和loader</h1><p>css-loader: css文件加载<br>sass-loader: scss文件加载<br>less-loader: less文件加载<br>extract-text-webpack-plgin: css文件抽离插件</p>
<p>html-loader: html文件加载<br>html-webpack-plugin: 创建默认html文件插件</p>
<p>js-loader: js文件加载<br>string-loader: string文件加载<br>url-loader: 图片加载打包<br>vue-loader: vue文件加载<br>jsx-loader: jsx文件加载/js文件也可以<br>react-hot-loader: react热更新</p>
<p>open-browser-webpack-plgin: 自动打开浏览器插件<br>copy-webpack-plgin: 文件复制插件<br>webpack-dev-server: 本地server服务</p>
<p>更多loader请参照<a href="http://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">官方文档</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以后就可以不用翻老项目找配置文件了。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS居中实例--大小不固定的图片居中]]></title>
      <url>https://chping2125.github.io/2016/11/09/CSS%E5%B1%85%E4%B8%AD%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>上一篇<a href="/2016/11/08/%E5%B1%85%E4%B8%AD%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2/">CSS居中问题探索</a>中，通过实例的方式展示了一下<code>text-align:center</code>、<code>margin:0 auto;</code>、<code>line-height: boxHeight</code>、<code>position和margin或者transform配合使用</code>还有<code>display:table-cell</code>来实现水平居中或者垂直居中的方式方法，本篇主要补充三个垂直水平居中的实例，或者更直接的说是<strong>大小不固定的图片垂直水平居中实现</strong>的两种方式和<strong>多行文本的垂直居中的方法</strong>。</p>
<p>相对于实现水平居中，垂直居中比较麻烦，所以接下来的以垂直居中为重点，水平居中，可以在代码中自己看看实现。<br><a id="more"></a></p>
<h1 id="大小不固定的图片垂直水平居中"><a href="#大小不固定的图片垂直水平居中" class="headerlink" title="大小不固定的图片垂直水平居中"></a>大小不固定的图片垂直水平居中</h1><p>在商品展示性的网站，特别是电商网站，这种需求特别多，比如：<br><img src="/images/cssCenter/26.png" alt="京东商品展示图片"><br>从上图可以看出，这些商品的大小是不固定的，所以要求所有图片都要垂直水平居中，这时候我们的需求就来了（PS:其实京东这些图片都是固定大小的，嘿嘿）。</p>
<h2 id="利用table-cell实现垂直居中"><a href="#利用table-cell实现垂直居中" class="headerlink" title="利用table-cell实现垂直居中"></a>利用table-cell实现垂直居中</h2><p><img src="/images/cssCenter/27.png" alt="利用table-cell实现垂直居中"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">    [站外图片上传中……(5)]</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box1</span>&#123;</div><div class="line">  <span class="attribute">text-align</span>:center;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="comment">/* font-size: 118px; */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>利用父元素为<code>display:table-cell</code>类型实现垂直居中，table在ie8+的浏览器中自带的垂直居中的属性。</strong></p>
<p>注意：<code>img{vertical-align: middle;}</code>只是为了消除<code>display:inline-block</code>类型的基线对齐问题。</p>
<h2 id="利用添加兄弟元素实现垂直居中"><a href="#利用添加兄弟元素实现垂直居中" class="headerlink" title="利用添加兄弟元素实现垂直居中"></a>利用添加兄弟元素实现垂直居中</h2><p><img src="/images/cssCenter/28.png" alt="利用添加兄弟元素实现垂直居中"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    [站外图片上传中……(6)]</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box2</span>&#123;</div><div class="line">  <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">i</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>利用给img添加兄弟元素，重新设置基线的位置。</strong></p>
<h1 id="多行文本的垂直居中方法"><a href="#多行文本的垂直居中方法" class="headerlink" title="多行文本的垂直居中方法"></a>多行文本的垂直居中方法</h1><p>有时可能我们会遇到需要多行文本垂直居中的一些情况，但是做起来有时有些麻烦，需要我们换个思路去实现。</p>
<p><img src="/images/cssCenter/29.png" alt="多行文本的垂直居中"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据你好，我是测试数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box3</span>&#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>将内部的文本用span标签（其他标签也可以）包裹起来，把span标签设为inline-block,然后当图片的垂直居中处理(ie8+)。</strong></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文也是从以前的学习笔记中翻出来整理的一个css基础小点， 在这里记录一下，免得每次遇到问题总是翻笔记。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS居中问题探索]]></title>
      <url>https://chping2125.github.io/2016/11/08/%E5%B1%85%E4%B8%AD%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p>在页面布局中，居中在各种各样的场景中广泛被用到，也经常被新人提及。以前做过一些自己探索居中问题的demo，今天翻出来了，正好做一下笔记，记录一下。以后遇到问题也能快速方便快速找到。</p>
<p>居中包括<strong>水平居中</strong>和<strong>垂直居中</strong>两种，其中水平居中相对来说容易解决，但是垂直居中有时就令人头疼了，其实也不是很难。各自都有很多方式来实现，本文主要是总结一下自己以前的demo，并不代表主流方式。另外先打个预防针，下面的例子很丑，以前做的，勿喷。<br><a id="more"></a></p>
<h1 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h1><p>说到水平居中，你可能立马想到的是<code>text-align:center;</code>或者<code>margin:0 auto;</code>这是最简单的水平居中方式，也是使用很广泛的水平居中方法。我们来探索一下，他俩居中能力到底有多强？</p>
<h2 id="text-align-center水平居中"><a href="#text-align-center水平居中" class="headerlink" title="text-align:center水平居中"></a>text-align:center水平居中</h2><ol>
<li>对直接文本子元素进行居中<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"width:200px;height:100px;background:#555;text-align:center"</span>&gt;</div><div class="line">      利用text-align对本元素文字水平对齐</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/1.png" alt="利用text-align对本元素文字水平对齐"></p>
<ol>
<li>对子div元素水平对齐<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"width:300px;height:300px;background:#555;text-align:center"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:200px;height:100px;border:1px dotted blue;background:#f00;"</span>&gt;</span></span></div><div class="line">        利用text-align对子div元素水平对齐</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/2.png" alt="利用text-align对子div元素水平对齐"></p>
<ol>
<li>对子span元素水平对齐<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"width:300px;height:300px;background:#555;text-align:center"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"background:#f00;"</span>&gt;</span></span></div><div class="line">	  利用text-align对子span元素水平对齐</div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/3.png" alt="利用text-align对子span元素水平对齐"></p>
<ol>
<li>对设置了inline的div元素水平对齐<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"width:300px;height:300px;background:#555;text-align:center"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline;width:200px;height:100px;border:1px dotted blue;background:#f00;"</span>&gt;</span></span></div><div class="line">	  设置了inline的div元素水平对齐</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/4.png" alt="设置了inline的div元素水平对齐"></p>
<ol>
<li>对设置了inline-block的div元素水平对齐<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"width:300px;height:300px;background:#555;text-align:center"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline;width:200px;height:100px;border:1px dotted blue;background:#f00;"</span>&gt;</span></span></div><div class="line">	  设置了inline-block的div元素水平对齐</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/5.png" alt="设置了inline-block的div元素水平对齐"></p>
<p><strong>小结</strong><br><strong>text-align:center</strong>具有继承性，可以使文本元素以及子元素的文本水平居中，也可以使行内元素（或者设置了display:inline/inline-block属性的块状元素）水平居中，但不能使块状元素居中。</p>
<h2 id="margin-0-auto水平居中"><a href="#margin-0-auto水平居中" class="headerlink" title="margin:0 auto水平居中"></a>margin:0 auto水平居中</h2><ol>
<li>对直接子元素进行水平居中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:200px;height:100px;background:#555;margin: 0 auto;&quot;&gt;</div><div class="line">	  利用margin:0 auto对文字水平对齐</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/6.png" alt="利用margin:0 auto对文字水平对齐"></p>
<ol>
<li>对自身div元素水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:300px;height:300px;background:#555;&quot;&gt;</div><div class="line">      &lt;div style=&quot;width:200px;height:100px;border:1px dotted blue;background:#f00;margin: 0 auto;&quot;&gt;</div><div class="line">		利用margin:0 auto对自身div元素水平对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/7.png" alt="利用margin:0 auto对自身div元素水平对齐"></p>
<ol>
<li>对自身div元素水平对齐,自身元素文本宽度未知<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:300px;height:300px;background:#555;&quot;&gt;</div><div class="line">      &lt;div style=&quot;height:100px;border:1px dotted blue;background:#f00;margin: 0 auto;&quot;&gt;</div><div class="line">	    利用margin:0 auto对自身div元素水平对齐,自身元素文本宽度未知</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/8.png" alt="对自身div元素水平对齐,自身元素文本宽度未知"></p>
<ol>
<li>对自身span元素水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:300px;height:300px;background:#555;&quot;&gt;</div><div class="line">    &lt;span style=&quot;background:#f00;margin: 0 auto;&quot;&gt;</div><div class="line">	  对自身span元素水平对齐</div><div class="line">    &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/9.png" alt="利用margin:0 auto对自身span元素水平对齐"></p>
<ol>
<li>对设置了block的span元素水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:300px;height:300px;background:#555;&quot;&gt;</div><div class="line">    &lt;span style=&quot;width:200px;height:100px;display:block;background:#f00;margin: 0 auto;&quot;&gt;</div><div class="line">	  设置了block的span元素水平对齐</div><div class="line">    &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/10.png" alt="利用margin:0 auto对设置了block的span元素水平对齐"></p>
<ol>
<li>对设置inline的div元素水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:300px;height:300px;background:#555;&quot;&gt;</div><div class="line">    &lt;div style=&quot;display:inline;height:100px;border:1px dotted blue;background:#f00;margin: 0 auto;&quot;&gt;</div><div class="line">	  设置inline的div元素水平对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/11.png" alt="利用margin:0 auto对设置inline的div元素水平对齐"></p>
<ol>
<li>对设置inline-block的div元素水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:500px;height:300px;background:#555;&quot;&gt;</div><div class="line">    &lt;div style=&quot;display:inline;height:100px;border:1px dotted blue;background:#f00;margin: 0 auto;&quot;&gt;</div><div class="line">		设置inline-block的div元素水平对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/12.png" alt="利用margin:0 auto对设置inline-block的div元素水平对齐"></p>
<p><strong>小结</strong></p>
<p><strong>margin:0 auto;</strong>没有继承性，只能使已知宽度的块状元素水平居中，且该块状元素为其本身。</p>
<p>除了以上<code>margin:0 auto;</code>水平居中方式之外还有可以使用postion配合margin或者transform来实现块状盒子水平居中的目的。</p>
<h2 id="position配合margin或者transform水平居中"><a href="#position配合margin或者transform水平居中" class="headerlink" title="position配合margin或者transform水平居中"></a>position配合margin或者transform水平居中</h2><ol>
<li>对已知宽度的div元素盒子水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;position:relative&quot;&gt;</div><div class="line">      &lt;div style=&quot;width:100px;height:100px;background:#f00;position:absolute;left:300px;margin-left:-50px&quot;&gt;</div><div class="line">		对已知宽度的div元素盒子水平对齐</div><div class="line">      &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/13.png" alt="对已知宽度的div元素盒子水平对齐"></p>
<ol>
<li>对未知宽度的div元素盒子水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;position:relative&quot;&gt;</div><div class="line">    &lt;div style=&quot;background:#f00;position:absolute;left:300px;transform: translate(-50%,0);&quot;&gt;</div><div class="line">	  对未知宽度的div元素盒子水平对齐</div><div class="line">     &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/14.png" alt="对未知宽度的div元素盒子水平对齐"></p>
<p><strong>小节</strong><br>这种方式的水平居中，既可以是父元素<strong>已知宽度</strong>，也可以是父元素<strong>未知宽度</strong>，分别对应margin和transform。</p>
<h1 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h1><h2 id="line-height-垂直居中"><a href="#line-height-垂直居中" class="headerlink" title="line-height 垂直居中"></a>line-height 垂直居中</h2><p>垂直居中时间很麻烦的事情，我们知道可以使用<code>line-height=height</code>可以使单行文本在父元素内垂直居中，这个很容易实现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"width:500px;height:100px;background:#555;line-height:100px"</span>&gt;</div><div class="line">    利用line-height=height对单行文本在父元素内垂直居中</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/cssCenter/15.png" alt="利用line-height=height对单行文本在父元素内垂直居中"></p>
<p>那么<code>line-height=height;</code>能不能使其他元素水平居中呢？我们来试一试：</p>
<ol>
<li>对子div元素盒子垂直对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;line-height:300px&quot;&gt;</div><div class="line">    &lt;div style=&quot;width:500px;height:100px;background:#f00;&quot;&gt;</div><div class="line">	  利用line-height=height对div元素盒子垂直对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/16.png" alt=" 利用line-height=height对div元素盒子垂直对齐"></p>
<ol>
<li>对子span元素盒子垂直对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;line-height:300px&quot;&gt;</div><div class="line">    &lt;span style=&quot;background:#f00;&quot;&gt;</div><div class="line">	  利用line-height=height对子span元素盒子垂直对齐</div><div class="line">    &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/17.png" alt=" 利用line-height=height对子span元素盒子垂直对齐"></p>
<ol>
<li>设置了inline的div元素盒子垂直对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;line-height:300px&quot;&gt;</div><div class="line">    &lt;div style=&quot;background:#f00;display:inline&quot;&gt;</div><div class="line">        设置了inline的div元素盒子垂直对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/18.png" alt=" 利用line-height=height对设置了inline的div元素盒子垂直对齐"></p>
<ol>
<li>设置了inline-block的div元素盒子垂直对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;line-height:300px&quot;&gt;</div><div class="line">    &lt;div style=&quot;background:#f00;display:inline-block&quot;&gt;</div><div class="line">	  设置了inline-block的div元素盒子垂直对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/19.png" alt=" 利用line-height=height对设置了inline-block的div元素盒子垂直对齐"></p>
<p><strong>小结</strong><br><strong>line-weight:height</strong>具有继承性，可以使文本元素以及子元素的文本垂直居中，也可以使行内元素（或者设置了display:inline属性的块状元素）垂直居中，但不能使块状元素（或设置了display：inline-block属性的块状元素）居中。</p>
<h2 id="position配合margin或者transform"><a href="#position配合margin或者transform" class="headerlink" title="position配合margin或者transform"></a>position配合margin或者transform</h2><ol>
<li>对已知高度div元素盒子垂直对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;position:relative&quot;&gt;</div><div class="line">    &lt;div style=&quot;width:100px;height:100px;background:#f00;position:absolute;top:50%;margin-top:-50px&quot;&gt;</div><div class="line">		利用position对已知高度div元素盒子垂直对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/20.png" alt=" 利用position对已知高度div元素盒子垂直对齐"></p>
<ol>
<li>对未知高度span元素盒子垂直对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;position:relative&quot;&gt;</div><div class="line">    &lt;span style=&quot;background:#f00;position:absolute;top:50%;transform: translate(0,-50%);&quot;&gt;</div><div class="line">		利用position对未知高度span元素盒子垂直对齐</div><div class="line">    &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/21.png" alt=" 利用position对未知高度span元素盒子垂直对齐"></p>
<p><strong>小结</strong><br>同样，利用很牛X的position配合margin或者transform来使已知高度或者未知高度的元素进行垂直居中。</p>
<h1 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h1><p>垂直水平居中就是对上面两种居中方式的综合利用，不在解释，直接上例子：</p>
<ol>
<li>对已知宽高的div元素盒子垂直水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;position:relative&quot;&gt;</div><div class="line">	&lt;div style=&quot;width:100px;height:100px;background:#f00;position:absolute;left:50%;top:50%;margin-left:-50px;margin-top:-50px&quot;&gt;</div><div class="line">		利用position和margin对已知宽高的div元素盒子垂直水平对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/22.png" alt=" 对已知宽高的div元素盒子垂直水平对齐"></p>
<ol>
<li>对未知宽高div元素盒子垂直水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;position:relative&quot;&gt;</div><div class="line">    &lt;div style=&quot;background:#f00;position:absolute;left:50%;top:50%;transform: translate(-50%,-50%);&quot;&gt;</div><div class="line">		利用position和margin对未知宽高div元素盒子垂直水平对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/23.png" alt=" 对未知宽高div元素盒子垂直水平对齐"></p>
<ol>
<li>利用left:0;top:0;bottom:0;right:0;margin:auto对盒子垂直水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;position:relative&quot;&gt;</div><div class="line">    &lt;div style=&quot;width: 200px;height:100px;background:#f00;position:absolute;left:0;top:0;bottom:0;right:0;margin:auto&quot;&gt;</div><div class="line">        利用left:0;top:0;bottom:0;right:0;margin:auto对盒子垂直水平对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/24.png" alt=" 利用left:0;top:0;bottom:0;right:0;margin:auto对盒子垂直水平对齐"></p>
<ol>
<li>利用display:table-cell;vertical-align:middle;text-align:center;对inline-block盒子垂直水平对齐<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:600px;height:300px;background:#555;display:table-cell;vertical-align:middle;text-align:center&quot;&gt;</div><div class="line">    &lt;div style=&quot;width: 200px;height:100px;background:#f00;vertical-align:middle;display:inline-block&quot;&gt;</div><div class="line">		利用display:table-cell;vertical-align:middle;text-align:center;对inline-block盒子垂直水平对齐</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/cssCenter/25.png" alt=" 利用display:table-cell;vertical-align:middle;text-align:center;对inline-block盒子垂直水平对齐"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[变量声明提升]]></title>
      <url>https://chping2125.github.io/2016/11/08/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87/</url>
      <content type="html"><![CDATA[<p><strong>变量声明提升</strong>是JS中一个基础的问题，同时也是对JS词法作用域认识的一个提升。在JS面试题中，关于<strong>变量声明提升</strong>的问题还是占了不少比例的，另外，在码代码的时候可能也无意间因为这个原因产生错误而头疼好久。还有一个需要注意的是ES2015中let、const声明的变量<strong>不具备</strong>变量声明提升。</p>
<p>在《你不知道的JavaSript》上卷中，作者把<strong>变量声明提升</strong>这个问题比作“先有鸡还是先有蛋?”，我认为很形象。代码在执行的时候给人的感觉是一行一行的执行，这样可能比较符合我们的正常思维习惯，但是这实际上并不完全正确。为什么这样说呢？这就要引出JS在运行前其实有一个编译过程的这个问题，在编译阶段，JS引擎做了一些事使得代码并不是完全一行一行的执行了，而是将一些声明的代码顺序提前了，所以就产生了变量声明提升这个问题。<br><a id="more"></a></p>
<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><p>想明白变量声明提升这个概念，JS编译原理必须清楚。<br>有些小伙伴认为JS不是一门编译动态脚本语言吗？怎么会有编译过程，其实在没有接触《你不知道的JavaSript》上卷这本书之前我也这么认为，直到读了这本书我才对JS的作用域和变量声明提升以及闭包等问题有了更清楚的认识，所以这里先向小伙伴们推荐一下这本书。</p>
<p>言归正传，接着说JS编译，JS的编译过程不是像其他语言的编译过程一样发生在构建之前的，大部分是在代码执行之前的几微米（甚至更短！）的时间内，那么这段时间内，编译器对我们的代码做了什么呢？我们通过一个例子来说明一下，比如<code>var a =2;</code>这条语句在会被JS引擎看成是两部分，分别为<code>var a;</code>和<code>a = 2</code>。其中前一部分是发生在编译过程中，而第二部分发生在执行过程中。也就是说，编译的时候，JS引擎把我们对a的声明已经提前了。</p>
<p>为了更好地说明编译器的编译过程，我在举一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">foo(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这段代码在执行的时候，JS引擎的工作过程是：</p>
<ol>
<li>在编译阶段，首先遇到<code>foo(2);</code>一看这是个函数执行呀，这并不是我编译器的活呀，于是直接无视略过。</li>
<li>然后继续向下走，发现<code>function</code>，很明显是要声明一个函数（ES2015之前，声明变量只有var 和 function 这两个关键字，前者用于声明普通变量，后者用于声明函数或者方法），所以，JS引擎就会在当前作用域内的内存中开辟一块空间给<code>foo</code>；然后编译继续进行，这时候该对foo函数内部进行编译（从上到下一行一行编译），所以遇到形参a后，就在foo作用域的内存中为a开辟了一块空间，只不过此时a没有值，所以存的是undefined，继续向下走，没了—–结束。</li>
<li>现在开始执行阶段，首先遇到了<code>foo(2)；</code>，开始干活:<br><strong>引擎：作用域，你见过<code>foo</code>没？<br>作用域：见过，刚才编译器那小子刚声明了他，我给你。<br>引擎：好的。那我来执行以下foo这个函数。<br>引擎：作用域兄弟，你在foo中见过a吗？<br>作用域：有，编译器也声明他了，给你。<br>引擎：谢了哥们，我把2复制给他。</strong><br>…..</li>
</ol>
<p>我发现虽然是简单描述了一下JS引擎的编译过程，好像已经莫名其妙的把变量声明提升给讲完了（尴尬。。。）。</p>
<h1 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h1><p>本文是用来记录变量声明提升的，结果在第一小节就通过JS引擎的编译过程就给讲完了。。。。。。</p>
<p>那这一小节就在再总结一下，顺便说一下<strong>函数优先</strong>吧！</p>
<h2 id="变量声明提升的原因"><a href="#变量声明提升的原因" class="headerlink" title="变量声明提升的原因"></a>变量声明提升的原因</h2><ol>
<li>JS代码在执行之前有一个极其短的编译过程。</li>
<li>在这个过程中，JS引擎为var、function声明的变量和函数在当前作用域中分配内存空间。函数内的变量和嵌套函数也是一样，只不过分配的内存是其父函数作用域内的。</li>
<li>JS引擎在执行的时候，通过询问作用域来查找有无该变量或者函数，然后执行相关赋值或者函数执行等操作。</li>
</ol>
<h2 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h2><p>相信已经说清楚变量声明提升的原因了，但是还要注意一点就是，在编译过程中，如果var和function声明的变量为同一个，则function声明的优先级高于var声明的。来看一个例子吧！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">foo();</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码最终输出结果是1，你猜对了吗？上面的编译执行过程为：</p>
<ol>
<li>编译阶段，从上往下编译，首先遇到<code>foo();</code>，直接无视略过。</li>
<li>遇到<code>var foo;</code>，在当前作用域内为foo分配内存空间，继续向下编译。</li>
<li>遇到<code>function foo(){....}</code>，发现已经在当前作用域中声明了该变量，但是此时是<code>function</code>，优先级明显高于<code>var</code>,所以当前作用域中的<code>foo</code>变为function。</li>
<li>继续向下编译，发现<code>foo=....</code>很明显是个赋值操作吗，这是引擎的事，无视。</li>
<li>执行阶段，首先就遇到了<code>foo();</code>，于是询问当前作用域内有无foo的声明，发现有，还正好是个函数，那就别废话了，直接执行吧！于是控制台打印了1。</li>
<li>继续向下执行，略过<code>var foo;</code>和<code>function foo(){....}</code>，遇到一个复制操作，那就先在问问当前作用域有没有foo变量，有就赋值，没有就在全局中声明一个foo变量（非严格模式下）；</li>
<li>好了，到此结束。</li>
</ol>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>变量声明是一个很基础的JS知识点，但如果没有编译这一步，可能理解上不好理解，但是有了编译这个过程后，相信就很容易了。最后留下一道题，检验一下自己：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">a.param = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">foo.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo.get();</div><div class="line">get();</div><div class="line">foo().get();</div><div class="line">get();</div><div class="line"><span class="keyword">new</span> foo.get();</div><div class="line"><span class="keyword">new</span> foo().get();</div><div class="line"><span class="keyword">new</span> <span class="keyword">new</span> foo().get();</div></pre></td></tr></table></figure></p>
<p>很经典的一道考察变量声明提升和原型链，还有操作符优先级的题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[认识一下Fetch]]></title>
      <url>https://chping2125.github.io/2016/11/07/%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8BFetch/</url>
      <content type="html"><![CDATA[<p>以前听说过<a href="https://github.com/github/fetch" target="_blank" rel="external">fetch</a>，一只以为他是对XHR的一种升级的API，今天去充了充电，看了几篇bolg后，才发现以前的理解是打错特错。所以转载一篇csdn上看到关于<a href="https://github.com/github/fetch" target="_blank" rel="external">fetch</a>的简介，做点自己的补充，记录下来。</p>
<p>AJAX半遮半掩的底层API是饱受诟病的一件事情. XMLHttpRequest 并不是专为Ajax而设计的. 虽然各种框架对 XHR 的封装已经足够好用, 但我们可以做得更好。更好用的API是 <a href="https://github.com/github/fetch" target="_blank" rel="external">fetch</a> 。下面简单介绍 window.fetch 方法, 在最新版的 Firefox 和 Chrome 中已经提供支持。</p>
<a id="more"></a>
<blockquote>
<p>原文翻译链接：<a href="http://blog.csdn.net/renfufei/article/details/51494396" target="_blank" rel="external">http://blog.csdn.net/renfufei/article/details/51494396</a><br>原文英文链接：<a href="blog.csdn.net/renfufei/article/details/51494396">blog.csdn.net/renfufei/article/details/51494396</a></p>
</blockquote>
<h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><p>在我看来 XHR 有点复杂, 我不想解释为什么“XML”是大写,而“Http”是“骆峰式”写法。使用XHR的方式大致如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 XHR 非常混乱!</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123; <span class="comment">// Mozilla, Safari, ...</span></div><div class="line">  request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">// IE</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    request = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>);</div><div class="line">  &#125; </div><div class="line">  <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      request = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 打开连接, 发送数据.</span></div><div class="line">request.open(<span class="string">'GET'</span>, <span class="string">'https://davidwalsh.name/ajax-endpoint'</span>, <span class="literal">true</span>);</div><div class="line">request.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>我们可以看出, XHR 其实是很杂乱的; 当然, 通过 JavaScript 框架可以很方便地使用XHR。</p>
<h1 id="fetch-的基本使用"><a href="#fetch-的基本使用" class="headerlink" title="fetch 的基本使用"></a>fetch 的基本使用</h1><p><a href="https://github.com/github/fetch" target="_blank" rel="external">fetch</a> 是全局量 window 的一个方法, 第一个参数是URL:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// url (必须), options (可选)</span></div><div class="line">fetch(<span class="string">'/some/url'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'get'</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// 出错了;等价于 then 的第二个参数,但这样更好用更直观</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>和 Battery API 类似, fetch API 也使用了 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">JavaScript Promises</a> 来处理结果/回调:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对响应的简单处理</span></div><div class="line">fetch(<span class="string">'/some/url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// 出错了;等价于 then 的第二个参数,但这样更直观 :(</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 链式处理,将异步变为类似单线程的写法: 高级用法.</span></div><div class="line">fetch(<span class="string">'/some/url'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="comment">//... 执行成功, 第1步...</span></div><div class="line">&#125;).then(<span class="function"><span class="params">returnedValue</span>=&gt;</span> &#123;</div><div class="line">    <span class="comment">// ... 执行成功, 第2步...</span></div><div class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</div><div class="line">    <span class="comment">// 中途任何地方出错...在此处理 </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果你还不习惯 then 方式的写法,那最好学习一下,因为很快就会全面流行。</p>
<h1 id="请求头-Headers-对象"><a href="#请求头-Headers-对象" class="headerlink" title="请求头(Headers 对象)"></a>请求头(Headers 对象)</h1><p>自定义请求头信息极大地增强了请求的灵活性。我们可以通过fetch为我们提供的 new Headers() 来创建请求头:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个空的 Headers 对象,**注意是Headers**，不是Header</span></div><div class="line"><span class="keyword">var</span> headers = <span class="keyword">new</span> Headers();</div><div class="line"></div><div class="line"><span class="comment">// 添加(append)请求头信息</span></div><div class="line">headers.append(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">headers.append(<span class="string">'X-My-Custom-Header'</span>, <span class="string">'CustomValue'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 判断(has), 获取(get), 以及修改(set)请求头的值</span></div><div class="line">headers.has(<span class="string">'Content-Type'</span>); <span class="comment">// true</span></div><div class="line">headers.get(<span class="string">'Content-Type'</span>); <span class="comment">// "text/plain"</span></div><div class="line">headers.set(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 删除某条请求头信息(a header)</span></div><div class="line">headers.delete(<span class="string">'X-My-Custom-Header'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建对象时设置初始化信息</span></div><div class="line"><span class="keyword">var</span> headers = <span class="keyword">new</span> Headers(&#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>,</div><div class="line">    <span class="string">'X-My-Custom-Header'</span>: <span class="string">'CustomValue'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>可以使用Headers对象为我们提供的方法包括: <strong><code>append</code>, <code>get</code>,<code>getAll</code>, <code>set</code>, <code>has</code>,<code>forEach</code>,<code>keys</code>,<code>values</code>,  以及 <code>delete</code> </strong>来操作Headers对象。</p>
<p>接下来需要创建一个 Request 对象来包装请求头:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> Request(<span class="string">'/some-url'</span>, &#123;</div><div class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">fetch(request).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* handle response */</span> &#125;);</div></pre></td></tr></table></figure></p>
<p>下面介绍 Response 和Request 的使用方法!</p>
<h1 id="Request-对象简介"><a href="#Request-对象简介" class="headerlink" title="Request 对象简介"></a>Request 对象简介</h1><p>Request 对象表示一次 fetch 调用的请求信息。传入 Request 参数来调用 fetch, 可以执行很多自定义请求的高级用法:</p>
<blockquote>
<p>method - 支持 GET, POST, PUT, DELETE, HEAD<br>url - 请求的 URL<br>headers - 对应的 Headers 对象<br>referrer - 请求的 referrer 信息<br>mode - 可以设置 cors, no-cors, same-origin<br>credentials - 设置 cookies 是否随请求一起发送。可以设置: omit, same-origin<br>redirect - follow, error, manual<br>integrity - subresource 完整性值(integrity value)<br>cache - 设置 cache 模式 (default, reload, no-cache)</p>
</blockquote>
<p>Request 的示例如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> Request(<span class="string">'/users.json'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>, </div><div class="line">    <span class="attr">mode</span>: <span class="string">'cors'</span>, </div><div class="line">    <span class="attr">redirect</span>: <span class="string">'follow'</span>,</div><div class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用!</span></div><div class="line">fetch(request).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* handle response */</span> &#125;);</div></pre></td></tr></table></figure>
<p>只有第一个参数 <strong>URL 是必需的</strong>。在 Request 对象创建完成之后, 所有的属性都变为<strong>只读属性</strong>。请注意, Request 有一个很重要的 <code>clone 方法</code>, 特别是在 Service Worker API 中使用时 —— 一个 Request 就代表一串流(stream), 如果想要传递给另一个 fetch 方法,则需要进行克隆。</p>
<p>fetch 的方法签名(signature,可理解为配置参数), 和 Request 很像, 示例如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/users.json'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>, </div><div class="line">    <span class="attr">mode</span>: <span class="string">'cors'</span>, </div><div class="line">    <span class="attr">redirect</span>: <span class="string">'follow'</span>,</div><div class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">    &#125;)</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* handle response */</span> &#125;);</div></pre></td></tr></table></figure></p>
<p>因为 Request 和 fetch 的签名一致, 所以在 Service Workers 中, 你可能会更喜欢使用 Request 对象。</p>
<h1 id="Response-简介"><a href="#Response-简介" class="headerlink" title="Response 简介"></a>Response 简介</h1><p>Response 代表响应, fetch 的 then 方法接收一个 Response 实例, 当然你也可以手动创建 Response 对象 —— 比如在 service workers 中可能会用到. Response 可以配置的参数包括:</p>
<blockquote>
<p>type - 类型,支持: basic, cors<br>url<br>useFinalURL - Boolean 值, 代表 url 是否是最终 URL<br>status - 状态码 (例如: 200, 404, 等等)<br>ok - Boolean值,代表成功响应(status 值在 200-299 之间)<br>statusText - 状态值(例如: OK)<br>headers - 与响应相关联的 Headers 对象.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 service worker 测试中手动创建 response</span></div><div class="line"><span class="comment">// new Response(BODY, OPTIONS)</span></div><div class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> Response(<span class="string">'.....'</span>, &#123;</div><div class="line">    <span class="attr">ok</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">status</span>: <span class="number">404</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">'/'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// fetch 的 `then` 会传入一个 Response 对象</span></div><div class="line">fetch(<span class="string">'/'</span>)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">responseObj</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'status: '</span>, responseObj.status);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>Response 提供的方法如下:</p>
<blockquote>
<p>clone() - 创建一个新的 Response 克隆对象.<br>error() - 返回一个新的,与网络错误相关的 Response 对象.<br>redirect() - 重定向,使用新的 URL 创建新的 response 对象..<br>arrayBuffer() - Returns a promise that resolves with an ArrayBuffer.<br>blob() - 返回一个 promise, resolves 是一个 Blob.<br>formData() - 返回一个 promise, resolves 是一个 FormData 对象.<br>json() - 返回一个 promise, resolves 是一个 JSON 对象.<br>text() - 返回一个 promise, resolves 是一个 USVString (text).</p>
</blockquote>
<h2 id="处理-JSON响应"><a href="#处理-JSON响应" class="headerlink" title="处理 JSON响应"></a>处理 JSON响应</h2><p>假设需要请求 JSON —— 回调结果对象 response 中有一个json()方法,用来将原始数据转换成 JavaScript 对象:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'https://davidwalsh.name/demo/arsenal.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123; </div><div class="line">    <span class="comment">// 转换为 JSON</span></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">    <span class="comment">// 现在, `j` 是一个 JavaScript object</span></div><div class="line">    <span class="built_in">console</span>.log(j); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当然这很简单 , 只是封装了 JSON.parse(jsonString) 而已, 但 json 方法还是很方便的。</p>
<h2 id="处理基本的Text-HTML响应"><a href="#处理基本的Text-HTML响应" class="headerlink" title="处理基本的Text / HTML响应"></a>处理基本的Text / HTML响应</h2><p>JSON 并不总是理想的请求/响应数据格式, 那么我们看看如何处理 HTML或文本结果:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/next/page'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> response.text();</div><div class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123; </div><div class="line">    <span class="comment">// &lt;!DOCTYPE ....</span></div><div class="line">    <span class="built_in">console</span>.log(text); </div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>如上面的代码所示, 可以在 Promise 链式的 then 方法中, 先返回 text() 结果 ,再获取 text 。</p>
<h2 id="处理Blob结果"><a href="#处理Blob结果" class="headerlink" title="处理Blob结果"></a>处理Blob结果</h2><p>如果你想通过 fetch 加载图像或者其他二进制数据, 则会略有不同:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'flowers.jpg'</span>)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> response.blob();</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">imageBlob</span>) </span>&#123;</div><div class="line">      <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>).src = URL.createObjectURL(imageBlob);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>响应 Body mixin 的 blob() 方法处理响应流(Response stream), 并且将其读完。</p>
<h2 id="提交表单数据-Posting-Form-Data"><a href="#提交表单数据-Posting-Form-Data" class="headerlink" title="提交表单数据(Posting Form Data)"></a>提交表单数据(Posting Form Data)</h2><p>另一种常用的 AJAX 调用是提交表单数据 —— 示例代码如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/submit'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">body</span>: <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">'comment-form'</span>))<span class="comment">//FormData对象是XHR level2引入的用于处理表单数据的对象</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//提交 JSON 的示例如下:</span></div><div class="line">fetch(<span class="string">'/submit-json'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">        <span class="attr">email</span>: <span class="built_in">document</span>.getElementById(<span class="string">'email'</span>).value</div><div class="line">        answer: <span class="built_in">document</span>.getElementById(<span class="string">'answer'</span>).value</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>非常非常简单, 妈妈再也不用担心我的Ajax!</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>fetch 是个很实用的API , 当前还不允许取消请求, 这使得很多程序员暂时不会考虑它。</p>
<p>新的 fetch API 比起 XHR 更简单也更智能。毕竟,它就是专为AJAX而设计的, 具有后发优势。而我已经迫不及待地使用了, 即使现在兼容性还不是那么好!</p>
<blockquote>
<p>fetch官方标准规范：<a href="https://fetch.spec.whatwg.org/" target="_blank" rel="external">https://fetch.spec.whatwg.org/</a><br>fecth Github地址：<a href="https://github.com/github/fetch" target="_blank" rel="external">https://github.com/github/fetch</a><br>isomorphic-fetch Github地址：<a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="external">https://github.com/matthew-andrews/isomorphic-fetch</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[认识一下前后端联调]]></title>
      <url>https://chping2125.github.io/2016/11/05/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>昨天一个朋友遇到一个典型的前后端联调的问题，这个问题已经不是第一次有人遇到了，自己多少知道点，就索性写下来吧。</p>
<p>问题重现：</p>
<blockquote>
<p>小刘同学的项目采用的是前后端分离架构，现在前后端程序猿已经碰过面，协商好了一些前端需要的数据接口，于是前后端程序猿同时开工码代码。<br>这时候小刘同学某个页面需要后端数据，但是后端叔叔还没有将该数据的借口开发出来，此时小刘只能做假数据（专业点叫<strong>mock数据</strong>，^_^），但是小刘的ajax的借口写的是与后端叔叔商量好的绝对路径（域名+请求路径+请求参数，跨域问题已解决），因为这是以后真正的请求路径，所以小刘又不像先写本地相对路径，后期再来修改（万一后台叔叔开发的慢了，鬼知道有多少接口要修改呀）。于是他就迷茫了。。。</p>
</blockquote>
<p>仔细看看这其实就是前后端分离中的mock数据和联调的问题，就现在来说能解决的方式有很多种。先说mock数据，gulp，webpack，<a href="http://ued.qunar.com/fekit/" target="_blank" rel="external">fekit</a>（去哪儿网的一款前端自动化构建工具，据说历史比webpack和gulp都要久远）等等自动化构建工具都有mock数据的功能，这不是问题；再说绝对路径的问题，其实只需要做一个host的映射就行了。<br><a id="more"></a><br>进入正题，前后端联调。</p>
<h1 id="什么是前后联调"><a href="#什么是前后联调" class="headerlink" title="什么是前后联调"></a>什么是前后联调</h1><p>我的理解是<strong>前后端联调</strong>是一种<strong>真实业务数据</strong>和<strong>本地mock数据</strong>之间来回切换以达到前后端分离架构下的不同开发速度时数据交换的一种方式方法（有点绕）。</p>
<h1 id="为什么要前后端联调"><a href="#为什么要前后端联调" class="headerlink" title="为什么要前后端联调"></a>为什么要前后端联调</h1><p>前面解释前后端联调是可能有些绕，这里举例来说明一下。<br>回到上面小刘的问题，假设小刘现在ajax中的url写的是相对路径（如：./mock/user.json），小刘现在面临的是后端接口没有数据，需要本地mock数据，但是当后端接口开发完成，并且有了测试数据后，小刘是不是需要切换到后端数据呢？答案是肯定的，但是小刘需要在本地mock数据和后端接口数据之间来回切换，为什么呢？很明显吗，本地的mock数据是小刘自己写的，肯定符合前端需求，但是后端接口首先需要测试通不通？还需要测试数据格式对不对？有可能前两部都整好了，但是后端还没有填写足够的数据（比如，列表页，小刘想分页，后端叔叔就写了两条测试数据，你咋整？），所以呀，小刘需要根据后端叔叔对接口的调整不断的来回切换url，这样岂不是还在受后端的影响，还谈毛线前后端分离呀！</p>
<p>所以当我们在前后端分离架构中，<strong>不断来回切换本地mock数据和后端接口数据时</strong>就遇到了联调的问题。</p>
<h1 id="实现前后端联调"><a href="#实现前后端联调" class="headerlink" title="实现前后端联调"></a>实现前后端联调</h1><p>首先我们已经知道，在现在流行的<strong>“前后端完全分离”</strong>架构中，前后端联调是一个不可能避免的问题，就我目前对前后端联调的理解来说，我认为需要联调的有以下两个方面的资源：</p>
<ol>
<li><strong>css、js、图片等前端静态资源文件。</strong></li>
<li><strong>ajax获取的后端数据。</strong></li>
</ol>
<p>而前后端分离的架构的应用可能也分为两种情况：</p>
<ol>
<li><strong>前后端完全分离，前后端分别拥有自己的域名和服务器。</strong></li>
<li><strong>前后端开发分离，但是部署时是一个域名和一台服务器。</strong></li>
</ol>
<p>还有就是需要联调的场景也是两种情况：</p>
<ol>
<li><strong>开发阶段</strong></li>
<li><strong>调试阶段</strong></li>
</ol>
<p>针对以上2方面资源和2种应用情况还有2种场景（2到家了。。。），接下来我们看看怎样通过mock数据和host的映射来实现解决这些问题。</p>
<h2 id="先解释一下-‘222’"><a href="#先解释一下-‘222’" class="headerlink" title="先解释一下 ‘222’"></a>先解释一下 ‘222’</h2><h3 id="2种资源"><a href="#2种资源" class="headerlink" title="2种资源"></a>2种资源</h3><p>为什么我将资源分为两种呢？首先来看css、js文件和图片是通过link、scripts、img标签来引入的（样式中的图片也是一个道理）， 它们是不存在跨域问题的，你在哪里引入都无所谓。</p>
<p>而ajax获取后端数据是有跨域问题的，虽然说可以解决，但是有可能是该数据（或者后端部署环境）和上面的css、js、图片等静态资源是不在同一台服务器上的，也可能是同一台服务器不同域名下的，如果都在同一域名同一服务器下，开发阶段肯定也不在一起吧！</p>
<h3 id="2种应用情况"><a href="#2种应用情况" class="headerlink" title="2种应用情况"></a>2种应用情况</h3><p>虽然架构可以采用前后端分离，但是部署有可能就不一样了，这和项目的大小，公司的情况等等都有关系了，一个百八十人用的小系统，还得两台服务器两个域名，你不觉着浪费吗？</p>
<p>2种不同的部署情况直接导致了前期在设计联调方案的时候就不同了，下面会详细介绍。</p>
<h3 id="2种开发场景"><a href="#2种开发场景" class="headerlink" title="2种开发场景"></a>2种开发场景</h3><p>这不用多说了，虽然现在主张前后端分离，但也不能不和后端叔叔亲近亲近了呀，不然谁给你数据区，所以说真个开发阶段都可能遇到联调的问题。</p>
<h2 id="联调开始"><a href="#联调开始" class="headerlink" title="联调开始"></a>联调开始</h2><p>在讲解联调之前，你需要了解主流自动化构建工具本地mock数据的方法，本例以gulp来讲解，不了解的小伙伴可以看看<a href="http://chping.website/2016/10/18/gulp%E5%92%8Cwebpack%E5%AF%B9%E6%AF%94/" target="_blank" rel="external">Gulp和Webpack对比</a>的mock数据部分。</p>
<h3 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h3><h4 id="两台服务器对应两个域名"><a href="#两台服务器对应两个域名" class="headerlink" title="两台服务器对应两个域名"></a>两台服务器对应两个域名</h4><p>这是最nice的方案，也是联调最舒服的方式。</p>
<p>在这种方式下，前后和后端各有各的服务器和域名。后端会把他们开发的后端业务代码，实时的上传到服务器上（也可能不是，如放在后端叔叔自己的电脑上，实现是一样的，只不过域名变成了叔叔的ip地址）；而我们前端的代码会实时的上传到我们前端的服务器上（同理也可能在自己的电脑上，开发完一块上传）。</p>
<p>为了后面方面讲解，前端服务器域名为“chping.website”，后端服务器域名为”chping.site”。</p>
<h5 id="css、js和图片等静态文件"><a href="#css、js和图片等静态文件" class="headerlink" title="css、js和图片等静态文件"></a>css、js和图片等静态文件</h5><p>此时，我们的静态文件的请求路径建议使用我们前端服务器的绝对路径，为什么呢？因为如果我们写本地的相对路径，等把我们的入口文件交给后端后，路径还是绝对路径，岂不是成了后端服务器的路径了，那就坏菜了，还得一个一个修改成我们前端的绝对路径（如：<code>http://chping.website/css/reset.css</code> ）。</p>
<p>那可能有小伙伴说，这样的话，我在开发阶段，我们的服务器上还没有自己的静态文件呢，去请求的话，会报404的！</p>
<p>对的，这时候就该我们的host的出场了，我们知道当进行域名解析的时候，第一步是在浏览器缓存中寻找，如果没找到，第二步在我们系统的缓存中寻找（就是本地的hosts文件），然后….（想详细了解请看<a href="http://chping.website/2016/09/11/netword/" target="_blank" rel="external">网络请求过程扫盲</a>的DNS解析部分）就没有然后了。既然域名解析需要通过hosts文件这一步，那么我们就修改一下它，让访问<code>http://chping.website</code>这个域名的请求，全都访问我们本地的mock数据就好了呀！</p>
<p>在hosts文件中添加下面这一条<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    chping.website</div></pre></td></tr></table></figure></p>
<p>好的，搞定，从此以后所有访问域名<code>http://chping.website</code>的请求都会被映射到本地了，然后再结合gulp的mock数据，就完成了你写的是域名+绝对路径（如：<code>http://chping.website/css/reset.css</code> ），但是请求的却是你本地mock的数据（上面的请求会被映射到<code>http://localhost/css/reser.css</code>）。这样你就不需要来回修改请求路径了^_^。</p>
<h5 id="ajax后端数据"><a href="#ajax后端数据" class="headerlink" title="ajax后端数据"></a>ajax后端数据</h5><p>开发工程中，静态文件的联调问题可能还是比较少的，特征也不明显。但是通过ajax获取后端数据使用联调的情况可就多了去了，前面<strong>为什么要前后端联调</strong>一节中已经通过小刘的例子说明了，就不在赘述了。</p>
<p>其实在介绍完<strong>css、js、图片等静态文件</strong>一节，相信你也能猜到了怎么去前后端联调了。很简单，ajax中的请求还是写绝对路径（如：<code>http://chping.site/userlist</code>，获取用户列表），此时后端接口如果没有开发好，和上一节一样通过hosts文件的修改可以实现<code>chping.site</code>域名映射到本地来。如果后端像让你给他测试一下接口获取的数据对不对，你可以在修改一下hosts文件就可以了。</p>
<p>可能还有小伙伴问了，这样还不是改来改去，麻烦死了。首先来说，相比较你修改多个url地址和修改一个hosts文件，孰轻孰重，一目了然；其次，怎么可能让你去每次都去修改hosts文件呢，麻烦死了。现在向大家推荐一款小插件，在google商店里搜索一下<strong>HostAdmin</strong>就找到它了，下载安装就好了，然后简单配置一下你的hosts地址，就可以愉快地切换hosts的映射了（HostAdmin的使用自行google，干这行岂能不会用软件）。</p>
<p>好了，两台服务器对应两个不同域名的场景在开发阶段就这样愉快地结束了。但是在实际开发中，中小公司很少给你两台服务器和两个域名的，一般正常情况就是一台服务器一个域名的。</p>
<h4 id="一台服务器一个域名"><a href="#一台服务器一个域名" class="headerlink" title="一台服务器一个域名"></a>一台服务器一个域名</h4><p>我仔细想一下，此时这个服务器会给谁管理呢？</p>
<p>想都不用想肯定不是前端，后端叔叔比你对服务器熟悉多了，交给你去管理那是出鬼了（我还真遇到过，不过也是给后端首先使用，最后才把前端的代码放到服务器上），所以说在这种情况下，你就老老实实在本地开发就行了。</p>
<h5 id="css、js和图片等静态文件-1"><a href="#css、js和图片等静态文件-1" class="headerlink" title="css、js和图片等静态文件"></a>css、js和图片等静态文件</h5><p>这时候的静态文件再开发阶段不需要任何考虑，按照你喜欢的相对路径或者相对于项目的根路径的形式写就行了，因为早晚还得交给后端。但是，需要注意：</p>
<ol>
<li>如果你采用<strong>相对项目根路径的书写方式来写你的静态文件路径</strong>时，一定要先和后端叔叔商量好，将来项目部署的时候他会把你的前端整个项目放在哪里？如果不是根目录下，你就挂了。比如：你的reset.css的路径时<code>/exports/styles/common/reset.css</code>，后端叔叔把你前端项目放在了根目录下的<code>frontEnd</code>文件夹下，<code>reset.css</code>文件就报404了。</li>
<li>如果后端采用的java，你需要特别注意的是，<strong>tomcat的根目录</strong>并不是<code>webapps</code>文件，而后端项目默认是部署在<code>webapps/ROOT</code>文件下的，所以你如果使用了相对项目根路径的书写方式来写你的静态文件路径时，对不起又是404了。</li>
</ol>
<h5 id="ajax后端数据-1"><a href="#ajax后端数据-1" class="headerlink" title="ajax后端数据"></a>ajax后端数据</h5><p>因为现在唯一的一台服务器还是在后端叔叔那里，所以此时你还是可以写绝对路径（域名+请求路径），利用hosts文件来改变域名映射实现联调。</p>
<h4 id="开发阶段小结"><a href="#开发阶段小结" class="headerlink" title="开发阶段小结"></a>开发阶段小结</h4><p>其实在开发阶段做联调的情况还是很少的，一般都在自己的机器上开发，后端会自己做单元测试，根本不用前端来给他做测试的（先别骂，完事一块，哈哈）；而前端更不需要了，都在自己机器上开发。及时有两台服务器和域名，有几个每开发一个功能就上传服务器呀（此服务器指项目上线时部署的服务器），有病吧！所以说，在这个阶段只需要做好hosts映射就行了，不会让你来回切换域名映射的。</p>
<p>但是接下来的调试阶段就不一样了，项目前后端大体都已经开发完成了，Beta版本已经部署了，这时候如果出现bug就需要频繁的线上线下（真实数据和mock数据）切换了。</p>
<h3 id="调试阶段"><a href="#调试阶段" class="headerlink" title="调试阶段"></a>调试阶段</h3><p>调试阶段的情况说明刚才提了一下，现在再详细的阐述一下：</p>
<p>首先，已发布的Beta版本在测试的时候，发现前端页面上有个地方有个小bug，需要你修改一下，于是你访问线上的页面，看了一下这个bug，发现是某个css样式文件里面出错了，于是你希望在本地修改，然后线上版本可以直接查看，这样就可以实时看到你的修改在线上的真实样子了。</p>
<h4 id="两台服务器两个域名"><a href="#两台服务器两个域名" class="headerlink" title="两台服务器两个域名"></a>两台服务器两个域名</h4><p>这里就不在分静态文件和后端数据分开介绍了，其实道理都一样的，另外此时后端数据都是真实的了，也不需要你管后端了，此时你本地的mock数据已经下岗了。</p>
<p>首先你只需要打开前面你安装的<strong>HostAdmin</strong>，通过它配置一下你的hosts文件（如果年前面的做了，此时你已经配置好了），然后<code>chping.website</code>这个域名你可以在本地和线上之间来回切换了。</p>
<p>再具体一点就是：</p>
<ol>
<li>启动你本地的项目</li>
<li><p>将<code>chping.website</code>域名通过HostAdmin设置为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> 127.0.0.1         chping.website</div><div class="line"># 202.201.112.232   chping.website  //假设202.201.112.232是线上服务器的ip</div></pre></td></tr></table></figure>
</li>
<li><p>打开浏览器，并清除一下浏览器缓存，重新打开你们开发的网站。此时网站是获取到的静态资源就是从你本地获取的了，但是ajax获取的数据确实后端返回的真是数据。</p>
</li>
<li>然后你开始修改bug，这时候线上的版本可以实时查看你修改的前端内容，修改完bug，QA说了OK，你就可以把修改的文件替换掉服务器上的版本就行了。</li>
</ol>
<h4 id="一台服务器一个域名-1"><a href="#一台服务器一个域名-1" class="headerlink" title="一台服务器一个域名"></a>一台服务器一个域名</h4><p>这种情况就复杂了，此时只有一个域名，如果你开发阶段是按照我前面说的，写的是相对路径，那么此时你是没有办法实现<strong>两台服务器两个域名</strong>那种线下修改，线上查看的高大上联调的。那该怎么办呢？</p>
<p>第一种方式就是，你在本地修改，本地查看，测试好了以后上传到服务器，看看线上环境可不可以，OK当然好；不行就本地接着改，然后在上传。</p>
<p>第二种方式就是，在开发阶段你给静态文件前面加上一个<strong>假的域名</strong>，然后像两个域名一样进行<strong>假的域名</strong>与本地映射配置，然后像两个域名一样开发。等部署的时候，在服务器上也暂时做一个本地映射，你就可以实现同两个域名一样的线下修改，向上查看了。但是，最后真正上线的时候，你就需要收到，把假域名全部删掉。所以说，一台服务器一个域名的时候，前端静态文件做联调是很不方便的。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>总结一下，<strong>前后端联调</strong>是一种<strong>真实业务数据</strong>和<strong>本地mock数据</strong>之间来回切换以达到前后端分离架构下的不同开发速度时数据交换的一种方式方法，而实现就是利用自动化构建工具的mock数据功能和修改域名解析文件hosts来实现的。</p>
<p>如果你的项目是两台服务器和两个域名，随便你折腾。但是如果你是一台服务器和一个域名的话，就有些麻烦了，而这个麻烦仅对于你前端静态文件联调有影响，需要你好好思考一下怎么解决了，我目前还没找到更好地方法去解决。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端组件化的认识]]></title>
      <url>https://chping2125.github.io/2016/11/04/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E7%9A%84%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>什么是前端组件化和模块化？<br>这两天一直在思考这个问题，以前对这两个概念的理解很模糊。认为“模块化”是侧重于功能或者数据的封装，目的是为了解耦合；而“组件化”更关注的UI部分，如一个页面可以分为头部、底部和内容区域等等。</p>
<p>这样的理解很明显是表层的简单的可能还是不正确的理解，最近反复阅读了苏宁前端“代码民工徐飞”关于组件化话的几篇文章，结合Angular1.x和Vue1.x的组件思想对组件化和模块化有了一些新的认识（原文链接在文末）。<br><a id="more"></a></p>
<h1 id="什么是组件化"><a href="#什么是组件化" class="headerlink" title="什么是组件化"></a>什么是组件化</h1><p>组件化的概念在后端早已存在多年，只不过近几年随着前端的发展，这个概念在前端开始被频繁提及，特别是在MV*的框架中。</p>
<p>前端中的“组件化”这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。</p>
<p>狭义的组件化一般是指<strong>标签化</strong>，也就是以自定义标签（自定义属性）为核心的机制。</p>
<p>广义的组件化包括<strong>对数据逻辑层业务梳理，形成不同层级的能力封装</strong>。</p>
<h1 id="为什么要有组件化？"><a href="#为什么要有组件化？" class="headerlink" title="为什么要有组件化？"></a>为什么要有组件化？</h1><p>不管是前端组件化还是后端的组件化，我认为其目的无非就是为了<strong>提高开发效率和后期维护的效率</strong>。<br>在说的详细点，就是比如我想实现一个网站的头部，我可以把头部单独拿出来进行封装，根据不同页面或者说业务要求，可以灵活定制不同的头部（结构一致，颜色或展示等不同）。这样就可以在不同的页面进行灵活的复用，后期如果头部结构有大的变动，可以只修改该头部组件就好了。是不是这个概念很熟悉，其实你早就在这么干了，比如以前用jsp做静态页面生成的时候，就可以利用jsp的<code>&lt;jsp:include  page=&quot;xxx.jsp&quot;/&gt;</code>指令进行引入公共组件，可能也有人理解那是模板的概念。</p>
<h1 id="MV-框架中的组件"><a href="#MV-框架中的组件" class="headerlink" title="MV*框架中的组件"></a>MV*框架中的组件</h1><p>大概了解了一下组件化的概念，我们来看看Vue和Angular中是怎样运用组件的思想的。</p>
<h2 id="Vue中的组件"><a href="#Vue中的组件" class="headerlink" title="Vue中的组件"></a>Vue中的组件</h2><blockquote>
<p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>
</blockquote>
<p>以上是Vue官网对于Vue中组件的解释，其中在徐飞的<a href="https://github.com/xufei/blog/issues/3" target="_blank" rel="external">从HTML Components的衰落看Web Components的危机</a>一文中的评论部分，Vue的作者尤雨溪（github:<a href="https://github.com/yyx990803" target="_blank" rel="external">yyx990803</a>）发表了对民工叔叔（我只是小菜鸟，叫叔叔没啥问题，哈哈）文章的看法，其中也提到了他对于组件的认识。</p>
<p><a href="https://vuefe.cn/guide/components.html" target="_blank" rel="external">Vue中关于组件</a>的介绍是Vue中的重点部分，从它在Vue官方文档中的篇幅就可以看出来。我认为组件中最重要的方面，到目前为止我能理解的就两部分：<strong>通讯</strong>和<strong>复用</strong>。接下来重点介绍一下Vue对于通讯的实现。</p>
<p>结合尤雨溪在民工叔叔文章中评论那样，组件之间的通讯可分为<strong>从内向外</strong>和<strong>从外向内</strong>两种。Vue对于这两种通信时怎样解决的呢？文档中说的很详细了，<strong>events up</strong>和<strong>props down</strong>。</p>
<h3 id="从外向内的“props-down”"><a href="#从外向内的“props-down”" class="headerlink" title="从外向内的“props down”"></a>从外向内的“props down”</h3><p>具体来说，就是当父组件向子组件传递信息的时候，采用的是在子组件的构造对象中显示的设置props属性进行数据的传输。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">    <span class="comment">// 声明 props</span></div><div class="line">    props: [<span class="string">'message'</span>],</div><div class="line">    <span class="comment">// 就像 data 一样，prop 可以用在模板内</span></div><div class="line">    <span class="comment">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></div><div class="line">    template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>然后向他传入一个普通字符串值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;child message=<span class="string">"hello!"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>当然为了实现字面量语法或者动态语法，可以使用<code>v-bind</code>在父组件上来绑定数据，详细语法请参照<a href="https://vuefe.cn/guide/components.html#Props" target="_blank" rel="external">Vue文档</a>，本文不做详细介绍。</p>
<p><strong>需要特别注意的是：</strong></p>
<ol>
<li>Vue默认的是<strong>单项数据流</strong>，当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</li>
<li>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出<strong>警告</strong>。</li>
<li>注意在 JavaScript 中对象和数组是<strong>引用类型</strong>，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。<br>并且当props为应用类型的时候还可以为其<strong>添加验证</strong>。</li>
</ol>
<h3 id="从内向外的“events-up”"><a href="#从内向外的“events-up”" class="headerlink" title="从内向外的“events up”"></a>从内向外的“events up”</h3><p>Vue中默认的虽然是单项数据流，但还是可以实现子组件向父组件传输数据的，因为有些场景中，我们不可避免的会使用到。而Vue中向上传递数据采用的和Angular中一样的思想，通过<strong>自定义事件</strong>的方式实现。大体需要以下两步步：</p>
<ol>
<li><strong>使用 $emit(eventName)在子组件上触发事件</strong></li>
<li><strong>使用 $on(eventName) 在父组件上（或者祖先组件）监听事件</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    //父组件监听事件</div><div class="line">    <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Vue.component(&apos;button-counter&apos;, &#123;</div><div class="line">  template: &apos;&lt;button v-on:click=&quot;increment&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&apos;,</div><div class="line">  data: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      counter: 0</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    increment: function () &#123;</div><div class="line">      this.counter += 1;</div><div class="line">      this.$emit(&apos;increment&apos;);//子组件触发事件</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">  el: &apos;#counter-event-example&apos;,</div><div class="line">  data: &#123;</div><div class="line">    total: 0</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    incrementTotal: function () &#123;</div><div class="line">      this.total += 1;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="中央事件总线"><a href="#中央事件总线" class="headerlink" title="中央事件总线"></a>中央事件总线</h3><p>有时候非父子关系的组件也需要通信。在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 触发组件 A 中的事件</span></div><div class="line">bus.$emit(<span class="string">'id-selected'</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></div><div class="line">bus.$on(<span class="string">'id-selected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在更多复杂的情况下，你应该考虑使用专门的 <a href="https://vuefe.cn/guide/state-management.html" target="_blank" rel="external">状态管理模式–Vuex</a></p>
<p>另外Vue还可以<a href="https://vuefe.cn/guide/components.html#使用-Slots-分发内容" target="_blank" rel="external">使用slot分发内容</a>，具体实现和更多实现请参考<a href="https://vuefe.cn/guide/components.html#Props" target="_blank" rel="external">Vue文档</a>。</p>
<p>简单描述了一下Vue的组件思想，主要目的是从民工叔叔的组件化文章中重新认识到了组件化的思想，结合Vue框架去理解，可能更容易明白民工叔叔的见解。</p>
<h2 id="Angular中的组件"><a href="#Angular中的组件" class="headerlink" title="Angular中的组件"></a>Angular中的组件</h2><p>严格来说，Angular1.x中并没有明确提及组件的概念，只是我们可以使用<code>app.directive()</code>来实现自定义指令，我觉着这其实就是组件。</p>
<p>而Angular中实现组件之间进行通信的方式主要有四种方式：</p>
<h3 id="基于-rootScope的全局变量和-scope作用域的继承性"><a href="#基于-rootScope的全局变量和-scope作用域的继承性" class="headerlink" title="基于$rootScope的全局变量和$scope作用域的继承性"></a>基于$rootScope的全局变量和$scope作用域的继承性</h3><p>基于作用域的继承性来实现组件通信仅限于作用域链上的通信，需要对Angular的controller之间的作用域关系特别熟悉，详细可以参考民工叔叔的<a href="https://github.com/xufei/blog/issues/18" target="_blank" rel="external">AngularJS实例教程（二）——作用域与事件</a>。</p>
<h3 id="利用事件-on-、-emit-、-broastcase-方式"><a href="#利用事件-on-、-emit-、-broastcase-方式" class="headerlink" title="利用事件$on()、$emit()、$broastcase()方式"></a>利用事件$on()、$emit()、$broastcase()方式</h3><p>先上一张图：<br><img src="https://raw.githubusercontent.com/xufei/blog/master/assets/ng/event.png" alt="$rootScope"><br>上图中清晰的展示了Angular中利用事件去上传数据和广播事件的关系图，于是我们就可以利用事件做点事情了。</p>
<p>从作用域往上发送事件，使用scope.$emit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.$emit(&quot;someEvent&quot;, &#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>从作用域往下发送事件，使用scope.$broadcast<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.$broadcast(&quot;someEvent&quot;, &#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>这两个方法的第二个参数是要随事件带出的数据。<br>注意，这两种方式传播事件，事件的发送方自己也会收到一份。</p>
<h3 id="利用服务实现"><a href="#利用服务实现" class="headerlink" title="利用服务实现"></a>利用服务实现</h3><p>利用myApp.factory()生成一个需要共享数据的对象，然后在controller中注入，就可以是获取到共享数据了，并进行修改了。<br>直接上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var myApp = angular.module(&quot;myApp&quot;, []);</div><div class="line">myApp.factory(&apos;Data&apos;, function() &#123;</div><div class="line">  return &#123;</div><div class="line">    name: &quot;Ting&quot;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">myApp.controller(&apos;FirstCtrl&apos;, function($scope, Data) &#123;</div><div class="line">  $scope.data = Data;</div><div class="line">  $scope.setName = function() &#123;</div><div class="line">    Data.name = &quot;Jack&quot;;</div><div class="line">   &#125;</div><div class="line">  &#125;);</div><div class="line">myApp.controller(&apos;SecondCtrl&apos;, function($scope, Data) &#123;</div><div class="line">  $scope.data = Data;</div><div class="line">  $scope.setName = function() &#123;</div><div class="line">    Data.name = &quot;Moby&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h3><p>民工叔叔在<a href="https://github.com/xufei/blog/issues/18" target="_blank" rel="external">AngularJS实例教程（二）——作用域与事件</a>一文的末尾提出了利用订阅发布模式来通信，我觉着太经典了，接收方在这里订阅消息，发布方在这里发布消息。这个过程可以用这样的图形来表示：<br><img src="https://raw.githubusercontent.com/xufei/blog/master/assets/ng/ng_event_bus.png" alt="订阅发布模式通信"><br>代码写起来也很简单，把它做成一个公共模块，就可以被各种业务方调用了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">app.factory(<span class="string">"EventBus"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="keyword">var</span> eventMap = &#123;&#125;; </div><div class="line">  <span class="keyword">var</span> EventBus = &#123; </div><div class="line">    <span class="attr">on</span> : <span class="function"><span class="keyword">function</span>(<span class="params">eventType, handler</span>) </span>&#123; </div><div class="line">      <span class="comment">//multiple event listener</span></div><div class="line">      <span class="keyword">if</span> (!eventMap[eventType]) &#123; </div><div class="line">        eventMap[eventType] = [];</div><div class="line">      &#125;</div><div class="line">      eventMap[eventType].push(handler);</div><div class="line">    &#125;, </div><div class="line">    <span class="attr">off</span> : <span class="function"><span class="keyword">function</span>(<span class="params">eventType, handler</span>) </span>&#123; </div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; eventMap[eventType].length; i++) &#123; </div><div class="line">        <span class="keyword">if</span> (eventMap[eventType][i] === handler) &#123; </div><div class="line">          eventMap[eventType].splice(i, <span class="number">1</span>); </div><div class="line">          <span class="keyword">break</span>; </div><div class="line">        &#125; </div><div class="line">      &#125; </div><div class="line">     &#125;, </div><div class="line">    <span class="attr">fire</span> : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </div><div class="line">      <span class="keyword">var</span> eventType = event.type; </div><div class="line">      <span class="keyword">if</span> (eventMap &amp;&amp; eventMap[eventType]) &#123; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; eventMap[eventType].length; i++) &#123; </div><div class="line">          eventMap[eventType][i](event); </div><div class="line">        &#125; </div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">  &#125;; </div><div class="line">  <span class="keyword">return</span> EventBus;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>事件订阅代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EventBus.on(<span class="string">"someEvent"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </div><div class="line">  <span class="comment">// 这里处理事件 </span></div><div class="line">  <span class="keyword">var</span> c = event.data.a + event.data.b;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>事件发布代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">EventBus.fire(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">"someEvent"</span>,</div><div class="line">  <span class="attr">data</span>: &#123; </div><div class="line">    <span class="attr">aaa</span>: <span class="number">1</span>, </div><div class="line">    <span class="attr">bbb</span>: <span class="number">2</span> </div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>注意，如果在复杂的应用中使用事件总线，需要慎重规划事件名，推荐使用业务路径，比如：”portal.menu.selectedMenuChange”，以避免事件冲突。</p>
<p>非常经典的Angular组件之间通信的一种方式，我在解释一下，如果A组件中有值需要传递给B组件。那么在B组件Controller中通过<code>EventBus.on()</code>订阅事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EventBus.on(<span class="string">"someEvent"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </div><div class="line">  <span class="comment">// 这里是B组件中对A组件传过来的值进行处理的回调函数</span></div><div class="line">  <span class="keyword">var</span> c = event.data.a + event.data.b;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然后，在A组件Controller中将其中的值通过<code>EventBus.fire()</code>发布一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">EventBus.fire(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">"someEvent"</span>,</div><div class="line">  <span class="attr">data</span>: &#123; </div><div class="line">    <span class="attr">aaa</span>: <span class="number">1</span>, </div><div class="line">    <span class="attr">bbb</span>: <span class="number">2</span> </div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样B组件就可以拿到A组件中的数据值了。</p>
<h1 id="组件化再思考"><a href="#组件化再思考" class="headerlink" title="组件化再思考"></a>组件化再思考</h1><p>简单了解了一下Vue和Angular中的组件思想，我们再来回想一下组件化的概念:</p>
<blockquote>
<p>狭义的组件化一般是指<strong>标签化</strong>，也就是以自定义标签（自定义属性）为核心的机制。<br>广义的组件化包括<strong>对数据逻辑层业务梳理，形成不同层级的能力封装</strong>。</p>
</blockquote>
<p>很明显，不管是Vue还是Angular，对组件的封装都是为了对数据逻辑业务的梳理，使得不同组件各司其职，当然这其中就包括了对HTML的组件化，CSS的组件化和JS的组件化。</p>
<p>对于HTML的组件化可以理解为利用各种语义化标签或者自定义标签（Vue中的组件和Angular中的自定义指令等）对结构进行封装。而对于CSS的组件化，我们现在可以利用SASS或者LESS来实现，根据不同的功能对样式进行不同的封装，我觉着现在前端的一些UI框架就是对组件化的使用，去哪儿网杜瑶的<a href="https://github.com/doyoe/Yo" target="_blank" rel="external">Yo框架</a>就是一个很好的例子。</p>
<p>至于对于JS的组件化运用，我个人觉着就是模块化。不管是CommonJS规范、AMD规范、CMD规范还是ES2015的模块机制目的都是对JS进行模块化开发，使得不同功能的逻辑或者业务分离开，每个模块专注自己的业务逻辑，这样不仅是开发的时候工作目录一目了然，后期维护的时候也能快速定位到各个业务逻辑模块。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>简单的对民工叔叔的几篇文章做了一下总结，其实还没有理解到位，每篇文章读了仅仅3-4遍，每读一遍都有不一样的感受，理解也不一样。可能等过段时间再去读又会颠覆我现在的认识，不管对于错，先记录一下现在的感受，后期有了新的认识再来补充或者修改。<br>下面推荐民工叔叔的对于组件化和Angular的一些文章，我做了少许<strong><a href="https://github.com/chping2125/blog" target="_blank" rel="external">整理</a></strong>，大家可以直接按照目录由浅至深的阅读原文。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gulp和Webpack对比]]></title>
      <url>https://chping2125.github.io/2016/10/18/gulp%E5%92%8Cwebpack%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<p>在现在的前端开发中，前后端分离、模块化开发、版本控制、文件合并与压缩、mock数据等等一些原本后端的思想开始逐渐渗透到“大前端”的开发中。前端开发过程越来越繁琐，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且Webapp通常是一个单页面应用(SPA)，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。</p>
<p>前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。<br><a id="more"></a></p>
<blockquote>
<p>本文需要有一定的<a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">Gulp</a>和<a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">Webpack</a>的基本概念，对Gulp和Webpack的使用有一定的了解。<br>同时还需要对<a href="http://chping.website/2016/09/12/npm/" target="_blank" rel="external">npm</a>或者<a href="http://chping.website/2016/09/12/npm%E5%92%8Ccnpm/" target="_blank" rel="external">cnpm</a>有一定的的了解，对ComonJS、AMD规范有一定的的了解。</p>
</blockquote>
<h1 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h1><p><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">Gulp</a>就是为了规范前端开发流程，实现前后端分离、模块化开发、版本控制、文件合并与压缩、mock数据等功能的一个前端自动化构建工具。说的形象点，“Gulp就像是一个产品的流水线，整个产品从无到有，都要受流水线的控制，在流水线上我们可以对产品进行管理。”</p>
<p>另外，Gulp是通过task对整个开发过程进行构建。</p>
<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p><a href="https://github.com/webpack/webpack" target="_blank" rel="external">Webpack</a> 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、AMD 模块、ES6 模块、CSS、图片、JSON、Coffeescript、LESS 等。</p>
<h1 id="Gulp和Webpack功能实现对比"><a href="#Gulp和Webpack功能实现对比" class="headerlink" title="Gulp和Webpack功能实现对比"></a>Gulp和Webpack功能实现对比</h1><p>简单介绍了一下Gulp和Webpack的概念性的问题和大环境，接下来进入本文的主题，对比一下Gulp和Webpack的优缺点。将从基本概念、启动本地Server、sass/less预编译、模块化开发、文件合并与压缩、mock数据、版本控制、组件控制八个方面对Gulp和Webpack进行对比。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>首先从概念上，我们可以清楚的看出，Gulp和Webpack的侧重点是不同的。</p>
<p>Gulp侧重于前端开发的<strong>整个过程</strong>的控制管理（像是流水线），我们可以通过给gulp配置不通的task（通过Gulp中的gulp.task()方法配置，比如启动server、sass/less预编译、文件的合并压缩等等）来让gulp实现不同的功能，从而构建整个前端开发流程。</p>
<p>Webpack有人也称之为<strong>模块打包机</strong>，由此也可以看出Webpack更侧重于模块打包，当然我们可以把开发中的所有资源（图片、js文件、css文件等）都可以看成模块，最初Webpack本身就是为前端JS代码打包而设计的，后来被扩展到其他资源的打包处理。Webpack是通过loader（加载器）和plugins（插件）对资源进行处理的。</p>
<p>另外我们知道Gulp是对整个过程进行控制，所以在其配置文件（gulpfile.js）中配置的每一个task对项目中<strong>该task配置路径下所有的资源</strong>都可以管理。<br>比如，对sass文件进行预编译的task可以对其配置路径下的所有sass文件进行预编译处理：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/styles/*.scss'</span>)</div><div class="line">    .pipe(sass().on(<span class="string">'error'</span>,sass.logError))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/prd/styles/'</span>));<span class="comment">//编译后的输出路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面这个task可以对<code>&#39;src/styles/*.scss&#39;</code>目录下的所有以<code>.scss</code>结尾的文件进行预处理。</p>
<p>Webpack则不是这样管理资源的，它是根据模块的<strong>依赖关系</strong>进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源(如下图)。<br><img src="/images/gulp/what-is-webpack.png" alt="webpack通过依赖关系静态分析"><br>通俗的说，Webpack就是需要通过其配置文件（webpack.config.js）中<code>entry</code>配置的一个入口文件（JS文件）,如下图<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  entry: &#123;</div><div class="line">      <span class="attr">app</span>:__dirname + <span class="string">"/src/scripts/app.js"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后Webpack进入该<code>app.js</code>文件进行解析，<code>app.js</code>文件如下图：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入scss文件</span></div><div class="line"><span class="keyword">import</span> <span class="string">'../style/app.scss'</span>;</div><div class="line"> </div><div class="line"><span class="comment">//引入依赖模块</span></div><div class="line"><span class="keyword">var</span> greeter = <span class="built_in">require</span>(<span class="string">'./Greeter.js'</span>);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).appendChild(greeter());</div></pre></td></tr></table></figure></p>
<p>解析过程中，发现一个<code>app.scss</code>文件，然后根据<code>webpack.config.js</code>配置文件中的<code>module.loaders</code>属性去查找处理<code>.scss</code>文件的loader进行处理，处理<code>app.scss</code>文件过程中，如果发现该文件还有其他依赖文件，则继续处理<code>app.scss</code>文件的依赖文件，直至处理完成该“链路”上的依赖文件，然后又遇到一个<code>Greeter.js</code>模块，于是像之前一样继续去查找对应的loader去处理…<br>所以，Webpack中对资源文件的处理是通过入口文件产生的依赖形成的，不会像Gulp那样，配置好路径后，该路径下所有规定的文件都会受影响。</p>
<h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><p>所谓的前端模块化开发，我的理解就是，在开发的时候，把不通的资源文件按照他的具体用途进行分类管理，在使用的时候利用CommonJS、AMD、CMD等规范将这些资源文件引入到当前文件中。然后在测试或者最后上线的时候，将这些资源文件按照一定的要求进行压缩合并再加上版本控制处理。<br>可能这样的理解或者说法值得商榷，但是个人还是觉得模块化就是对内容的管理，是为了解耦合。</p>
<p>首先从Gulp入手，看看在项目中，怎样利用模块化的思想进行开发。下面是一个gulp项目的目录结构：<br><img src="/images/gulp/4.png" alt="gulp项目目录结构"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Gulp</div><div class="line"> |——build:  项目输出路径</div><div class="line"> |    |——prd:  css、js文件输出路径</div><div class="line"> |        |——scripts: js文件的输出路径</div><div class="line"> |        |——styles: css文件的输出路径</div><div class="line"> |    |——ver: 版本号相关文件</div><div class="line"> |    |——index.html: 编译后的index.html</div><div class="line"> |——images: 图片文件夹</div><div class="line"> |——mock: mock数据文件夹</div><div class="line"> |——node_modules: npm包管理文件夹</div><div class="line"> |——src: 工作目录</div><div class="line"> |    |——scripts</div><div class="line"> |        |——libs: 第三方依赖库（jQuery等）</div><div class="line"> |        |——tpls: 模板文件</div><div class="line"> |        |——utils: 工具类文件夹</div><div class="line"> |        |——views: 页面自定义js文件</div><div class="line"> |        |——app.js: index.html文件的入口js</div><div class="line"> |    |——styles：文件和scripts文件夹下基本一致（本例中我引用了第三方框架，目录更深，不在展示）</div><div class="line"> |——gulpfile.js: gulp的配置文件</div><div class="line"> |——index.html: 主页html文件</div><div class="line"> |——package.json: npm包管理配置文件</div></pre></td></tr></table></figure></p>
<p>在实际开发过程中，在src目录下工作，html、js和css等文件通过gulp的task配置，执行合并和压缩后输出到build目录下（下面会详细介绍合并压缩的实现）。在详细一点就是：</p>
<blockquote>
<ol>
<li>创建主页html文件</li>
<li>创建与之对应的app.js入口文件和app.scss入口文件。这两个文件只通过CommonJS规范<strong>引入各自views文件中自定义的js(或scss)文件</strong>，具体逻辑不写此文件中。</li>
<li>在views目录下编写js（或css）文件的逻辑代码，其中如果多个文件需要公共逻辑或者工具方法，就可以抽离出来在util文件夹下创建对应的公共方法，然后在views中需要的js（或css）文件中通过CommonJS规范引入使用。libs目录下的第三方库或框架也是这个思想去引用。</li>
<li>scripts目录下的tpls文件是用来放置html模板的，引用方式和引用libs相同。</li>
</ol>
</blockquote>
<p>大体介绍了一下我理解的模块化的思想，但是需要指出的是Gulp对js文件的模块化工作是通过Webpack实现的，具体来说是通过安装<strong>gulp-webpack</strong>模块和相关的<strong>loader</strong>模块进行js模块化管理的。具体步骤如下：</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>gulp-webpack</strong>、<strong>vinyl-named</strong>、<strong>imports-loader</strong>和<strong>string-loader</strong>模块(压缩合并模块后面再介绍)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-webpack vinyl-named -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Gulp的配置文件gulpfile.js中通过CommonJs规范引入gulp-webpack 模块，并进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//1.引入 gulp-webpack和vinyl-named模块</span></div><div class="line">  <span class="keyword">var</span> webpack= <span class="built_in">require</span>(<span class="string">'gulp-webpack'</span>);</div><div class="line">  <span class="keyword">var</span> webpack= <span class="built_in">require</span>(<span class="string">'vinyl-named'</span>);</div><div class="line"></div><div class="line">   <span class="comment">//2.js 模块化配置</span></div><div class="line">  <span class="keyword">var</span> jsFiles = [</div><div class="line">    <span class="string">'./src/scripts/*.js'</span>,</div><div class="line">  ];</div><div class="line">  gulp.task(<span class="string">'packjs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(jsFiles)</div><div class="line">    .pipe(uglify().on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'\x07'</span>,err.lineNumber,err.message);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.end();</div><div class="line">     &#125;))</div><div class="line">    </div><div class="line">    <span class="comment">//Webpack 对js模块化部分 start</span></div><div class="line">    .pipe(webpack(&#123;</div><div class="line">        <span class="attr">output</span>:&#123;</div><div class="line">          <span class="attr">filename</span>:<span class="string">'[name].js'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">module</span>:&#123;</div><div class="line">            <span class="attr">loaders</span>:[&#123;</div><div class="line">              <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">              <span class="attr">loader</span>:<span class="string">'imports?define=&gt;false'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">              <span class="attr">test</span>:<span class="regexp">/\.string$/</span>,</div><div class="line">              <span class="attr">loader</span>:<span class="string">'string'</span></div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;));</div><div class="line">      <span class="comment">//Webpack 对js模块化部分 end</span></div><div class="line">    .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/prd/scripts/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>对css文件我们也采用同js文件一样的模块化思想，利用sass进行模块化开发，至于对scss文件的合并压缩配置，下面还会详细介绍。</p>
<p>接下来应该介绍一下Webpack的模块化实现了，其实也就没什么可以说的了，文件目录和Gulp的基本相同，只不过实现过程中使用到的插件或者说模块不同，配置不同而已。另外需要注意的是，Webpack对于资源文件的模块化打包处理都是按js文件的处理方式处理的，例如还是上一小节中，你可能发现了，我在<code>app.js</code>入口文件中有这样一行代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'../style/app.scss'</span>;</div></pre></td></tr></table></figure></p>
<p>你当时可能产生疑问，为什么在js文件中引入scss文件呢？<br>这是因为Webpack是通过依赖关系进行文件管理的，所以，想要对样式文件进行模块化管理则必须与<code>app.js</code>入口文件建立依赖关系，因此我们将样式文件的入口<code>app.scss</code>文件引入到了<code>app.js</code>中（其他资源想要被管理，也需要这样与<code>app.js</code>入口文件建立依赖关系）。<br>但是这样做很明显的就是样式文件通过<code>app.js</code>入口文件全部都合并压缩到js文件中了，这很显然不是我们想要的结果，所以我们需要将样式文件从js文件中剥离出来。</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>extract-text-webpack-plugin</strong>的模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  extract-text-webpack-plugin -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Webpack的配置文件webpack.config.js中进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//1.引入extract-text-webpack-plugin模块</span></div><div class="line"> <span class="keyword">var</span> Et = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">   <span class="comment">//source-map调试</span></div><div class="line">   devtool: <span class="string">'eval-source-map'</span>,</div><div class="line">   <span class="comment">//webpack入口文件配置</span></div><div class="line">   entry: &#123;</div><div class="line">   <span class="attr">app</span>:__dirname + <span class="string">"/src/scripts/app.js"</span>,</div><div class="line">   &#125;,</div><div class="line">   <span class="comment">//webpack出口文件配置</span></div><div class="line">   output: &#123;</div><div class="line">       <span class="attr">path</span>: __dirname + <span class="string">"/prd/scripts/"</span>,<span class="comment">//输出文件路径配置</span></div><div class="line">       filename: <span class="string">"bundle.js"</span><span class="comment">//输出文件名配置</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">module</span>:&#123;</div><div class="line">       <span class="attr">loaders</span>:[</div><div class="line">         &#123;</div><div class="line">             <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">             <span class="attr">loader</span>: Et.extract(<span class="string">'style'</span>,<span class="string">'css!sass'</span>)<span class="comment">//从js中抽离scss文件</span></div><div class="line">         &#125;</div><div class="line">       ]</div><div class="line">    &#125;,</div><div class="line">   <span class="attr">plugins</span>: [</div><div class="line">       <span class="keyword">new</span> Et(<span class="string">'./styles/bundle.css'</span>),<span class="comment">//从js中抽离scss文件输出目录设置</span></div><div class="line">   ],</div><div class="line">   <span class="comment">//本地server配置</span></div><div class="line">   devServer: &#123;</div><div class="line">     <span class="attr">contentBase</span>:  __dirname + <span class="string">'/prd/'</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">     port:<span class="number">8089</span>,<span class="comment">//本地服务端口配置</span></div><div class="line">     colors: <span class="literal">true</span>,<span class="comment">//终端中输出结果为彩色</span></div><div class="line">     historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></div><div class="line">     inline: <span class="literal">true</span><span class="comment">//实时刷新</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面有些配置信息并不完全，下面的小节中会逐渐介绍到。这样我们就实现了将css文件从js文件中剥离出来的目的。Webpack不但可以对css文件可以进行模块化管理，还可以对图片进行模块管理，有兴趣的可以自己去尝试一下。</p>
<h2 id="文件合并与压缩"><a href="#文件合并与压缩" class="headerlink" title="文件合并与压缩"></a>文件合并与压缩</h2><p>上面的模块化中，我们提到了模块化其实很大一部分是在做文件的合并与压缩操作，所以我们马上来看看Gulp和Webpack是怎样是想文件的合并和压缩的。</p>
<p>先来看看大背景，由于现在前端越来越庞大，页面文件依赖也越来越多，所以对这些文件进行合理的合并和压缩就志在必得。根据前面的了解，Webpack应该比Gulp更擅长文件合并和压缩，毕竟人家被称为<strong>模块打包机</strong>吗。<br>结论是正确的，Gulp可以对css文件以及js文件进行合并压缩处理，而Webpack可以实现对css文件，js文件，html文件等进行合并压缩和图片的压缩，还可以对js文件进行编译（如es6–&gt;es5，react jsx）等等，这些都是通过Webpack的<strong>loader</strong>实现的，当然这些也可以加入到Gulp中，毕竟Gulp把Webpack当做一个模块，通过<strong>gulp-webpack</strong>都引入了。</p>
<h3 id="Gulp合并压缩文件"><a href="#Gulp合并压缩文件" class="headerlink" title="Gulp合并压缩文件"></a>Gulp合并压缩文件</h3><h4 id="css的压缩"><a href="#css的压缩" class="headerlink" title="css的压缩"></a>css的压缩</h4><p> 要想实现Gulp对css文件的压缩只需要安装一个<strong>gulp-minify-css</strong>模块即可。</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>gulp-minify-css</strong>的模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-minify-css -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Gulp的配置文件gulpfile.js中通过CommonJs规范引入gulp-minify-css模块，并进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//1.引入 gulp-minify-css模块</span></div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"></div><div class="line"><span class="comment">//2.css 预处理</span></div><div class="line"><span class="keyword">var</span> cssFiles = [</div><div class="line">  <span class="string">'./src/styles/usage/page/index.scss'</span></div><div class="line">]</div><div class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(cssFiles)</div><div class="line">    .pipe(sass().on(<span class="string">'error'</span>,sass.logError))</div><div class="line">    .pipe(minifyCSS())<span class="comment">//执行压缩处理在一行</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/prd/styles/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样一个简单的css压缩就实现了。</p>
<h4 id="js合并压缩"><a href="#js合并压缩" class="headerlink" title="js合并压缩"></a>js合并压缩</h4><p>要想实现Gulp对js文件的合并压缩需要安装一个<strong>gulp-uglify</strong>和<strong>gulp-concat</strong>两个模块，前者是用于压缩的模块，后者是一个合并的模块。</p>
<ol>
<li><p>在项目中通过npm安装<strong>gulp-uglify</strong>和<strong>gulp-concat</strong>模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-uglify gulp-concat -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Gulp的配置文件gulpfile.js中通过CommonJs规范引入<strong>gulp-uglify</strong>和<strong>gulp-concat</strong>模块，并进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//1.引入**gulp-uglify**和**gulp-concat**模块</span></div><div class="line"> <span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"> <span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"></div><div class="line"><span class="comment">//js 合并压缩</span></div><div class="line"> <span class="keyword">var</span> jsFiles = [</div><div class="line">    <span class="string">'./src/scripts/*.js'</span>,</div><div class="line">  ];</div><div class="line">  gulp.task(<span class="string">'packjs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(jsFiles)</div><div class="line">    <span class="comment">//js文件的压缩</span></div><div class="line">    .pipe(uglify().on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'\x07'</span>,err.lineNumber,err.message);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.end();</div><div class="line">     &#125;))</div><div class="line">    .pipe(webpack(&#123;</div><div class="line">        <span class="attr">output</span>:&#123;</div><div class="line">          <span class="attr">filename</span>:<span class="string">'[name].js'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">module</span>:&#123;</div><div class="line">            <span class="attr">loaders</span>:[&#123;</div><div class="line">              <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">              <span class="attr">loader</span>:<span class="string">'imports?define=&gt;false'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">              <span class="attr">test</span>:<span class="regexp">/\.string$/</span>,</div><div class="line">              <span class="attr">loader</span>:<span class="string">'string'</span></div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;));</div><div class="line">    <span class="comment">//js文件的合并</span></div><div class="line">    .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/prd/scripts/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>js的文件合并压缩也完成了。我们再来看一下Webpack的合并压缩。</p>
<h3 id="Webpack的合并压缩"><a href="#Webpack的合并压缩" class="headerlink" title="Webpack的合并压缩"></a>Webpack的合并压缩</h3><h4 id="压缩js和css"><a href="#压缩js和css" class="headerlink" title="压缩js和css"></a>压缩js和css</h4><p>针对js和css文件的压缩，Webpack已经内嵌了uglifyJS来完成对js与css的压缩混淆，无需引用额外的插件。我们只需要在Webpack配置文件中的plugins属性中做如下配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123; <span class="comment">//压缩代码</span></div><div class="line">      compress: &#123;</div><div class="line">        <span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">except</span>: [<span class="string">'$super'</span>, <span class="string">'$'</span>, <span class="string">'exports'</span>, <span class="string">'require'</span>] <span class="comment">//排除关键字</span></div><div class="line">  &#125;)</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>需要注意的是：压缩的时候需要排除一些关键字，不能混淆，比如$或者require，如果混淆的话就会影响到代码的正常运行。</p>
<h4 id="html的压缩"><a href="#html的压缩" class="headerlink" title="html的压缩"></a>html的压缩</h4><p>想要对html进行压缩，同样也是需要配置Webpack的配置文件，并且需要下载两个插件<strong>HtmlWebpackPlugin</strong>和<strong>html-minifier</strong>插件：<br>1.在项目中通过npm安装<strong>HtmlWebpackPlugin</strong>和<strong>html-minifier</strong>模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install HtmlWebpackPlugin -D</div><div class="line">$ npm install html-minifier -D</div></pre></td></tr></table></figure></p>
<p>2.然后在Webpack的配置文件webpack.config.js进行如下配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">   <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="comment">//根据模板插入css/js等生成最终HTML</span></div><div class="line">       favicon:<span class="string">'./src/img/favicon.ico'</span>, <span class="comment">//favicon路径</span></div><div class="line">       filename:<span class="string">'/view/index.html'</span>, <span class="comment">//生成的html存放路径</span></div><div class="line">       template:<span class="string">'./src/view/index.html'</span>, <span class="comment">//html模板路径</span></div><div class="line">       inject:<span class="literal">true</span>, <span class="comment">//允许插件修改哪些内容，包括head与body</span></div><div class="line">      hash:<span class="literal">true</span>, <span class="comment">//为静态资源生成hash值</span></div><div class="line">      minify:&#123; <span class="comment">//压缩HTML文件</span></div><div class="line">          removeComments:<span class="literal">true</span>, <span class="comment">//移除HTML中的注释</span></div><div class="line">           collapseWhitespace:<span class="literal">true</span> <span class="comment">//删除空白符与换行符</span></div><div class="line">       &#125;</div><div class="line">  &#125;)</div><div class="line"> ]</div></pre></td></tr></table></figure></p>
<p>HtmlWebpackPlugin插件在生成HTML时调用了 html-minifier 插件来完成对HTML的压缩，这里我们使用两个配置完成来移除HTML中的注释以及空白符达到压缩的效果。</p>
<h2 id="sass-less预编译"><a href="#sass-less预编译" class="headerlink" title="sass/less预编译"></a>sass/less预编译</h2><p>我们再来看看sass/less预编译，其实就sass/less的预编译来说，两者区别不是很大。Gulp是通过<code>gulp-sass</code>、<code>gulp-less</code>模块进行预处理；而Webpack是通过<code>scss-loader</code>、<code>less-loader</code>加载器（loader）进行预处理。我们还是分别来看一下两者对此的实现。</p>
<h3 id="Gulp预编译sass-less"><a href="#Gulp预编译sass-less" class="headerlink" title="Gulp预编译sass/less"></a>Gulp预编译sass/less</h3><p>以sass为例子：</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>gulp-sass</strong>的模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-sass -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Gulp的配置文件gulpfile.js中通过CommonJs规范引入gulp-sass模块，并进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//1.引入 gulp-sass模块</span></div><div class="line"><span class="keyword">var</span> sass= <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"></div><div class="line"><span class="comment">//2.css 预处理</span></div><div class="line"><span class="keyword">var</span> cssFiles = [</div><div class="line">  <span class="string">'./src/styles/usage/page/**/*'</span></div><div class="line">  <span class="comment">//./src/styles/usage/page目录下的所有文件</span></div><div class="line">];</div><div class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(cssFiles)</div><div class="line">    .pipe(sass().on(<span class="string">'error'</span>,sass.logError))</div><div class="line">    .pipe(minifyCSS())</div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/prd/styles/'</span>));<span class="comment">//编译后的输出路径</span></div><div class="line">&#125;);</div><div class="line">  </div><div class="line"><span class="comment">//3.对sass文件的修改添加监听事件</span></div><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   gulp.watch(<span class="string">'./src/styles/**/*'</span>,[<span class="string">'sass'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'watch'</span>,<span class="string">'webserver'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'所有任务队列执行完毕'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样，一个简单的sass预处理的task就配置完成了，然后我们还将该task加到gulp.watch()上实现了自动编译（即修改sass文件后保存，则立即执行sass预处理），配合Gulp启动的server则可以实现sass文件修改保存即可在浏览器中查看效果的目的，下一小节会介绍启动本地server。</p>
<h3 id="Webpack预编译sass-less"><a href="#Webpack预编译sass-less" class="headerlink" title="Webpack预编译sass/less"></a>Webpack预编译sass/less</h3><p>同样以sass为例子：</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>sass-loader</strong>和<strong>node-sass</strong>模块，前者是用来加载sass相关文件的，后者是用来编译sass文件的。另外还需要安装另外两个模块<strong>css-loader</strong>和<strong>style-loader</strong>，前者是用来加载css相关文件的，后者是用来将css样式装填到html中的内联样式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install sass-loader node-sass css-loader style-sass -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Webpack的配置文件webpack.config.js中进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>:&#123;</div><div class="line">      <span class="attr">loaders</span>:[</div><div class="line">      &#123;</div><div class="line">          <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="comment">//匹配以.css结尾的文件，如果你项目不需要刻意不配置</span></div><div class="line">          loader: <span class="string">'style!css'</span><span class="comment">//这里顺序必须这样  </span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,<span class="comment">//匹配以.scss结尾的文件</span></div><div class="line">          loader: <span class="string">'style!css!sass'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>前面提到过，Webpack是通过文件的依赖关系进行加载分析的，所以当程序从主入口（js文件）进入后，在依赖的资源文件中发现有sass文件后，就会利用我们配置的<strong>sass-loader</strong>去加载，然后用<strong>node-sass</strong>去解析编译成普通的css语法的样式文件，在然后就是利用<strong>style-loader</strong>将样式以内联样式的形式配置到html中（这里有一个问题，就是css-loader有什么用?我也没搞明白，但是不添加会报错，有知道的可以留言交流一下）。这样Webpack就完成了sass的预处理。</p>
<h2 id="启动server"><a href="#启动server" class="headerlink" title="启动server"></a>启动server</h2><p>我们都知道在前端开发中，ajax请求是需要启动一个server的。特别是在前后端分离思想中，前端开发不再像以前一样过分依赖于后端开发，以前的那种前端测试ajax请求需要装个tomcat或者其它服务器来启动server的现象已经成为过去式，现在我们可以使用像Gulp这类前端自动构建工具启动一个本地server进行测试，再也不收后端程序员钳制了（开个玩笑，和后端好好沟通才能让前端开发更方便）。那么，我们来分别看一下Gulp和Webpack是怎样实现这个功能的。</p>
<h3 id="Gulp启动server"><a href="#Gulp启动server" class="headerlink" title="Gulp启动server"></a>Gulp启动server</h3><p>在Gulp中想要启动一个本地serve，只需要以下几步：</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>gulp-webserver</strong>的模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-webserver -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Gulp的配置文件gulpfile.js中通过CommonJs规范引入gulp-webserver模块，并进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//1.引入 gulp-webserver 模块</span></div><div class="line"><span class="keyword">var</span> webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>);</div><div class="line"></div><div class="line"><span class="comment">//2.配置server task</span></div><div class="line">gulp.task(<span class="string">'webserver'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./'</span>)</div><div class="line">  .pipe(webserver(&#123;</div><div class="line">      <span class="attr">host</span>:<span class="string">'localhost'</span>,</div><div class="line">      <span class="attr">port</span>:<span class="number">80</span>,</div><div class="line">      <span class="comment">//浏览器自动刷新</span></div><div class="line">      livereload:<span class="literal">true</span>,</div><div class="line">      <span class="comment">//显示文件目录</span></div><div class="line">      directoryListing:&#123;</div><div class="line">        <span class="attr">enable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">path</span>:<span class="string">'./'</span></div><div class="line">      &#125;,</div><div class="line">    &#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//3.配置默认task</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'webserver'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'启动任务队列执行完毕'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>在命令行中启动server</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp</div></pre></td></tr></table></figure>
</li>
</ol>
<p>启动成功：<br><img src="/images/gulp/2.png" alt="gulp cli 启动成功"></p>
<ol>
<li>在浏览器地址栏中输入<strong>localhost</strong>打开页面验证。</li>
</ol>
<p>经过以上这三步，我们就在Gulp中启动了一个server了。在Gulp中启动本地服务有一个很方便的配置，就是<code>livereload:true</code>属性的设置，设置后浏览器会根据你项目中资源的变化自动刷新浏览器（如果你的chrome浏览器设置该属性后在你修改文件并保存时仍没有自动刷新，可能是你的chrome浏览器不支持，可以chrome扩展程序中搜索并安装LiveReload插件），比如：<br>我的gulp测试目录结构：<br><img src="/images/gulp/1.png" alt="gulp测试目录结构"><br>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/src/scripts/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我在app.js文件中输入以下内容，然后保存。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'gulp-webserver livereload'</span>);</div></pre></td></tr></table></figure></p>
<p>浏览器中控制台上会立刻打印出一下信息：<br><img src="/images/gulp/3.png" alt="gulp测试目录结构"><br>说明浏览器自动刷新工程，这个小功能在我们开发中屡试不爽。但是，这个功能是需要结合上一小节中的<code>gulp.watch()</code>实时监控文件变化，然后执行合并压缩和sass/less编译等操作后，浏览器再刷新时才能保证是我们修改后的内容。所以，<code>livereload:true</code>属性只是监控到我们修改文件后刷新浏览器重新请求文件，如果我们不重新编译修改后的文件，浏览器获取到的还是原文件，并不会展示变化。</p>
<h3 id="Webpack启动server"><a href="#Webpack启动server" class="headerlink" title="Webpack启动server"></a>Webpack启动server</h3><p>在Webpack中也可以通过插件的形式安装一个<strong>webpack-dev-server</strong>来实现达到启动本地server的目的，具体步骤如下：</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>webpack-dev-server</strong>的模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  -g webpack-dev-server -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Webpack的配置文件webpack.config.js中进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">   <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,</div><div class="line">   <span class="comment">//webpack入口文件配置</span></div><div class="line">   entry: &#123;</div><div class="line">   <span class="attr">app</span>:__dirname + <span class="string">"/src/scripts/app.js"</span>,</div><div class="line">   &#125;,</div><div class="line">   <span class="comment">//webpack出口文件配置</span></div><div class="line">   output: &#123;</div><div class="line">       <span class="attr">path</span>: __dirname + <span class="string">"/prd/scripts/"</span>,<span class="comment">//输出文件路径配置</span></div><div class="line">       filename: <span class="string">"bundle.js"</span><span class="comment">//输出文件名配置</span></div><div class="line">   &#125;,</div><div class="line">   <span class="comment">//本地server配置</span></div><div class="line">   devServer: &#123;</div><div class="line">     <span class="attr">contentBase</span>:  __dirname,<span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">     port:<span class="number">8089</span>,<span class="comment">//本地服务端口配置</span></div><div class="line">     colors: <span class="literal">true</span>,<span class="comment">//终端中输出结果为彩色</span></div><div class="line">     historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></div><div class="line">     inline: <span class="literal">true</span><span class="comment">//实时刷新</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在命令行中启动server</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack-dev-server</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后你就会看见命令行输出内容很多，只要看看保证没有Error就说明成功了。</p>
<ol>
<li>在浏览器地址栏中输入<strong>localhost：8089</strong>测试一下。</li>
</ol>
<p>Webpack的启动本地服务也顺利实现了，是不是也想实现像Gulp一样浏览器自动刷新呀？那Webpack能不能实现呢？答案是肯定的，Webpack官方提供了一个辅助开发工具，它可以自动监控项目下的文件，一旦有修改保存操作，开发服务器就会自动运行Webpack 打包命令，帮我们自动将开发的代码重新打包。而且，如果需要的话，还能自动刷新浏览器，重新加载资源。理论上好像是这样，但是实现好像有不少限制，比如，HTML文件的自动刷新问题（html-webpack-plugin插件使用老是报错），当本地server启动在非output.path路径之外时则不能自动刷新等问题，等我再学习学习再说，或者有知道的可以留言讨论。</p>
<p>而这个辅助工具就是<strong>webpack-dev-server</strong>，它主要提供两个功能：一是为静态文件提供server服务，二是自动刷新和热替换(HMR)。所以想实现如Gulp一样的功能也是可以的，只需要在<code>$ webpack-dev-server</code>后面添加<code>--inline --hot</code>即可。需要注意的是<code>--inline</code>是自动刷新，同时在第二部中的devServer属性中有一个<strong>inline:true</strong>需要配置；而<code>--hot</code>是热替换（<a href="https://segmentfault.com/a/1190000003872635" target="_blank" rel="external">详细了解热替换</a>、<a href="https://segmentfault.com/a/1190000006964335" target="_blank" rel="external">了解webpack-dev-server</a>、<a href="http://www.07net01.com/2015/12/1004731.html" target="_blank" rel="external">webpack-dev-server</a>）。</p>
<p>通过对比来看，好像Webpack的<strong>webpack-dev-server</strong>比Gulp的<strong>gulp-server</strong>功能要强一些。因为通过上面可以看出<strong>webpack-dev-server</strong>有两个大功能：一是为静态文件提供server服务，二是自动刷新（<strong>自动刷新其实需要两步：1.修改文件后，文件自动编译{包括合并压缩或者语法编译等}，2.刷新浏览器请求最新编译后的文件</strong>）和热替换(HMR)；而<strong>gulp-server</strong>虽然提供了启动本地server的能力和仅自动刷新浏览器的能力，缺少一个文件自动编译的能力，这需要借助其他模块实现（上一小节已介绍，结合gulp.watch()实时监控文件变化，并编译）。</p>
<p>另外需要注意的是，实际开发中发现<strong>webpack-dev-server</strong>实现自动刷新的时候，并没有执行自动编译，只是将修改的内容合并压缩等处理后发送给了浏览器，并造成了已经编译的现象，但是通过build/prd/scripts目录下的bundle.js(合并压缩后的输出文件)文件，可以发现内容并没有编译（对于Webpack还是不熟悉，好多问题等待解决）。</p>
<h2 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h2><p>在现在前后端分离的思想中，前端和后端耦合度越来越小，现在唯一需要前后端密切联系的就是借口的定义和数据格式的确定。一般在项目开始前，前端和后端将项目中的接口和数据格式全部确定下来（当然项目需求变更就需要临时确立这些共识了），然后前端就可以自己mock数据了。</p>
<h3 id="Gulp实现mock数据"><a href="#Gulp实现mock数据" class="headerlink" title="Gulp实现mock数据"></a>Gulp实现mock数据</h3><p>Gulp中对mock数据的实现使通过NodeJS内置的fs模块和url模块实现的，因为Gulp本身就是基于NodeJS的。还记得第一小节“模块化开发”中目录结构中的那个mock目录吗？那就是用来储存<code>.json</code>文件的mock数据目录。</p>
<ol>
<li>配置Gulp的gulpfile.js文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.引入 fs 和 url 模块</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="comment">//2.重新配置一下上一小节的server</span></div><div class="line">gulp.task(<span class="string">'webserver'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   gulp.src(<span class="string">'./'</span>)</div><div class="line">   .pipe(webserver(&#123;</div><div class="line">      <span class="attr">host</span>:<span class="string">'localhost'</span>,</div><div class="line">      <span class="attr">port</span>:<span class="number">80</span>,</div><div class="line">      <span class="attr">livereload</span>:<span class="literal">true</span>,</div><div class="line">      <span class="attr">directoryListing</span>:&#123;</div><div class="line">        <span class="attr">enable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">path</span>:<span class="string">'./'</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">//mock数据配置</span></div><div class="line">    middleware:<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> urlObj = url.parse(req.url,<span class="literal">true</span>);</div><div class="line">      <span class="keyword">switch</span> (urlObj.pathname) &#123;</div><div class="line">          <span class="keyword">case</span> <span class="string">'/pro/getPro'</span>:</div><div class="line">            res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/json;charaset=utf-8'</span>);</div><div class="line">            fs.readFile(<span class="string">'./mock/list.json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">              <span class="comment">//上面list.json路径使用相对路径，绝对路径前台无法获取数据</span></div><div class="line">              res.end(data);</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'/web/getUser'</span>:</div><div class="line">              <span class="comment">//....</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        next();</div><div class="line">      &#125;</div><div class="line">    &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>具体来说，就是通过NodeJS拦截http请求，根据请求URL来模拟后端做出处理后返回不同的数据。</p>
<h3 id="Webpack实现mock数据"><a href="#Webpack实现mock数据" class="headerlink" title="Webpack实现mock数据"></a>Webpack实现mock数据</h3><p>Webpack并没有自带实现mock数据的功能，毕竟Webpack人家本来就是用来打包的，人家并不是流程控制的,我们可以和Gulp对比实现其他功能，是因为其他功能都是在打包过程中实现的(启动server除外)。虽然Webpack没有自带mock数据的功能，但是我们可以借助一些其他手段来实现，比如说<strong><a href="https://github.com/typicode/json-server" target="_blank" rel="external">json-server</a></strong>，它的实现原理就是，启动一个本地3000端口作为mock数据的端口，然后我们在Webpack中配置一个代理，让所有请求代理到3000端口上去，就可以获取到数据了。<br>实现步骤：</p>
<ol>
<li><p>在项目中通过npm安装一个<strong>json-server</strong>的模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  -g json-server</div></pre></td></tr></table></figure>
<p>可以将在任何一个目录下启动json-server,为了统一，我们建议直接在项目根目录启动，将mock数据也放在项目根目录下。</p>
</li>
<li><p>启动json-server</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ json-server</div></pre></td></tr></table></figure>
<p>json-server是一个非常强大的工具，感兴趣的可以自行google。</p>
</li>
<li><p>然后在Webpack的配置文件webpack.config.js中进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">   <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,</div><div class="line">   <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>:__dirname + <span class="string">"/src/scripts/app.js"</span>,</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">output</span>: &#123;</div><div class="line">       <span class="attr">path</span>: __dirname + <span class="string">"/prd/scripts/"</span>,</div><div class="line">       <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">   &#125;,</div><div class="line">   <span class="comment">//本地server配置</span></div><div class="line">   devServer: &#123;</div><div class="line">     <span class="attr">contentBase</span>:  __dirname,</div><div class="line">     <span class="attr">port</span>:<span class="number">8089</span>,</div><div class="line">     <span class="attr">colors</span>: <span class="literal">true</span>,</div><div class="line">     <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</div><div class="line">     <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line">     <span class="comment">//重点在这里</span></div><div class="line">     proxy:&#123;</div><div class="line">       <span class="string">'/http://chping.website/*'</span>:&#123;<span class="comment">//为正则表达式，匹配以http://chping.website开头的url</span></div><div class="line">         target: <span class="string">'http://localhost:3000'</span>,<span class="comment">//代理到本地3000端口</span></div><div class="line">         pathRewrite:&#123;</div><div class="line">           <span class="string">'^/http://chping.website'</span>:<span class="string">''</span><span class="comment">//将http://chping.website替换为空字符串</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：<br>配置项<code>&#39;^/http://chping.website&#39;:&#39;&#39;//将http://chping.website替换为空字符串</code>的目的，举例说明：<br>假设我们项目中访问的是<code>http://chping.website/userlist</code>去获取用户列表，经过此配置项后，url为<code>http://localhost:3000/userlist</code>,否则为<code>http://localhost:3000/http://chping.website/userlist/userlist</code>。</p>
</li>
<li>在命令行中重新启动server<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack-dev-server</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>对于版本控制，我们在开发过程中，也是一个使用比较频繁的功能，特别是开发团队比较大的时候，这个功能就显得更加重要了。那么Gulp和Webpack是具体怎样实现的呢？</p>
<h3 id="Gulp实现版本控制"><a href="#Gulp实现版本控制" class="headerlink" title="Gulp实现版本控制"></a>Gulp实现版本控制</h3><ol>
<li><p>在项目中通过npm安装<strong>gulp-rev</strong>和<strong>gulp-rev-collector</strong>模块，前者用于生成文件的MD5码文件和按MD5码命名的资源文件，后者是利用MD5码，对文件名进行替换。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  gulp-rev gulp-rev-collector -D</div></pre></td></tr></table></figure>
</li>
<li><p>然后在Gulp的配置文件gulpfile.js中进行简单配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//1.引入连个模块</span></div><div class="line">  <span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</div><div class="line">  <span class="keyword">var</span> revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>);</div><div class="line">  <span class="comment">// 2.版本号控制</span></div><div class="line">  gulp.task(<span class="string">'ver'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.src(cssFiles)</div><div class="line">    .pipe(rev())<span class="comment">//产生MD5码</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/prd/styles/'</span>))<span class="comment">//重命名文件</span></div><div class="line">    .pipe(rev.manifest())<span class="comment">//产生版本信息的json文件</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'./build/ver/styles/'</span>));</div><div class="line">  gulp.src(jsFiles)</div><div class="line">  .pipe(rev())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/prd/scripts/'</span>))</div><div class="line">  .pipe(rev.manifest())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/ver/scripts/'</span>));</div><div class="line"> &#125;)</div><div class="line"> <span class="comment">//动态修改html中对css和js文件的修改</span></div><div class="line"> gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src([<span class="string">'./build/ver/**/*'</span>,<span class="string">'./build/*.html'</span>])</div><div class="line">  .pipe(revCollector())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/'</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Gulp实现版本控制很方便，将这两个task加入gulp.watch()中，即可实现修改保存文件实时自动修改版本的功能。</p>
<h3 id="Webpack实现版本控制"><a href="#Webpack实现版本控制" class="headerlink" title="Webpack实现版本控制"></a>Webpack实现版本控制</h3><p>Webpack中需要版本控制的有css、js文件，不过Webpack的版本控制只实现了将css、js文件添加hash值方式命名的文件方式，修改引用路径中的文件名需手动实现。<br>不过实现确实很简单，只需要将webpack.config.js配置文件中的output.filename和plugins中的输出文件名称修改一下即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>:__dirname + <span class="string">"/src/scripts/app.js"</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: __dirname + <span class="string">"/prd/scripts/"</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name]-[hash].js"</span><span class="comment">//修改输出文件名</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> Et(<span class="string">'./styles/[name]-[hash].css'</span>),<span class="comment">//修改输出文件名</span></div><div class="line">    ]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>这样就解决了。</p>
<h2 id="组件控制"><a href="#组件控制" class="headerlink" title="组件控制"></a>组件控制</h2><p>组件控制原本应该放在模块化小节或者前后小节，但是由于实在不知道该怎样比较，其实也没啥可比较的，就放在最后了。<br>Gulp和Webpack对各自组件的管理都是使用的npm进行的组件管理，想了解更多npm组件的管理的可自行百度，或者看看这篇文章入个门<a href="http://chping.website/2016/09/12/npm/" target="_blank" rel="external">《npm介绍》</a>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上八个方面的功能对比，Gulp和Webpack基本都能满足前端自动化构建工具的任务，但是还是看出两个工具的侧重点是不通的，Gulp侧重整个过程的控制，Webpack在模块打包方面有特别出众。所以，Gulp + Webpack 组合使用可能更方便。</p>
<p>很长的一篇总结文章，前前后后花了两天时间终于写完了，还有很多测试没做，并且还有很多疑问没解决。慢慢学习，慢慢在补充修改吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fekit针对CommonJs规范进行的JS模块包装]]></title>
      <url>https://chping2125.github.io/2016/09/28/Fekit_commonJs/</url>
      <content type="html"><![CDATA[<p>利用fekit前端自动化构建工具进行前端工程化开发工程中，我们知道fekit使用CommonJS规范进行JS模块化的实现。其中scripts文件夹（JS文件目录）下的每个文件（大多为js文件）都是一个模块，然后我们利用module对象、exports对象和require()方法进行模块的定义和模块引用。</p>
<p>在fekit中利用CommonJS实现的JS文件中包含module对象、exports对象和require()方法，但是浏览器宿主环境中的JS并没有相对的module对象、exports对象和require()方法，那么浏览器是怎样运行我们的JS文件的呢？还是fekit做了哪些工作使我们的JS文件（大多数）既可以模块化，又可以使其在浏览器中运行的呢？</p>
<a id="more"></a>
<h1 id="fekit中的模块"><a href="#fekit中的模块" class="headerlink" title="fekit中的模块"></a>fekit中的模块</h1><p>下面是一个利用fekit自动构建工具模块化的一个基于CommonJS规范的index.js文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'../libs/jquery.js'</span>)</div><div class="line">exports.ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: <span class="string">'/web/getJSON'</span>,</div><div class="line">		<span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">		<span class="attr">data</span>: &#123;&#125;,</div><div class="line">		<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">			$.each(res.data,<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>)</span>&#123;</div><div class="line">				str+=<span class="string">"&lt;li&gt;"</span>+value+<span class="string">"&lt;/li&gt;"</span>;</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'.ul'</span>).html(str);</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line">exports.count = <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>首先我们利用require()方法引用了一个jquery.js模块，然后在index.js中利用module对象中的exports对象定义了一个包含ajax()方法和count变量（测试而已）的模块（不用着急看不懂，往下继续看），其中在ajax方法中我们使用了引入的jquery.js。</p>
<p>当我们书写完这个index.js模块后，利用fekit构建工具运行该项目，然后在chorme浏览器的source面板中，我们可以看到index.js变成了如下内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">__context</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = &#123;</div><div class="line">        <span class="attr">id</span> : <span class="string">"118cd57f279558dffcbae8096c7cf113"</span> ,</div><div class="line">        <span class="attr">filename</span> : <span class="string">"index.js"</span> ,</div><div class="line">        <span class="attr">exports</span> : &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span>( !__context.____MODULES ) &#123; __context.____MODULES = &#123;&#125;; &#125;</div><div class="line">    <span class="keyword">var</span> r = (<span class="function"><span class="keyword">function</span>(<span class="params"> exports , module , global </span>)</span>&#123;</div><div class="line">    	<span class="keyword">var</span> $ =__context.____MODULES[<span class="string">'8777f761b8463a858236c246bedbce92'</span>];</div><div class="line">		exports.ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$.ajax(&#123;</div><div class="line">				<span class="attr">url</span>: <span class="string">'/web/getJSON'</span>,</div><div class="line">				<span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">				<span class="attr">data</span>: &#123;&#125;,</div><div class="line">				<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">					$.each(res.data,<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>)</span>&#123;</div><div class="line">						str+=<span class="string">"&lt;li&gt;"</span>+value+<span class="string">"&lt;/li&gt;"</span>;</div><div class="line">					&#125;);</div><div class="line">					$(<span class="string">'.ul'</span>).html(str);</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		&#125;</div><div class="line">		exports.count = <span class="number">1</span>;</div><div class="line">    &#125;)( <span class="built_in">module</span>.exports , <span class="built_in">module</span> , __context );</div><div class="line">    __context.____MODULES[ <span class="string">"118cd57f279558dffcbae8096c7cf113"</span> ] = <span class="built_in">module</span>.exports;</div><div class="line">&#125;)(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>对比我们自己在项目中的index.js，我们发现，浏览器中展示的index.js对我们的index.js进行了包装，外层包了两层IIFE，这就是fekit帮我们做得事。</p>
<h1 id="fekit做了什么？"><a href="#fekit做了什么？" class="headerlink" title="fekit做了什么？"></a>fekit做了什么？</h1><p>我们知道了fekit对我们的JS文件外层包了两层IIFE，那么这两层IIFE干了什么呢？</p>
<p><strong>同时我们好像也明白了为什么模块之前的作用域实现了隔离，避免了相互污染。就是这两层IIFE的引起的。</strong></p>
<h2 id="第一层IIFE"><a href="#第一层IIFE" class="headerlink" title="第一层IIFE"></a>第一层IIFE</h2><p>通过浏览器中的index.js，我们可以看出此层包装的目的：</p>
<ol>
<li><strong>传入宿主对象。</strong>通过传入<code>this</code>实参给<code>__context</code>形参来实现宿主对象的传递，我们还可以看出宿主对象中有一个<code>____MODULES</code>数组，其储存着通过CommonJS规范定义的每一个模块的映射。这就是第一层IIFE为什么要传入宿主对象的原因，就是为了通过这个<code>——MODULES</code>数组中储存的映射去引用其他模块；同时将当前模块的映射保存进这个数组,以便其他模块引用。</li>
<li><strong>创建当前模块的module对象。</strong>该对象中包括当前模块的id、filename、exports属性。</li>
</ol>
<h2 id="第二层IIFE"><a href="#第二层IIFE" class="headerlink" title="第二层IIFE"></a>第二层IIFE</h2><p>此层包装的目的：</p>
<ol>
<li><strong>将上一层IIFE中创建的module对象和宿主对象传入。</strong>传入module对象是为了包装当前模块，传入宿主对象是为了将当前模块的映射保存进<code>——MODULES</code>数组。</li>
<li><strong>引用其他模块。</strong>我们可以看出第二层IIFE的第一句就是去宿主对象的<code>——MODULES</code>数组中查找一个ID,这个ID就是jquery.js模块的moudule对象中的id属性。</li>
<li><strong>将模块中的方法或变量赋值给exports对象。</strong>将该模块需要暴露出去给其他模块使用的方法或变量赋值给上一层传入的module对象的exports对象。</li>
<li><strong>将当前模块储存进宿主对象的“____MODULES”数组。</strong>将该模块的id储存到宿主对象的“____MODULES”数组后，其他模块就可以引用当前模块了。</li>
</ol>
<p>注：在CommonJS中，每个模块都有一个module对象代表当前模块对象，其exports对象中储存了暴露给其他模块的变量和方法。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>这就是fekit对CommonJS规范的实现，使开发者可以方便的对JS进行模块化开发，而不用担心浏览器不支持CommonJS规范编写的JS模块化的文件。</p>
<p>前端自动化构建工具对于JS模块化的包装的方式也各有不同，但是目的是一样的，比如Gulp利用webpack的imports-loader插件进行的包装如下，有兴趣的小伙伴可以研究一下。</p>
<p><strong>gulp(webpack)包装后</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The module cache</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The require function</span></div><div class="line"><span class="comment">/******/</span> 	<span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Check if module is in cache</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedModules[moduleId])</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> installedModules[moduleId].exports;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Create a new module (and put it into the cache)</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line"><span class="comment">/******/</span> 			exports: &#123;&#125;,</div><div class="line"><span class="comment">/******/</span> 			id: moduleId,</div><div class="line"><span class="comment">/******/</span> 			loaded: <span class="literal">false</span></div><div class="line"><span class="comment">/******/</span> 		&#125;;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Execute the module function</span></div><div class="line"><span class="comment">/******/</span> 		modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Flag the module as loaded</span></div><div class="line"><span class="comment">/******/</span> 		<span class="built_in">module</span>.loaded = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Return the exports of the module</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line"><span class="comment">/******/</span> 	&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the modules object (__webpack_modules__)</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.m = modules;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the module cache</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.c = installedModules;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// __webpack_public_path__</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.p = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</div><div class="line"><span class="comment">/******/</span> &#125;)</div><div class="line"><span class="comment">/************************************************************************/</span></div><div class="line"><span class="comment">/******/</span> ([</div><div class="line"><span class="comment">/* 0 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">module</span>.exports = __webpack_require__(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 1 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*** IMPORTS FROM imports-loader ***/</span></div><div class="line">	<span class="keyword">var</span> define = <span class="literal">false</span>;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> common = &#123;</div><div class="line">	  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">$el, str</span>) </span>&#123;</div><div class="line">	    <span class="keyword">if</span>($el.get(<span class="number">0</span>).tagName.toLowerCase() == <span class="string">'body'</span>) &#123;</div><div class="line">	      $el.prepend(str);</div><div class="line">	    &#125; <span class="keyword">else</span> &#123;</div><div class="line">	      $el.html(str);</div><div class="line">	    &#125;</div><div class="line">	  &#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="built_in">module</span>.exports = common;</div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line"><span class="comment">/******/</span> ]);</div></pre></td></tr></table></figure></p>
<p><strong>gulp(webpack)包装前</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var common = &#123;</div><div class="line">  render: function ($el, str) &#123;</div><div class="line">    if($el.get(0).tagName.toLowerCase() == &apos;body&apos;) &#123;</div><div class="line">      $el.prepend(str);</div><div class="line">    &#125; else &#123;</div><div class="line">      $el.html(str);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = common;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Util.js]]></title>
      <url>https://chping2125.github.io/2016/09/26/UtilJs/</url>
      <content type="html"><![CDATA[<h1 id="Util-js"><a href="#Util-js" class="headerlink" title="Util.js"></a>Util.js</h1><p>JavaScript基础工具类，针对不同版本浏览器内核兼容性提供方便的API<br><a id="more"></a></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol>
<li><a href="https://github.com/chping2125/util.js" target="_blank" rel="external">Fork</a>到你的Git仓库，然后检出到你本地即可。</li>
<li>点击这里，下载<a href="https://github.com/chping2125/util.js/archive/master.zip" target="_blank" rel="external">ZIP压缩版</a>.</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/Util.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// code.....</span></div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'Util.js'</span>);</div><div class="line">util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// code.....</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="基础工具类APIs"><a href="#基础工具类APIs" class="headerlink" title="基础工具类APIs"></a>基础工具类APIs</h2><h3 id="event-事件"><a href="#event-事件" class="headerlink" title="event(事件)"></a>event(事件)</h3><p>该对象中包括了对于JS事件操作的相关APIs，兼容DOM0级，DOM1级，DOM3级事件规范。</p>
<h4 id="addHandler-element-type-handler"><a href="#addHandler-element-type-handler" class="headerlink" title="addHandler(element,type,handler)"></a>addHandler(element,type,handler)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加事件监听</div><div class="line"> * @param element[Element]             待添加事件监听的element对象</div><div class="line"> * @param type[String]                 DOM事件规范中的事件类型</div><div class="line"> * @param handler[Function]            回掉函数</div><div class="line"> * @return [Element]                   待添加事件监听的element对象</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span>(<span class="params">element,type,handler</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// code.....</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="removeHandler-element-type-handler"><a href="#removeHandler-element-type-handler" class="headerlink" title="removeHandler(element,type,handler)"></a>removeHandler(element,type,handler)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除事件监听</div><div class="line"> * @param element[Element]             待移除事件监听的element对象</div><div class="line"> * @param type[String]                 DOM事件规范中的事件类型</div><div class="line"> * @param handler[Function]            回掉函数</div><div class="line"> * @return [Element]                   待移除事件监听的element对象</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHandler</span>(<span class="params">element,type,handler</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.removeHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// code.....</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="getEvent-event"><a href="#getEvent-event" class="headerlink" title="getEvent(event)"></a>getEvent(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取事件event对象</div><div class="line"> * @param event[event]             事件监听回调函数中的event对象</div><div class="line"> * @return [event]                 event的对象</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEvent</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="getTarget-event"><a href="#getTarget-event" class="headerlink" title="getTarget(event)"></a>getTarget(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取事件target对象</div><div class="line"> * @param event[event]             事件监听回调函数中的event对象</div><div class="line"> * @return [target]                target的对象</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTarget</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		<span class="keyword">var</span> target = util.event.getTarget(e);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="preventDafult-event"><a href="#preventDafult-event" class="headerlink" title="preventDafult(event)"></a>preventDafult(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 阻止默认事件</div><div class="line"> * @param event[event]             事件监听回调函数中的event对象</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preventDafult</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		preventDafult(e);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="stopPropagation-event"><a href="#stopPropagation-event" class="headerlink" title="stopPropagation(event)"></a>stopPropagation(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 阻止事件冒泡</div><div class="line"> * @param event[event]             事件监听回调函数中的event对象</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopPropagation</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		stopPropagation(e);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="getMouseButton-event"><a href="#getMouseButton-event" class="headerlink" title="getMouseButton(event)"></a>getMouseButton(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取鼠标按键键值</div><div class="line"> * @param event[event]    事件监听回调函数中的event对象</div><div class="line"> * @return [Number]       0:左键、1：滑轮键、3：右键</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMouseButton</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		<span class="keyword">if</span>(getMouseButton(e) == <span class="number">1</span>)&#123;</div><div class="line">			<span class="comment">//code...</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="getWheelDelta-event"><a href="#getWheelDelta-event" class="headerlink" title="getWheelDelta(event)"></a>getWheelDelta(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 鼠标滚轮事件的wheelDelta属性</div><div class="line"> * @param event[event]    事件监听回调函数中的event对象</div><div class="line"> * @return [Number]       </div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWheelDelta</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		<span class="keyword">if</span>(getWheelDelta(e) == <span class="number">120</span>)&#123;</div><div class="line">			<span class="comment">//code...</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<ul>
<li>当鼠标向前滚动时，wheelDelta是120的倍数；</li>
<li>当鼠标向后滚动时，wheelDelta是-120的倍数；</li>
</ul>
<h4 id="getCharCode-event"><a href="#getCharCode-event" class="headerlink" title="getCharCode(event)"></a>getCharCode(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取键盘键值</div><div class="line"> * @param event[event]    事件监听回调函数中的event对象</div><div class="line"> * @return [Number]       键盘键值</div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCharCode</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		<span class="keyword">if</span>(getCharCode(e) == <span class="number">13</span>)&#123;</div><div class="line">			<span class="comment">//code...</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="getPageX-event"><a href="#getPageX-event" class="headerlink" title="getPageX(event)"></a>getPageX(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取键盘键值</div><div class="line"> * @param event[event]    事件监听回调函数中的event对象</div><div class="line"> * @return [Number]       </div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageX</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		<span class="keyword">if</span>(getPageX(e) == <span class="number">500</span>)&#123;</div><div class="line">			<span class="comment">//code...</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="getPageY-event"><a href="#getPageY-event" class="headerlink" title="getPageY(event)"></a>getPageY(event)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取键盘键值</div><div class="line"> * @param event[event]    事件监听回调函数中的event对象</div><div class="line"> * @return [Number]       </div><div class="line"> **/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageY</span>(<span class="params">event</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.event.addHandler(<span class="built_in">window</span>,<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">		e = util.event.getEvent(e);</div><div class="line">		<span class="keyword">if</span>(getPageY(e) == <span class="number">1000</span>)&#123;</div><div class="line">			<span class="comment">//code...</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>IE8及以前的浏览器的event不支持pageX属性，此方法为了箭筒IE8-。</li>
<li>pageX/Y与clientX/Y的区别就是，pageX/Y包含滚轮卷进去的部分。</li>
</ul>
<h3 id="dom"><a href="#dom" class="headerlink" title="dom"></a>dom</h3><p>该对象中包括了对于JS DOM对象操作的相关APIs，兼容DOM0级，DOM1级，DOM3级事件规范。</p>
<h4 id="getFirstChild-node"><a href="#getFirstChild-node" class="headerlink" title="getFirstChild(node)"></a>getFirstChild(node)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取DOM节点第一个子节点</div><div class="line">    * @param  node[Object]      节点对象</div><div class="line">    * @return [Object]          第一个子节点</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstChild</span>(<span class="params">node</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">	util.dom.getFirstChild(node);</div></pre></td></tr></table></figure>
<h4 id="getLastChild-node"><a href="#getLastChild-node" class="headerlink" title="getLastChild(node)"></a>getLastChild(node)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取DOM节点最后一个子节点</div><div class="line">    * @param  node[Object]      节点对象</div><div class="line">    * @return [Object]          最后一个子节点</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastChild</span>(<span class="params">node</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</div><div class="line">	util.dom.getLastChild();</div></pre></td></tr></table></figure>
<h4 id="getNextSibling-node"><a href="#getNextSibling-node" class="headerlink" title="getNextSibling(node)"></a>getNextSibling(node)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取DOM节点下一个兄弟节点</div><div class="line">    * @param  node[Object]      节点对象</div><div class="line">    * @return [Object]          下一个兄弟节点</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextSibling</span>(<span class="params">node</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</div><div class="line">	util.dom.getNextSibling(node);</div></pre></td></tr></table></figure>
<h4 id="getPreviousSibling-node"><a href="#getPreviousSibling-node" class="headerlink" title="getPreviousSibling(node)"></a>getPreviousSibling(node)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取DOM节点下一个兄弟节点</div><div class="line">    * @param  node[Object]      节点对象</div><div class="line">    * @return [Object]          下一个兄弟节点</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPreviousSibling</span>(<span class="params">node</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</div><div class="line">	util.dom.getPreviousSibling(node);</div></pre></td></tr></table></figure>
<h4 id="getChildNodes-node"><a href="#getChildNodes-node" class="headerlink" title="getChildNodes(node)"></a>getChildNodes(node)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取DOM节点获取所有子节点</div><div class="line">    * @param  node[Object]      节点对象</div><div class="line">    * @return [Array]           返回子节点数组</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildNodes</span>(<span class="params">node</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</div><div class="line">	util.dom.getChildNodes(node);</div></pre></td></tr></table></figure>
<h4 id="getChildNodes2-node"><a href="#getChildNodes2-node" class="headerlink" title="getChildNodes2(node)"></a><del>getChildNodes2(node)</del></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 实现去除childNodes的空白节点的实现</div><div class="line">    * @param  node[Object]      节点对象</div><div class="line">    * @return [Array]           返回子节点数组</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildNodes2</span>(<span class="params">node</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</div><div class="line">	util.dom.getChildNodes2(node);</div></pre></td></tr></table></figure>
<h4 id="nodeListToArray-node"><a href="#nodeListToArray-node" class="headerlink" title="nodeListToArray(node)"></a>nodeListToArray(node)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * NodeList类数组转为Array</div><div class="line">    * @param  nodeList[NodeList]      类数组</div><div class="line">    * @return [Array]             返回数组</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodeListToArray</span>(<span class="params">nodeList</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line">	util.dom.nodeListToArray(nodeList);</div></pre></td></tr></table></figure>
<h4 id="getStyle-node-attr"><a href="#getStyle-node-attr" class="headerlink" title="getStyle(node,attr)"></a>getStyle(node,attr)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取css样式</div><div class="line">    * @param  node[Object]        节点对象</div><div class="line">    * @param  attr[String]        css属性名</div><div class="line">    * @return                     css属性值</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">node,attr</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</div><div class="line">	util.dom.getStyle(node,<span class="string">'background-color'</span>);</div></pre></td></tr></table></figure>
<h3 id="bom"><a href="#bom" class="headerlink" title="bom"></a>bom</h3><p>该对象中包括了对于JS BOM对象兼容操作的相关APIs</p>
<h4 id="getScreenLeft"><a href="#getScreenLeft" class="headerlink" title="getScreenLeft()"></a>getScreenLeft()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取浏览器窗口距离屏幕左边缘的距离</div><div class="line">    * @return [Number]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScreenLeft</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.bom.getScreenLeft();</div></pre></td></tr></table></figure>
<h4 id="getScreenTop"><a href="#getScreenTop" class="headerlink" title="getScreenTop()"></a>getScreenTop()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取浏览器窗口距离屏幕上边缘的距离</div><div class="line">    * @return [Number]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScreenTop</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.bom.getScreenTop();</div></pre></td></tr></table></figure>
<h4 id="getPageWidth"><a href="#getPageWidth" class="headerlink" title="getPageWidth()"></a>getPageWidth()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取浏览器窗口宽度</div><div class="line">    * @return [Number]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageWidth</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.bom.getPageWidth();</div></pre></td></tr></table></figure>
<h4 id="getPageHeight"><a href="#getPageHeight" class="headerlink" title="getPageHeight()"></a>getPageHeight()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取浏览器窗口高度</div><div class="line">    * @return [Number]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageHeight</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.bom.getPageHeight();</div></pre></td></tr></table></figure>
<h4 id="getScrollTop"><a href="#getScrollTop" class="headerlink" title="getScrollTop()"></a>getScrollTop()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取滚动条距离页面顶端的距离</div><div class="line">    * @return [Number]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollTop</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.bom.getScrollTop();</div></pre></td></tr></table></figure>
<h4 id="getScrollLeft"><a href="#getScrollLeft" class="headerlink" title="getScrollLeft()"></a>getScrollLeft()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取滚动条距离页面左边的距离</div><div class="line">    * @return [Number]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollLeft</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.bom.getScrollLeft();</div></pre></td></tr></table></figure>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>该对象中包括了对于本地cookie操作的相关APIs</p>
<h4 id="addCookie-name-value-days"><a href="#addCookie-name-value-days" class="headerlink" title="addCookie(name,value,days)"></a>addCookie(name,value,days)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 插入一条数据到cookie</div><div class="line">    * @param name[String]    待插入cookie中的数据key值</div><div class="line">    * @param value[All]      待插入cookie中的数据value值</div><div class="line">    * @param days[Number]    待插入cookie中的数据保存时间（天）</div><div class="line">    * @return [Boolean]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">name,value,days</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.cookie.addCookie(<span class="string">'myCookie'</span>,data,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<h4 id="removeCookie-name"><a href="#removeCookie-name" class="headerlink" title="removeCookie(name)"></a>removeCookie(name)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 从cookie中删除一条数据</div><div class="line">    * @param name[String]    待删除cookie中的数据key值</div><div class="line">    * @return [Boolean]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">name</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.cookie.removeCookie(<span class="string">'myCookie'</span>);</div></pre></td></tr></table></figure>
<h4 id="getCookie-name"><a href="#getCookie-name" class="headerlink" title="getCookie(name)"></a>getCookie(name)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 从cookie中获取一条cookie</div><div class="line">    * @param name[String]    待获取cookie中的数据key值</div><div class="line">    * @return         </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.cookie.getCookie(<span class="string">'myCookie'</span>);</div></pre></td></tr></table></figure>
<h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>该对象中包括了一个产生随机数的方法</p>
<h4 id="getRandom-num1-num2"><a href="#getRandom-num1-num2" class="headerlink" title="getRandom(num1,num2)"></a>getRandom(num1,num2)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 产生一个包括边界的随机数</div><div class="line">    * @param num1[Number]    </div><div class="line">    * @param num2[Number]    </div><div class="line">    * @return [Number]          </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">num1,num2</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.random.getRandom(<span class="number">1</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><p>该对象中包括ajax相关的APIs</p>
<h4 id="getXHR"><a href="#getXHR" class="headerlink" title="getXHR()"></a>getXHR()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 获取XMLHttpRequest对象 </div><div class="line">    * @return [Object]       XMLHttpRequest对象    </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXHR</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.ajax.getXHR();</div></pre></td></tr></table></figure>
<h4 id="getAjaxJsonData-data"><a href="#getAjaxJsonData-data" class="headerlink" title="getAjaxJsonData(data)"></a>getAjaxJsonData(data)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 对ajax返回的JSON字符串数据转为JSON格式的JS对象</div><div class="line">    * @return [Object]       XMLHttpRequest对象    </div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAjaxJsonData</span>(<span class="params">data</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">eg:</div><div class="line">	util.ajax.getAjaxJsonData(data);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Storage.js]]></title>
      <url>https://chping2125.github.io/2016/09/24/stroage/</url>
      <content type="html"><![CDATA[<h1 id="Storage-js"><a href="#Storage-js" class="headerlink" title="Storage.js"></a>Storage.js</h1><p>本地存储Storage的封装，提供方便的API<br><a id="more"></a></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install storejs</div></pre></td></tr></table></figure>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul>
<li><a href="https://github.com/chping2125/storage.js" target="_blank" rel="external">Fork</a>到你的Git仓库，然后检出到你本地即可。</li>
</ul>
<h3 id="ZIP"><a href="#ZIP" class="headerlink" title="ZIP"></a>ZIP</h3><ul>
<li>点击这里，下载<a href="https://github.com/chping2125/storage.js/archive/master.zip" target="_blank" rel="external">ZIP压缩版</a>.</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/Storage.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	storage(<span class="string">'session'</span>,<span class="string">'test'</span>,<span class="string">'123'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> storage = <span class="built_in">require</span>(<span class="string">'Storage.js'</span>);</div><div class="line">storage.getOrSetStorage(<span class="string">'session'</span>,<span class="string">'test'</span>,<span class="string">'123'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="本地存储APIs"><a href="#本地存储APIs" class="headerlink" title="本地存储APIs"></a>本地存储APIs</h2><h3 id="storage-type-key-value"><a href="#storage-type-key-value" class="headerlink" title="storage(type,key,value)"></a>storage(type,key,value)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加、修改、获取指定的Storage中的数据</div><div class="line"> * @param type[String](session/local)  指定要存储的Storage类型</div><div class="line"> * @param key[String]                  待添加、修改、获取的Storage的key值</div><div class="line"> * @param value[all Type]              待添加、修改的Storage的value值,缺省时为获取数据</div><div class="line"> * @return [Boolean/value]             type类型错误、添加、修改返回Boolean,获取返回value值或null</div><div class="line"> **/</div><div class="line">storage(type,key,value)</div><div class="line"></div><div class="line">eg:</div><div class="line">	storage(<span class="string">'session'</span>,<span class="string">'test'</span>,<span class="string">'123'</span>);</div></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<ol>
<li>type：指定Stroage的类型为sessionStorage/localStorage时出入“session”/“local”,其他输入返回false。</li>
<li>key：只能为String类型，其他输入返回false。</li>
<li>value：传入null或undefined的时，返回null。</li>
</ol>
<h3 id="storage-type-length"><a href="#storage-type-length" class="headerlink" title="storage(type).length"></a>storage(type).length</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 获取Storage中数据的容量</div><div class="line"> * @param type[String](session/local)  指定要获取容量的Storage类型</div><div class="line"> * @return [Number]                    返回容量大小</div><div class="line"> * */</div><div class="line"> storage(type).length</div><div class="line">eg:</div><div class="line">	storage(<span class="string">'session'</span>).length;</div></pre></td></tr></table></figure>
<h3 id="storage-remove-type-key"><a href="#storage-remove-type-key" class="headerlink" title="storage.remove(type,key)"></a>storage.remove(type,key)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 删除一个或清空Storage中的数据</div><div class="line"> * @param type[String](session/local)  指定要删除或者清空的Storage类型</div><div class="line"> * @param key[String]                  待删除的Storage的key值，缺省时为清空所有Storage</div><div class="line"> * @return [Boolean]</div><div class="line"> * */</div><div class="line"> storage.remove(type,key)</div><div class="line">eg:</div><div class="line">	storage.remove(<span class="string">'session'</span>,<span class="string">'test'</span>);</div></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<p>删除不会有任何提示，删除时请注意，或者你可以在原方法中添加你需要的返回信息。</p>
<h3 id="storage-set-type-obj"><a href="#storage-set-type-obj" class="headerlink" title="storage.set(type,obj)"></a>storage.set(type,obj)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 添加多条数据到Storage</div><div class="line"> * @param type[String](session/local)  指定要添加的Storage类型</div><div class="line"> * @param obj[JSON格式]                待添加的JSON格式数据</div><div class="line"> * @return [Boolean]</div><div class="line"> * */</div><div class="line"> storage.set(type,obj)</div><div class="line">eg:</div><div class="line">	storage.set(<span class="string">'session'</span>,&#123;<span class="string">"a"</span>,<span class="number">123</span>,<span class="string">"b"</span>:<span class="literal">true</span>&#125;);</div></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<ul>
<li>obj必须为json格式的数据，如果仅想添加一条数据建议使用storage()方法。</li>
</ul>
<h3 id="storage-get-type-obj"><a href="#storage-get-type-obj" class="headerlink" title="storage.get(type,obj)"></a>storage.get(type,obj)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 获取多条数据</div><div class="line"> * @param type[String](session/local)  指定要获取的Storage类型</div><div class="line"> * @param obj[Array]                   待获取的数据名称数组</div><div class="line"> * @return [Object]                    返回JSON格式数组或者null</div><div class="line"> * */</div><div class="line"> storage.get(type,obj)</div><div class="line">eg:</div><div class="line">	storage.get(<span class="string">'session'</span>,[<span class="string">"a"</span>,<span class="string">"b"</span>]);</div></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<ul>
<li>obj数组每一项必须为String类型的key。</li>
<li>obj也可以为String类型，表示获取单个Storage数据，功能同storage(type,key);</li>
</ul>
<h3 id="storage-has-type-key"><a href="#storage-has-type-key" class="headerlink" title="storage.has(type,key)"></a>storage.has(type,key)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 判断指定Storage有无指定值</div><div class="line"> * @param type[String](session/local)  指定要获取的Storage类型</div><div class="line"> * @param key[String]                  待判断数据的key</div><div class="line"> * @return [Boolean]                    </div><div class="line"> * */</div><div class="line"> storage.has(type,obj)</div><div class="line">eg:</div><div class="line">	storage.has(<span class="string">'session'</span>,<span class="string">'a'</span>);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3-background扩展属性]]></title>
      <url>https://chping2125.github.io/2016/09/23/bg-origin-bg-clip/</url>
      <content type="html"><![CDATA[<p>CSS3对background新加了3个属性，<code>background-origin</code>、<code>background-clip</code>、<code>background-size</code>,在学习过程中，发现background-origin和background-clip之间可能产生一些化学反应，同时还可能影响background-size的百分比取值，本篇文章将记录一下对background-origin、background-clip和background-size的基本认识。<br><a id="more"></a><br>在开始使用background-origin和background-clip之前，我们先回顾一下盒子模型。<br>首先盒子模型是由contentBox、paddingBox、borderBox、marginBox四部分组成。其次CSS盒子模型分为两种：标准盒模型和怪异盒模型（IE），其中标准盒模型：</p>
<blockquote>
<p>盒子的总宽度/高度 = width/height + paddingBox + borderBox + marginBox = contentBox + paddingBox + borderBox + marginBox</p>
</blockquote>
<p>而怪异盒模型：</p>
<blockquote>
<p>盒子的总宽度/高度 = width/height + marginBox = contentBox + paddingBox + borderBox + marginBox</p>
</blockquote>
<p>另外，在CSS3中引入了box-sizing属性来使开发者根据不同场景规定盒子模型的大小，这一点在移动开发至关重要。</p>
<h1 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h1><p>clip：剪，剪掉的意思。CSS3中引入background-clip主要是来确定背景的裁剪区域的，也可以理解为背景从盒子模型的那一部分进行展示。<br>语法：</p>
<blockquote>
<p>background-clip: content-box || padding-box || border-box</p>
</blockquote>
<p>我们来看一下这几个取值的具体意思：</p>
<ul>
<li>content-box：盒子模型的背景从content部分的外边缘开始裁剪，使得除了content部分，其以外的背景都不会显示出来。</li>
<li>padding-box：盒子模型的背景从padding部分的外边缘开始裁剪，使得除了padding部分，其以外的背景都不会显示出来。</li>
<li>border-box：盒子模型的背景从border部分的外边缘开始裁剪，使得除了border部分，其以外的背景都不会显示出来。<strong>默认值</strong></li>
</ul>
<p>上面的文字可能不是很清楚，我们来看几张图片：<br><img src="/images/background/img1.png" alt="background-clip不同取值"><br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!--html--&gt;</div><div class="line">&lt;div class=&quot;div7&quot;&gt;clip:content-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div8&quot;&gt;clip:padding-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div9&quot;&gt;clip:border-box&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;!--css--&gt;</div><div class="line">div&#123;</div><div class="line">	background: #f00;</div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">	padding: 20px;</div><div class="line">	border: 20px dotted #000;</div><div class="line">	margin: 20px;</div><div class="line">	display: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.div7&#123;</div><div class="line">	background-clip: content-box;</div><div class="line">&#125;</div><div class="line">.div8&#123;</div><div class="line">	background-clip: padding-box;</div><div class="line">&#125;</div><div class="line">.div9&#123;</div><div class="line">	background-clip: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再来看看图片背景的效果：<br><img src="/images/background/img2.png" alt="background-clip不同取值"><br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;!--html--&gt;</div><div class="line">&lt;div class=&quot;div7 img&quot;&gt;clip:content-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div8 img&quot;&gt;clip:padding-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div9 img&quot;&gt;clip:border-box&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;!--css--&gt;</div><div class="line">div&#123;</div><div class="line">	background: #f00;</div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">	padding: 20px;</div><div class="line">	border: 20px dotted #000;</div><div class="line">	margin: 20px;</div><div class="line">	display: inline-block;</div><div class="line">&#125;</div><div class="line">.img&#123;</div><div class="line">	background: url(sourse/day16_img1.jpg) no-repeat;</div><div class="line">	color: red;</div><div class="line">&#125;</div><div class="line">.div7&#123;</div><div class="line">	background-clip: content-box;</div><div class="line">&#125;</div><div class="line">.div8&#123;</div><div class="line">	background-clip: padding-box;</div><div class="line">&#125;</div><div class="line">.div9&#123;</div><div class="line">	background-clip: border-box;</div><div class="line">	background-origin: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相信通过上面背景色和图片的例子，应该很容易可以看出background-clip的作用了，就不过多啰嗦了。<br><small style="color:#a7a7a7;">注：图片背景的例子和背景色的例子中有点不同，在.div9中，图片的例子多了一句<code>background-origin：border</code>,这是为什么呢？带着这个问题，在本文的下一个主角background-origin中解答。</small></p>
<p>关于background-clip上面已经介绍完了，但是在webkit内核的浏览器中还有一个关于background-clip好玩的扩展，就是可以给文本设置背景图片。通过设置background-clip:text，并配合其私有属性-webkit-text-fill-color: transparent来实现。<br><img src="/images/background/img4.png" alt="background-clip:text"><br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">width: 200px;</div><div class="line">-webkit-background-clip: text;</div><div class="line">-webkit-text-fill-color: transparent;</div><div class="line">font-size: 40px;</div><div class="line">font-weight: bold;</div><div class="line">line-height: 50px;</div><div class="line">text-align: center;</div></pre></td></tr></table></figure></p>
<p>webkit总是那么时尚潮流，再比如webkit的box-reflect也是其他浏览器实现起来很复杂的小特效。这些webkit的小特效在使用的时候注意兼容性的问题，在Safari、Chorme和最新版的Opera以及Edge上是没问题的，但是在IE和Firefox就完蛋了。</p>
<p><strong>background-clip使用小例子</strong><br>Facebook弹出窗口，边框带有透明并能显示底下的内容如下图所示：<br><img src="/images/background/img3.png" alt="Facebook弹出窗口"><br>平时我们制作这样的效果都是靠给弹出层的背景加上opacity属性，并设置一定的padding，但大家都知道opacity会直接影响到其子元素的效果。<br>现在我们完全可以使用background-clip把元素背景控制在padding或content区域内，这样一来，只需一个盒子。我们在这个盒子上加上<strong>透明边框</strong>，并配合background-clip把背景超过padding或content的边缘外的背景色直接裁剪掉,具体CSS代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.facebook &#123;</div><div class="line">	background: #3B5A98;</div><div class="line">	border: 20px solid rgba(134,134,134,0.8);</div><div class="line">	padding: 10px;</div><div class="line">	color: #fff;</div><div class="line">	text-align: center;</div><div class="line">	width: 150px;</div><div class="line">	height: 65px;</div><div class="line">	line-height: 65px;</div><div class="line">	-moz-border-radius: 15px;</div><div class="line">	-webkit-border-radius: 15px;</div><div class="line">	border-radius: 15px;</div><div class="line">	font: bold 25px Airal;</div><div class="line">	-moz-background-clip: padding;</div><div class="line">	-webkit-background-clip: padding-box;</div><div class="line">	-o-background-clip: padding-box;</div><div class="line">	background-clip: padding-box;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h1 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h1><p>origin：起源，原点的意思，通过它的翻译我们可以推断出它的作用是，规定背景的原点，或者说是规定背景在盒子模型中的起始位置（刚学习的时候我也是这样认为的）。<br>语法：</p>
<blockquote>
<p>background-origin: content-box || padding-box || border-box</p>
</blockquote>
<p>我们来看一下这几个取值的具体意思（暂时）：</p>
<ul>
<li>content-box：盒子模型的背景从content部分的左上角开始绘制。</li>
<li>padding-box：盒子模型的背景从padding部分的左上角开始绘制。<strong>默认值</strong></li>
<li>border-box：盒子模型的背景从border部分的左上角开始绘制。</li>
</ul>
<p>我们来看几张图片对比一下：<br><img src="/images/background/img5.png" alt="background-origin"><br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!--html--&gt;</div><div class="line">&lt;div class=&quot;div2 img&quot;&gt;origin：content-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div3 img&quot;&gt;origin：padding-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div4 img&quot;&gt;origin：border-box&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;!--css--&gt;</div><div class="line">.img&#123;</div><div class="line">	background: url(sourse/day16_img1.jpg) no-repeat;</div><div class="line">	color: red;</div><div class="line">&#125;</div><div class="line">.div2&#123;</div><div class="line">	background-origin: content-box;</div><div class="line">&#125;</div><div class="line">.div3&#123;</div><div class="line">	background-origin: padding-box;</div><div class="line">&#125;</div><div class="line">.div4&#123;</div><div class="line">	background-origin: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上面的图片背景，我们好像可以看出背景被background-origin限制绘制起点了，还有一点美中不足就是起点是限制了，但是好像终点并没有被限制，右下角任然进入了外层的盒子（比如background-origin：content-box，起点是从contentx-box的左上角开始绘制的，但是右下角明显进入了paddingBox和borderBox），这个问题不急，在下面解释（好熟悉的赶脚）。</p>
<p>我们再来看一下背景为颜色时候的样子：<br><img src="/images/background/img6.png" alt="background-origin"><br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!--html--&gt;</div><div class="line">&lt;div class=&quot;div2&quot;&gt;origin：content-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div3&quot;&gt;origin：padding-box&lt;/div&gt;</div><div class="line">&lt;div class=&quot;div4&quot;&gt;origin：border-box&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;!--css--&gt;</div><div class="line">.div2&#123;</div><div class="line">	background-origin: content-box;</div><div class="line">&#125;</div><div class="line">.div3&#123;</div><div class="line">	background-origin: padding-box;</div><div class="line">&#125;</div><div class="line">.div4&#123;</div><div class="line">	background-origin: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就不对了，什么鬼？怎么都一样，不是设置不同背景起点了吗?<br>这就是一开始我提到“刚学习的时候我也是这样认为的”，但是通过查资料发现，人家CCS3规定的background-origin是用来管<strong>图片起始绘制点</strong>的，根本没有颜色背景的事。<br>OK，问题解决。还记得我们在background-clip中.div9中添加的哪一个<code>background-origin:border-box</code>吗？现在应该知道它是干什么的了吧。<br>还是再解释一下吧，.div9那个盒子是用来测试background-clip对borderBox的裁剪作用，但是background-clip的默认属性为paddingBox，不设置一下就看不出上面的效果了，成这样了：<br><img src="/images/background/img7.png" alt="background"><br>看到这样的图，根本就无法说明background-clip的作用了。</p>
<p>但是通过这个例子我们可以发现一个问题，<strong>就是background-origin和background-clip是相互影响的，有时候你但设置其中一个属性，没有达到你想要的结果，可能就是另一个的默认属性（或者你自定义的）影响了。多多去实验就会发现很多好玩的东西</strong></p>
<p>是不是还有一个问题没解释，就是background-origin的这张图的右下角进入其他盒子的现象。<br><img src="/images/background/img5.png" alt="background-origin"><br>其实我觉着没必要解释了。</p>
<h1 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h1><p>在CSS3之前，我们在使用背景图片的时候会经常遇到下图中的两个问题：<br><img src="/images/background/img8.png" alt="background-size"><br>对于这种问题，background-size的出现就是一个福音，它可以让开发者随意改变引入的背景图片的大小。<br>语法：</p>
<blockquote>
<p>background: auto || length || percentage || cover || contain</p>
</blockquote>
<p>我们针对这几个属性在说明一下：</p>
<ul>
<li><p>auto：此值为<strong>默认值</strong>，保持背景图片的原始高度和宽度；</p>
</li>
<li><p>length：此值设置具体的值，可以改变背景图片的大小；</p>
</li>
<li><p>percentage：此值为百分值，可以是0％-100％之间任何值，但此值只能应用在块元素上，所设置百分值将使用背景图片大小根据所在元素的宽度的百分比来计算（个人认为这种说法有些问题）。</p>
</li>
<li><p>cover：此值是将图片放大，以适合铺满整个容器，这个主要运用在，当图片小于容器时，又无法使用background-repeat来实现时，我们就可以采用cover;将背景图片放大到适合容器的大小，但这种方法会使用背景图片失真；</p>
</li>
<li><p>contain：此值刚好与cover相反，其主要是将背景图片缩小，以适合铺满整个容器，这个主要运用在，当背景图片大于元素容器时，而又需要将背景图片全部显示出来，此时我们就可以使用contain将图片缩小到适合容器大小为止，这种方法同样会使用图片失真。</p>
</li>
<li><p><strong>当background-size取值为length和percentage时可以设置两个值，也可以设置一个值，当只取一个值时，第二个值相当于auto，但这里的auto并不会使背景图片的高度保持自己原始高度，而会与第一个值相同。</strong></p>
</li>
</ul>
<p>针对background-size已经有很详细的使用说明了，懒得做图片展示了，很好理解，自己去试试就好了。我想强调的是background-size的百分比取值，因为我发现他受background-origin的影响。</p>
<h1 id="background的origin影响size"><a href="#background的origin影响size" class="headerlink" title="background的origin影响size"></a>background的origin影响size</h1><p>按照上面对于background-size取百分比值的说法（网上大部分也这样认为，W3School说的更模糊），是根据图片所在元素的宽度的百分比来计算的，同时我们文章一开始也说明了盒子模型的总宽度（按标准盒模型）可以写成:</p>
<blockquote>
<p>width + paddingBox + borderBox + marginBox</p>
</blockquote>
<p>所以我们可以理解为background-size设置的百分比的值就是上面公式中的width的百分比，如果一个盒子的width固定，background-size固定，岂不是图片大小就固定了，像下图这样：<br><img src="/images/background/img10.png" alt="background-size"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!--html--&gt;</div><div class="line">&lt;div&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;!--css--&gt;</div><div class="line">div&#123;</div><div class="line">	width: 100px;</div><div class="line">	background: url(sourse/day16_img1.jpg) no-repeat;</div><div class="line">	background-size: 100%;</div><div class="line">	height: 100px;</div><div class="line">	padding: 20px;</div><div class="line">	border: 20px dotted #000;</div><div class="line">	margin: 20px;</div><div class="line">	display: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是，此时如果我们在设置一下background-origin（clip为默认值），情况就不一样了。</p>
<p><strong>background-origin: border-box:</strong><br><img src="/images/background/img10.png" alt="background-size"><br><strong>background-origin: content-box:</strong><br><img src="/images/background/img9.png" alt="background-size"><br>很明显图片的大小改变了，所以我认为，<strong>background-size百分比取值会受background-origin影响。<br>可能还有人会认为，我这是不是设置background-clip也会影响？回答是肯定的，只不过clip影响的是显示区域，图片大小并没有改变。</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上面的介绍，我们新认识了CSS3的三个属性<code>background-clip</code>、<code>background-origin</code>、<code>background-size</code>，同时我们发现了他们之间的相互影响。</p>
<ol>
<li>background-clip用来规定背景（颜色和图片）的展示区域（绘制区域）。</li>
<li>background-origin用来规定背景图片的起始绘制点。</li>
<li>background-size用来规定背景图片的大小。</li>
<li>background-origin会影响background-size的百分比取值。</li>
<li>背景属性可能会相互影响，出现神来之笔的效果，也可能让你抓狂。</li>
</ol>
<p>本文参考</p>
<blockquote>
<p><a href="http://www.w3cplus.com/content/css-background-origin" target="_blank" rel="external">http://www.w3cplus.com/content/css-background-origin</a><br><a href="http://www.w3cplus.com/content/css3-background-clip" target="_blank" rel="external">http://www.w3cplus.com/content/css3-background-clip</a><br><a href="http://www.w3cplus.com/content/css3-background-size" target="_blank" rel="external">http://www.w3cplus.com/content/css3-background-size</a><br><a href="http://www.w3school.com.cn/cssref/pr_background-size.asp" target="_blank" rel="external">http://www.w3school.com.cn/cssref/pr_background-size.asp</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用CSS开启硬件加速提高网站性能]]></title>
      <url>https://chping2125.github.io/2016/09/22/animation2/</url>
      <content type="html"><![CDATA[<p>你知道我们可以在浏览器中用css开启硬件加速，使GPU (Graphics Processing Unit) 发挥功能，从而让渲染的性能更好吗？</p>
<p>现在大多数电脑的显卡都支持硬件加速，因此，我们可以利用GPU的能力，在基于CPU运行的浏览器上，让我们的网站或应用的性能更好。</p>
<p>在这篇文章中，我们将会在桌面端和移动端上使用CSS硬件加速。<br><a id="more"></a></p>
<h1 id="在桌面端和移动端用CSS开启硬件加速"><a href="#在桌面端和移动端用CSS开启硬件加速" class="headerlink" title="在桌面端和移动端用CSS开启硬件加速"></a>在桌面端和移动端用CSS开启硬件加速</h1><p>想知道如何让CSS动画在浏览器上运行的很流畅吗？</p>
<p>CSS的<code>animations</code>、<code>transforms</code>以及<code>transitions</code>不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发该模式的CSS规则。</p>
<p>现在，像Chrome、FireFox、Safari、 IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的象征就是元素的3D变换。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.cube &#123;</div><div class="line">   -webkit-transform: translate3d(250px,250px,250px)</div><div class="line">   rotate3d(250px,250px,250px,-120deg)</div><div class="line">   scale3d(0.5, 0.5, 0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在某些情况下，我们并不想要对元素应用3D变换的效果，但是仍然想发挥GPU加速的优势。这时候我们可以使用个简单的CSS属性来”欺骗”浏览器，触发硬件加速。</p>
<p>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。非常的简单，用<code>transform: translateZ(0);</code>这个声明可以触发桌面端和移动端的GPU加速，这是一个非常有效的方式(包含了所有的浏览器前缀)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.cube &#123;</div><div class="line">   -webkit-transform: translateZ(0);</div><div class="line">   -moz-transform: translateZ(0);</div><div class="line">   -ms-transform: translateZ(0);</div><div class="line">   -o-transform: translateZ(0);</div><div class="line">   transform: translateZ(0);</div><div class="line">   /* Other transform properties here */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 Chrome和Safari中，当我们使用CSStransforms或者animations时可能会出现页面闪烁的效果，下面的代码可以修复这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.cube &#123;</div><div class="line">   -webkit-backface-visibility: hidden;</div><div class="line">   -moz-backface-visibility: hidden;</div><div class="line">   -ms-backface-visibility: hidden;</div><div class="line">   backface-visibility: hidden;</div><div class="line"></div><div class="line">   -webkit-perspective: 1000;</div><div class="line">   -moz-perspective: 1000;</div><div class="line">   -ms-perspective: 1000;</div><div class="line">   perspective: 1000;</div><div class="line">   /* Other transform properties here */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在webkit内核的浏览器中，另一个行之有效的方法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.cube &#123;</div><div class="line">   -webkit-transform: translate3d(0, 0, 0);</div><div class="line">   -moz-transform: translate3d(0, 0, 0);</div><div class="line">   -ms-transform: translate3d(0, 0, 0);</div><div class="line">   transform: translate3d(0, 0, 0);</div><div class="line">  /* Other transform properties here */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原生的移动端应用总是可以很好的运用GPU，这就是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>只对我们需要实现动画效果的元素应用以上方法，这能够提高2D渲染的性能，如果仅仅为了开启硬件加速而在任何元素上使用，那是不明智的。</p>
<p>如果你需要获得最好的性能体验，小心的使用这些方法。过度的使用GPU可能会导致严重的性能问题，因为它增加了内存的使用––这将会减少移动端设备的电池寿命。</p>
<p>你有在项目中使用过这些方法吗？如果有，请分享你的精彩案例吧。</p>
<blockquote>
<p><a href="http://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css" target="_blank" rel="external">原文地址：http://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[认识一下动画系统]]></title>
      <url>https://chping2125.github.io/2016/09/21/animation/</url>
      <content type="html"><![CDATA[<p>动画，顾名思义，就是能“动”的画。<br>人的眼睛对图像有短暂的记忆效应，所以当眼睛看到多张图片连续快速的切换时，就会被认为是一段连续播放的动画了。<br><a id="more"></a><br>比如，中国古代的“走马灯”，就是用的这个原理。<br>有些人还会在一个本子每页上手绘一些漫画，当快速翻页的时候，也会看到动画的效果，比如：<br><img src="/images/animation/img1.gif" alt="走马灯"></p>
<h1 id="计算机动画的实现方式"><a href="#计算机动画的实现方式" class="headerlink" title="计算机动画的实现方式"></a>计算机动画的实现方式</h1><p>动画是由一张张图片组成的，在计算机中，我们称每一张图片为<strong>一帧画面</strong>。</p>
<p>如果我们想实现这么一个动画：一个水杯放在桌子的左边，移动到右边，那么我们实际操作的，只是水杯。<br>所以动画的实现，只是对运动变化了的部分的处理。</p>
<blockquote>
<p>我们一般在计算机上用 FPS ( Frames Per Second) ，即 每秒的帧数 来表示动画的刷新速度，基于屏幕的刷新率等其他原因，在计算机上一般采用 60 FPS。<br>如果运动变化幅度较缓，减半到 30 FPS 时，我们肉眼也是可接受的。<br>较低的 FPS 会让我们有“卡顿”的感觉。</p>
</blockquote>
<h1 id="逐帧动画和关键帧动画"><a href="#逐帧动画和关键帧动画" class="headerlink" title="逐帧动画和关键帧动画"></a>逐帧动画和关键帧动画</h1><p>从帧速率区分动画的话，一般来说我们常见的动画都是属于<strong>关键帧动画(Keyframe Animation)</strong>，而<strong>逐帧动画(Frame By Frame)</strong>是一帧一幅画，从词语来说意味着全片每一秒都是<strong>标准24帧</strong>逐帧纯手的(在Flash的区分是逐帧动画与<strong>动作补间动画</strong>，还有分为<strong>全动画</strong>和<strong>半动画</strong>。)。</p>
<blockquote>
<p>简单介绍一下这几个概念，想详细了解，可以自取百度或者Google。<br><strong>动作补间动画</strong>：做flash动画时，在两个关键帧中间需要做“补间动画”，才能实现图画的运动；插入补间动画后两个关键帧之间的插补帧是由计算机自动运算而得到的。<br><strong>全动画</strong>：为追求画面完美和动作流畅，按照24帧／s制作动画。<br><strong>半动画</strong>：又名“有限动画”，为追求经济效益，以6帧／s制作动画。</p>
</blockquote>
<h2 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h2><p>逐帧动画是一种在连续的关键帧中分解动画动作，即在时间轴的每一帧上绘制不同内容并使之连续播放成动画的一种常见的动画形式。</p>
<p>类似于上面提到的手绘翻页方式，我们可以将这个水杯在每帧画面中的位置一一找出来，这样实现动画的方式就叫作逐帧动画，我们需要处理动画中的每一帧。<br>逐帧动画是最直接的，但要处理的帧数太多，所以实现过程是会麻烦。<br>计算机的工作就是来完成重复单调的工作的，所以，有些工作是可以考虑让计算机来完成的。</p>
<p>了解更多关于逐帧动画在电影和动漫上的应用可以<a href="https://zhuanlan.zhihu.com/p/19855108" target="_blank" rel="external">点这里</a></p>
<h2 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h2><p>上面的例子，可以变成一个涉及数学和物理的问题：一个杯子初始位置在左边，n秒后匀速运动到右边，那么在每 1/60 秒的时候，这个杯子的位置显然是可以计算出来的了。<br>所以，我们其实只需要指定一些 关键 信息就能让计算机自己计算出每一帧杯子的位置了：</p>
<ul>
<li>起始位置，比如一个坐标 (0,0)</li>
<li>结束位置，再比如一个坐标 (100,0)</li>
<li>动画总时间，比如 0.25 秒</li>
<li>匀速运动</li>
</ul>
<p>这种方式就称之为关键帧动画。即我们只需要给定几个关键帧的画面信息，关键帧与关键帧之间的过渡帧都将由计算机自动生成。</p>
<blockquote>
<p>这里说的 关键帧动画，是指的广义上的一种动画制作方式，并不仅指 CAKeyframeAnimation，CABasicAnimation的实现方式也属于 关键帧动画</p>
</blockquote>
<h2 id="两者的对比"><a href="#两者的对比" class="headerlink" title="两者的对比"></a>两者的对比</h2><p>关键帧动画的实现方式，只需要修改某个属性值就可以了，简单方便，但涉及的深层次内容较多，需要更多的理解和练习。</p>
<p>采用逐帧动画的实现方式，实现原理简单，但绘制动画的过程要复杂。如果动画过程处理的事情较多，也会带来较大的开销，就有可能造成动画帧数的下降，出现卡顿的现象，因此需要较多的测试和调试。<br>动画绘制的过程中，会要求较多的数学、物理等知识来计算中间态的数据。</p>
<p>但这两种方式也不是绝对分离开的。<br>关键帧动画实现方式，一般只能对系统实现了可动画的属性做动画处理，但其实也是允许实现自定义属性的动画处理的。<br>这就需要自己来实现系统中自动计算过渡帧的操作了，也就是逐帧实现动画的方式了。</p>
<h1 id="前端高性能动画"><a href="#前端高性能动画" class="headerlink" title="前端高性能动画"></a>前端高性能动画</h1><p>何为高性能动画？让人感觉流程顺滑即可。24fps的电影就能让人感觉到流畅，但是游戏却要60fps以上才能让人感觉到流畅。分析原因，我们得出如下结论：</p>
<ol>
<li>视频的每一帧记录的是一段时间段(1/24s)的信息，而游戏的每一帧都由显卡绘制，它只能生成一个时间点的信息;</li>
<li>视频的帧率是稳定的，而在系统负载不平稳时，显卡很难保证游戏帧率的稳定性；<br>前端动画与游戏的原理类似，我们设计高性能动画的基本思路就是<strong>提高帧率</strong>和<strong>稳定帧率</strong>。让我们首先一起了解一下浏览器渲染页面的基本过程。</li>
</ol>
<h2 id="理解浏览器渲染流水线"><a href="#理解浏览器渲染流水线" class="headerlink" title="理解浏览器渲染流水线"></a>理解浏览器渲染流水线</h2><p>渲染的基本流程是：扫描HTML文档结构、计算对应的CSS样式并生成RenderTree，然后根据RenderTree进行布局和绘制，基本过程示意图如下：<br><img src="/images/rander.png" alt="渲染主流程"><br>可以简单的描述为以下四部分：</p>
<ol>
<li>解析HTML以构建DOM树 </li>
<li>构建render树</li>
<li>布局render树 </li>
<li>绘制render树</li>
</ol>
<p>但实际上渲染的过程是这样的：</p>
<ol>
<li>在浏览器进行渲染的时候，渲染引擎首先会解析HTML代码，然后将标签转化为<strong>DOM树</strong>上的一个个对应节点（我们可以在chorme的Elements面板中查看到）。</li>
<li>接着，渲染引擎解析外部CSS文件及style标签中的样式信息。这些样式信息以及HTML中的可见性指令将被用来构建另一棵树—<strong>render树</strong>。Render树由一些包含有颜色和大小等属性的矩形组成，它们将被按照正确的顺序显示到屏幕上。</li>
<li>Render树构建好了之后，将会执行布局过程，它将确定每个节点在屏幕上的确切坐标。</li>
<li>然后就是绘制，即遍历render树，并使用UI后端层绘制每个节点。</li>
</ol>
<p>值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>
<p>另外我们应该知道，在执行某些CSS、JS操作时可能会造成浏览器的<a href="http://www.zhangxinxu.com/wordpress/2010/01/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%EF%BC%9Acss%E6%80%A7%E8%83%BD%E8%AE%A9javascript%E5%8F%98%E6%85%A2%EF%BC%9F/" target="_blank" rel="external">回流或者重绘</a>操作，导致浏览器重新渲染页面或者重新绘制页面的某一部分，这些都是很消耗性能的。所以我们在提高动画性能时要合理的考虑这些因素，尽量减少渲染或者重绘的次数。</p>
<h2 id="提高动画性能指标"><a href="#提高动画性能指标" class="headerlink" title="提高动画性能指标"></a>提高动画性能指标</h2><p>上文提到过，动画的性能指标有两个，帧率数和帧率稳定性。我们分别从动画实现，节点的处理，属性的选择等方面讨论如何提高这两个动画性能指标。</p>
<h3 id="选择稳定的实现方式"><a href="#选择稳定的实现方式" class="headerlink" title="选择稳定的实现方式"></a>选择稳定的实现方式</h3><p>css3动画使用起来非常简单，目前的浏览器支持率也不错，足以应对一般的交互需求，我们应该优先使用它。当浏览器不支持css3时，或动画场景过于复杂而仅凭css3无能为力时，就需要引入js来帮忙了。我们最常想到的js动画的实现方式，就是固定时间间隔修改元素的样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setInterval(function()&#123;</div><div class="line">    var anmationNode = document.getElementById(&apos;animation-node&apos;); </div><div class="line">    //定期修改节点的样式</div><div class="line">&#125;, 100);</div></pre></td></tr></table></figure></p>
<p>但这是一种非常粗暴的方式，其弱点是很明显的。浏览器的timer的触发时间点是不固定的，如果遇到比较长的同步任务，其触发时间点就会推迟，显然也就<strong>保证不了动画帧率的平稳性</strong>。HTML5为创建逐帧动画提供了一个新的API：<code>RequestAnimationFrame</code>，该方法在每次浏览器渲染时触发，其触发频率为60fps，我们可以通过这个函数来实现动画，而当动画中某些帧计算量太大无法在1/60s完成时，浏览器会将刷新评论降低到30fps，以保证帧率的稳定性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function step()&#123;</div><div class="line">    //修改节点样式</div><div class="line">    RequestAnimationFrame(step);</div><div class="line">&#125;</div><div class="line">RequestAnimationFrame(step);</div></pre></td></tr></table></figure></p>
<p>但是由于<code>RequestAnimationFrame</code>支持程度还不高(手机浏览器普遍不支持)，我们可以结合<code>RequestAnimationFrame</code>和<code>setInterval</code>实现一套逐渐增强和优雅降级的方案,下面是兼容各个浏览器的终极版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function getAnimationFrame() &#123;</div><div class="line">    if (window.requestAnimationFrame) &#123; </div><div class="line">    //较新浏览器</div><div class="line">        return &#123;</div><div class="line">            request: requestAnimationFrame,</div><div class="line">            cancel: cancelAnimationFrame,</div><div class="line">        &#125;</div><div class="line">    &#125; else if (window.mozRequestAnimationFrame &amp;&amp; window.mozCancelAnimationFrame) &#123;</div><div class="line">    //firfox浏览器</div><div class="line">        return &#123;</div><div class="line">            request: mozRequestAnimationFrame,</div><div class="line">            cancel: mozCancelAnimationFrame</div><div class="line">        &#125;</div><div class="line">    &#125; else if (window.webkitRequestAnimationFrame &amp;&amp; webkitRequestAnimationFrame(String)) &#123;</div><div class="line">        return &#123;</div><div class="line">            request: function(callback) &#123;</div><div class="line">                return: window.webkitRequestAnimationFrame(function() &#123;</div><div class="line">                    return callback(new Date - 0); </div><div class="line">                    //修正部分webkit版本下没有给callback传time参数的bug</div><div class="line">                &#125;);</div><div class="line">            &#125;,</div><div class="line">            cancel: window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">    	//用setInterval模拟requestAnimationFrame</div><div class="line">        var millisec = 25; //40fps;</div><div class="line">        var callbacks = [];</div><div class="line">        var id = 0,</div><div class="line">            cursor = 0;</div><div class="line">        var timerId = null;</div><div class="line"></div><div class="line">        function playAll() &#123;</div><div class="line">            var cloned = callbacks.slice(0);</div><div class="line">            cursor += callbacks.length;</div><div class="line">            callbacks.length = 0;</div><div class="line">            var hits = 0;</div><div class="line">            for (var i = 0, callback; callback = cloned[i++];) &#123;</div><div class="line">                if (callback !== &apos;cancelled&apos;) &#123;</div><div class="line">                    callback(new Data - 0);</div><div class="line">                    hits++;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            if (hits == cloned.length) &#123;</div><div class="line">                clearInterval(timerId);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        timerId = window.setInterval(playAll, millisec);</div><div class="line">        return &#123;</div><div class="line">            request: function(handler) &#123;</div><div class="line">                callbacks.push(handler);</div><div class="line">                return id++;</div><div class="line">            &#125;,</div><div class="line">            cancel: function() &#123;</div><div class="line">                callbacks[id - cursor] = &apos;cancelled&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为动画节点创建新的渲染层"><a href="#为动画节点创建新的渲染层" class="headerlink" title="为动画节点创建新的渲染层"></a>为动画节点创建新的渲染层</h3><p>通过将动画节点与文档中的其他节点隔离开来，可以有效的减少重新布局(relayout)和重新绘制(repaint)的面积，从而提高页面的整体性能。隔离动画节点与文档中的其他节点方法通常是为动画节点创建新的渲染层(render layer)。下面是创建渲染层的常用方法：</p>
<h4 id="使用3D变换"><a href="#使用3D变换" class="headerlink" title="使用3D变换"></a>使用3D变换</h4><p>大家一定经常看到网上的文章说使用<code>transform: translate3d(0, 0, 0)/translateZ(0)</code>(详细了解<a href="http://chping.website/2016/09/22/animation2/" target="_blank" rel="external">点击这里</a>)可以开启GPU加速，亲自试验以后发现其的确可以提高页面的渲染速度，我就曾经用它解决了一些低端机的闪烁问题。 那么其原理是什么呢？这种方式并非一定能够开启GPU加速。</p>
<p>W3C标准是这么说的。</p>
<blockquote>
<p>Three-dimensional transforms can result in transformation matrices with a non-zero Z component (where the Z axis projects out of the plane of the screen). This can result in an element rendering on a different plane than that of its containing block. This may affect the front-to-back rendering order of that element relative to other elements, as well as causing it to intersect with other elements.</p>
</blockquote>
<p>其主要意思就是<strong>3D变换会创建新的渲染层，而不是与其父节点在同一个渲染层中</strong>。在新的渲染层中修改节点不会干扰到其他节点，防止了对其他节点的重新布局(relayout)和重新绘制(repaint)，自然也就加快了页面的渲染速度。除了transform: translate3d(0, 0, 0)/translateZ(0)，我们还可以使用will-change。</p>
<h4 id="使用will-change"><a href="#使用will-change" class="headerlink" title="使用will-change"></a>使用will-change</h4><p>我们可以使用will-change让浏览器提前了解预期的元素变换，它允许浏览器提前做好适当的优化，使之最后能够快速和流畅的渲染。will-change: transform同样也会为节点创建新的渲染层。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.animation-element&#123;</div><div class="line">     will-change: transform;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="选择高效的动画属性"><a href="#选择高效的动画属性" class="headerlink" title="选择高效的动画属性"></a>选择高效的动画属性</h3><p>修改节点的大部分属性都会引起重新绘制，甚至是重新布局。而理想情况下，我们应避免重新绘制和重新布局。幸运的当仅仅修改<code>transfrom</code>属性或<code>opacity</code>属性，可以做到不重新绘制。具体的思路是：为需要创建动画的节点创建新的渲染层，并且在新渲染层中只修改<code>transform</code>和<code>opacity</code>属性。<strong>只有做到以上两点才可以避免重新布局和重新绘制，真正使用GPU加速。</strong></p>
<h3 id="避免引起多余的渲染"><a href="#避免引起多余的渲染" class="headerlink" title="避免引起多余的渲染"></a>避免引起多余的渲染</h3><p>我们在实现动画的过程中，经常需要获取某个元素的属性，然后对该属性做出修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function step()&#123;</div><div class="line">    var animationNode = doucment.getElementById(&apos;animation-node&apos;);</div><div class="line">    for(var i = 1; i &lt;= 20 ; i++)&#123;</div><div class="line">        animationNode.width = animationNode.width + 1；</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述的for循环语句将导致浏览器进行20次多余的渲染，严重影响页面性能。通常来讲JS对页面样式的多次修改只会在页面下次刷新时渲染一次，而通过DOM API获取样式时，会强制页面完成一次渲染以体现最新修改后的值。上述例子就是这样导致浏览器多次渲染的。而正确的写法应该是读写分离。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var animationNode = doucment.getElementById(&apos;animation-node&apos;);</div><div class="line">var initialWidth = animationNode.style.width;</div><div class="line">for(var i = 1; i &lt;= 20 ; i++)&#123;</div><div class="line">    initialWidth+=1；</div><div class="line">&#125;</div><div class="line">animationNode.style.width = initialWidth;</div></pre></td></tr></table></figure></p>
<p>当我们在复杂页面上实现动画是，常常由于疏忽导致页面多余的渲染。这是我们可以借助fastdom来隔离对真实DOM的操作，fastdom将对节点样式的读写批量缓存、一次执行，防止多余的渲染。</p>
<blockquote>
<p>参考资源</p>
<ol>
<li>简书作者/胖花花的<a href="http://www.jianshu.com/p/13c231b76594#" target="_blank" rel="external">解析 iOS 动画原理与实现</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19855108" target="_blank" rel="external">逐帧动画和关键帧动画</a></li>
<li><a href="http://www.ituring.com.cn/article/214754" target="_blank" rel="external">前端高性能动画最佳实践</a></li>
</ol>
<p>本文只是将网络上对动画系统和设计前端的动画方面做了简单的整合。<br>其中在<a href="http://www.ituring.com.cn/article/214754" target="_blank" rel="external">前端高性能动画最佳实践</a>一文中的尾部有几篇参考资料非常的好，对于理解前端动画有很好的帮助，推荐一下：</p>
<ol>
<li><a href="http://matrix.h5jun.com/slide/show?id=117#/" target="_blank" rel="external">前端动画原理与实现</a>，这篇文章通过PPT的方式介绍了前端动画，页面做的不错。</li>
<li><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="external">How browsers work</a>，这篇文章介绍了浏览器的工作原理和流程，对于想深入了解浏览器工作原理和流程的同学可以一试。</li>
<li><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering" target="_blank" rel="external">Javascript高性能动画与页面渲染</a>,这篇文章和<a href="http://www.ituring.com.cn/article/214754" target="_blank" rel="external">前端高性能动画最佳实践</a>一样，只不过是对于前端动画的另一个角度的解读，并且可能更详细。</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[认识一下流媒体这个概念]]></title>
      <url>https://chping2125.github.io/2016/09/20/streamMedia/</url>
      <content type="html"><![CDATA[<p>随着现代技术的发展，网络带给人们形式多样的信息，从第一张图片出现在网络上到如今各种形式的网络视频和三维动画，网络让人们的视听觉得到了很大的满足。然而在<strong>流媒体技术</strong>出现之前，人们必须要先下载这些多媒体内容到本地计算机，在漫长的等待之后（因为受限于带宽，下载通常要花上较长的时间），才可以看到或听到媒体传达的信息。令人欣慰的是，在<strong>流媒体技术</strong>出现之后，人们便无需再等待媒体完全下载完成了。<br><a id="more"></a><br>传统下载方式的时延很大，因为音视频文件一般都较大，需要的存储容量也较大，同时受到网络带宽的限制，下载一个文件很耗时，根据文件的大小，可能往往需要几分钟甚至几小时。这种方式不但浪费下载时间、硬盘空间，重要的是使用起来非常不方便。</p>
<p>流媒体技术出现后，人们能够“即点即看”了，多媒体文件一边被下载一边被播放，不仅使启动延时大大缩短，而且不需要太大的缓存容量，极大地减少了用户在线等待的时间，而且也提升了互动性。</p>
<h1 id="流媒体在传输中的问题"><a href="#流媒体在传输中的问题" class="headerlink" title="流媒体在传输中的问题"></a>流媒体在传输中的问题</h1><h2 id="技术方面解决的问题"><a href="#技术方面解决的问题" class="headerlink" title="技术方面解决的问题"></a>技术方面解决的问题</h2><p>在网上进行流媒体传输，所传输的文件必须制作成适合流媒体传输的流媒体格式文件。用通常格式存储的多媒体文件容量十分大，若要在现有的窄带网络上传输则需要花费十分长的时间，若遇网络繁忙，还将造成传输中断。另外，通常格式的流媒体也不能按流媒体传输协议进行传输。因此，对需要进行流媒体格式传输的文件应进行预处理，将文件压缩生成流媒体格式文件。</p>
<p>这里应注意两点：一是选用适当的压缩算法进行压缩，这样生成的文件容量较小。二是需要向文件中添加流式信息。</p>
<h2 id="传输方面需解决的问题"><a href="#传输方面需解决的问题" class="headerlink" title="传输方面需解决的问题"></a>传输方面需解决的问题</h2><p>流媒体的传输需要合适的传输协议，在internet上的文件传输大部分都是建立在TCP协议的基础上，也有一些是以ftp传输协议的方式进行传输，但采用这些传输协议都不能实现实时方式的传输。随着流媒体技术的深入研究，比较成熟的流媒体传输一般都是采用建立在UDP协议上的rtp/rtsp实时传输协议。</p>
<p>为何要在UDP协议而不在TCP协议上进行实时数据的传输呢？<br>这是因为UDP和TCP协议在实现数据传输时的可靠性有很大的区别:</p>
<ol>
<li>TCP协议中包含了专门的数据传送校验机制，当数据接受方收到数据后，将自动向发送方发出确认信息，发送方在接收到确认信息后才继续传送数据，否则将一直处于等待状态。</li>
<li>而UDP协议则不同，UDP协议本身并不能做任何校验。由此可以看出，TCP协议注重传输质量，而UDP协议则注重传输速度。因此，对于对传输质量要求不是很高，而对传输速度则有很高的要求的视音频流媒体文件来说，采用UDP协议则更合适。</li>
</ol>
<h2 id="传输过程中需要的支持"><a href="#传输过程中需要的支持" class="headerlink" title="传输过程中需要的支持"></a>传输过程中需要的支持</h2><p>因为internet是以包为单位进行异步传输的，因此多媒体数据在传输中要被分解成许多包，由于网络传输的不稳定性，各个包选择的路由不同，所以到达客户端的时间次序可能发生改变，甚至产生丢包的现象。为此，必须采用缓存技术来纠正由于数据到达次序发生改变而产生的混乱状况，利用缓存对到达的数据包进行正确排序，从而使视音频数据能连续正确地播放。<br>缓存中存储的是某一段时间内的数据，数据在缓存中存放的时间是暂时的，缓存中的数据也是动态的，不断更新的。流媒体在播放时不断读取缓存中的数据进行播放，播放完后该数据便被立即清除，新的数据将存入到缓存中。因此，在播放流媒体文件时并不需占用太大的缓存空间。</p>
<h2 id="播放方面需解决的问题"><a href="#播放方面需解决的问题" class="headerlink" title="播放方面需解决的问题"></a>播放方面需解决的问题</h2><p>流媒体播放需要浏览器的支持。通常情况下，浏览器是采用MIME来识别各种不同的简单文件格式，所有的Web浏览器都是基于HTTP协议，而HTTP协议都内建有MIME。所以Web浏览器能够通过HTTP协议中内建的MIME来标记Web上众多的多媒体文件格式，包括各种流媒体格式。</p>
<h1 id="流媒体传输的过程"><a href="#流媒体传输的过程" class="headerlink" title="流媒体传输的过程"></a>流媒体传输的过程</h1><ol>
<li>用户选择某一流媒体服务（比如：在线看电影）后，Web浏览器与Web服务器之间使用HTTP/TCP交换控制信息，以便把需要传输的实时数据从原始信息中检索出来；</li>
<li>然后客户机上的Web浏览器启动A/V Helper程序，使用HTTP从Web服务器检索相关参数对Helper程序初始化。这些参数可能包括目录信息、A/V数据的编码类型或与A/V检索相关的服务器地址。</li>
<li>A/V Helper程序及A/V服务器运行实时流控制协议（RTSP），以交换A/V传输所需的控制信息。与CD播放机或VCRs所提供的功能相似，RTSP提供了操纵播放、快进、快倒、暂停及录制等命令的方法。A/V服务器使用RTP/UDP协议将A/V数据传输给A/V客户程序（一般可认为客户程序等同于Helper程序），一旦A/V数据抵达客户端，A/V客户程序即可播放输出。</li>
</ol>
<p>需要说明的是，在流媒体传输中。使用RTP/UDP和RTSP/TCP两种不同的通信协议与A/V服务器建立联系，是为了能够把服务器的输出重定向到一个不同于运行A/V Helper程序所在客户机的目的地址。实现流媒体传输一般都需要专用服务器和播放器。</p>
<h1 id="流媒体分类"><a href="#流媒体分类" class="headerlink" title="流媒体分类"></a>流媒体分类</h1><p>流式传输技术又分两种，一种是<strong>顺序</strong>流式传输，另一种是<strong>实时</strong>流式传输。</p>
<p>顺序流式传输是顺序下载，在下载文件的同时用户可以观看，但是，用户的观看与服务器上的传输并不是同步进行的，用户是在一段延时后才能看到服务器上传出来的信息，或者说用户看到的总是服务器在若干时间以前传出来的信息。在这过程中，用户只能观看已下载的那部分，而不能要求跳到还未下载的部分。顺序流式传输比较适合高质量的短片段，因为它可以较好地保证节目播放的最终质量。它适合于在网站上发布的供用户点播的音视频节目。</p>
<p>在实时流式传输中，音视频信息可被实时观看到。在观看过程中用户可快进或后退以观看前面或后面的内容，但是在这种传输方式中，如果网络传输状况不理想，则收到的信号效果比较差。</p>
<h1 id="流媒体技术的音视频文件"><a href="#流媒体技术的音视频文件" class="headerlink" title="流媒体技术的音视频文件"></a>流媒体技术的音视频文件</h1><p>在运用流媒体技术时，音视频文件要采用相应的格式，不同格式的文件需要用不同的播放器软件来播放，所谓“一把钥匙开一把锁”。采用流媒体技术的音视频文件主要有三大“流派”。</p>
<h2 id="微软的ASF"><a href="#微软的ASF" class="headerlink" title="微软的ASF"></a>微软的ASF</h2><p>ASF（Advanced Stream Format）这类文件的后缀是.asf和.wmv，与它对应的播放器是微软公司的 “Media Player”。用户可以将图形、声音和动画数据组合成一个ASF格式的文件，也可以将其他格式的视频和音频转换为ASF格式，而且用户还可以通过声卡和视频捕获卡将诸如麦克风、录像机等外设的数据保存为ASF格式。</p>
<h2 id="RealMedia"><a href="#RealMedia" class="headerlink" title="RealMedia"></a>RealMedia</h2><p>RealMedia是RealNetworks公司的，它包括RealAudio、RealVideo和RealFlash三类文件，其中RealAudio用来传输接近CD音质的音频数据，RealVideo用来传输不间断的视频数据，RealFlash则是RealNetworks公司与Macromedia公司联合推出的一种高压缩比的动画格式，这类文件的后缀是.rm，文件对应的播放器是“RealPlayer”。</p>
<h2 id="QuickTime"><a href="#QuickTime" class="headerlink" title="QuickTime"></a>QuickTime</h2><p>QuickTime是苹果公司的，这类文件扩展名通常是 .mov，它所对应的播放器是“QuickTime。”</p>
<p>此外，MPEG、AVI、DVI、SWF等都是适用于流媒体技术的文件格式。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>流媒体技术 包含了从服务器构架到网络协议等一系列技术，目前这些技术还在不断发展和完善中，同时各运营商也正在探索合适的商业模式。尽管如此，流媒体技术转变了传统 互联网限于文本和图片的二维呆板的内容表现形式，是宽带应用的发展方向。同时流媒体能够广泛应用于VOD、远程教学、网络广告、交互视频游戏等，大大拓宽 服务范围，因此各电信运营商都看好流媒体业务，并希望能够以此带动宽带产业进入高速发展的时期。可以预见，流媒体业务将成为宽带网络上的主流信息业务。</p>
<blockquote>
<p>本文总结自<br><a href="http://www.cnblogs.com/robertfang/articles/1222598.html" target="_blank" rel="external">http://www.cnblogs.com/robertfang/articles/1222598.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SPDY基本认识]]></title>
      <url>https://chping2125.github.io/2016/09/18/spdy/</url>
      <content type="html"><![CDATA[<p>关于HTTP安全性的问题，我们可以使用HTTPS来解决。但是HTTP都发布十几年了，有些规则已经过时了，HTTP/1.1的规则在功能上完全可以开发一套新的协议来弥补，但是由于遵循HTTP协议的Web浏览器已经遍布全球，无法完全抛弃，只能在HTTP基础上不断的累加一些新的功能来满足需求。SPDY就是其中之一。<br><a id="more"></a></p>
<blockquote>
<p>想了解HTTP相关内容，可以查看一下<a href="http://chping.website/2016/09/18/http/" target="_blank" rel="external">HTTP基本认识</a><br>想了解HTTPS相关内容，可以查看一下<a href="http://chping.website/2016/09/18/https/" target="_blank" rel="external">HTTPS基本认识</a></p>
</blockquote>
<h1 id="SPDY的诞生"><a href="#SPDY的诞生" class="headerlink" title="SPDY的诞生"></a>SPDY的诞生</h1><p>SPDY（取自SPeeDY,发音同speedy）是Google在2010年发布的，其开发目标旨在解决HTTP的性能瓶颈，缩短Web页面的加载时间。</p>
<p><strong>SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。</strong>新协议的功能包括数据流的多路复用、请求优先级以及HTTP报头压缩等新机制。Google表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%。</p>
<p>SPDY出现以后很多著名的互联网公司，例如百度、淘宝、UPYUN 都在自己的网站或 APP 中采用了 SPDY 系列协议，因为它对性能的提升是显而易见的。主流的浏览器（谷歌、火狐、Opera）也都早已经支持 SPDY，它已经成为了工业标准（其实现在的情况不是这样了，留个悬念后面说），HTTP Working-Group 最终决定以 SPDY/2 为基础，开发 HTTP/2。</p>
<p>SPDY以会话的形式加入，为了安全，它强制性使用SSL/TLS，控制对数据的流动，但还是采用HTTP建立通信连接。<br><img src="/images/http/img5.png" alt="spdy"></p>
<h1 id="SPDY进阶"><a href="#SPDY进阶" class="headerlink" title="SPDY进阶"></a>SPDY进阶</h1><p>前面简单说了一下SPDY的历史和发展，那么我们首先来看一下HTTP到底有哪些瓶颈，和引入SPDY的必要性。</p>
<h2 id="HTTP的瓶颈"><a href="#HTTP的瓶颈" class="headerlink" title="HTTP的瓶颈"></a>HTTP的瓶颈</h2><h3 id="请求受限制"><a href="#请求受限制" class="headerlink" title="请求受限制"></a>请求受限制</h3><p>首先来说最初的HTTP/1.0的时候，一次TCP的链接上只能发送一个HTTP请求，导致HTTP传输的效率特别低。</p>
<p>好在HTTP/1.1的时候，引入了持久链接和管道机制，使得HTTP的传输效率得到了很大的提升（详细和可查看<a href="">HTTP基本认识</a>）。持久链接满足了一条TCP链接可以发送多条HTTP请求的问题，但是每次HTTP请求必须等上一次HTTP响应了以后才能发送新的一条HTTP请求。管道机制实现了在持久链接的基础上<strong>同时</strong>发送多条HTTP请求的机制，但是响应的时候必须按照顺序来响应（如下图）。<br><img src="/images/http/img2.png" alt="http持久链接"><br><img src="/images/http/img3.png" alt="http管道机制"></p>
<h3 id="请求发起方必须是客户端"><a href="#请求发起方必须是客户端" class="headerlink" title="请求发起方必须是客户端"></a>请求发起方必须是客户端</h3><p>HTTP/1.1之前的HTTP请求的只能有客户端发起，服务端返回响应。这种模式导致服务端不能主动发送信息给客户端，所以一些像股票之类的要求时效性的信息无法及时推送到客户端。当然人们研究出了轮训、长轮询、流等解决方案实现，其中著名的就是Comet技术。但是它也存在问题，不是本文重点，就做详细描述了。</p>
<h3 id="请求-响应首部未经过压缩"><a href="#请求-响应首部未经过压缩" class="headerlink" title="请求/响应首部未经过压缩"></a>请求/响应首部未经过压缩</h3><p>HTTP请求或者响应首部每次都要发送一些相关信息，但是HTTP/1.1之前每次HTTP请求都要重复发送这些信息，这样就有些浪费带宽了，而且现在首部信息越来越多，这个问题就更严重了。</p>
<h3 id="任意选择数据压缩格式"><a href="#任意选择数据压缩格式" class="headerlink" title="任意选择数据压缩格式"></a>任意选择数据压缩格式</h3><p>HTTP/1.0中就提出了Content-Encoding字段来压缩数据，但是可任意选择数据压缩格式，非强制压缩发送。</p>
<p>针对以上HTTP的瓶颈，Google在2010年发布了SPDY。</p>
<h2 id="SPDY基本功能"><a href="#SPDY基本功能" class="headerlink" title="SPDY基本功能"></a>SPDY基本功能</h2><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>通过单一的TCP链接，可以无限制处理多个HTTP请求，所有请求的处理都在一条TCP连接上完成，因此TCP的处理效率得到提高。</p>
<h3 id="赋予请求优先级"><a href="#赋予请求优先级" class="headerlink" title="赋予请求优先级"></a>赋予请求优先级</h3><p>SPDY不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。</p>
<h3 id="压缩HTTP首部"><a href="#压缩HTTP首部" class="headerlink" title="压缩HTTP首部"></a>压缩HTTP首部</h3><p>压缩HTTP请求和响应首部。这样一来，通信产生的数据包数量和发送的字节数就更少了。</p>
<h3 id="推送功能"><a href="#推送功能" class="headerlink" title="推送功能"></a>推送功能</h3><p>支持服务器主动向客户端推送数据的功能。这样服务器可直接发送数据，而不必等待客户端的请求了。</p>
<h3 id="服务器提示功能"><a href="#服务器提示功能" class="headerlink" title="服务器提示功能"></a>服务器提示功能</h3><p>服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>前面说了这么多SPDY的优点，但是</p>
<blockquote>
<p>谷歌计划于 2016 年初在 Chrome 中移除 SPDY。它还将移除对某些基于 SPDY 的 TLS 扩展。谷歌预计将在未来几周内，为 Chrome 40 添加 HTTP/2 协议支持。</p>
</blockquote>
<p>所以现在你可以去直接学习HTTP/2了，好在HTTP Working-Group 最终决定以 SPDY/2 为基础，开发 HTTP/2。</p>
<blockquote>
<p>本文借鉴资料：</p>
<ol>
<li>阮一峰的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">HTTP 协议入门</a></li>
<li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="external">《图解HTTTP》</a></li>
<li><a href="https://book.douban.com/subject/10608238/" target="_blank" rel="external">《HTML5程序设计》(第二版)</a></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTPS基本认识]]></title>
      <url>https://chping2125.github.io/2016/09/18/https/</url>
      <content type="html"><![CDATA[<p>HTTP协议中有可能存在信息窃听或者身份伪装等安全问题，使用HTTPS通信机制可以有效地防止这些问题。接下来简单的记录一下自己对于HTTPS工作流程的一个认识。<br><a id="more"></a></p>
<blockquote>
<p>想了解HTTP相关内容，可以查看一下<a href="http://chping.website/2016/09/18/http/" target="_blank" rel="external">HTTP基本认识</a></p>
</blockquote>
<h1 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h1><p>我们都知道HTTP有相当优秀和方便的一面，然后HTTP并非只有好的一面，事物皆有两面性，它也有不足之处。<br><strong>HTTP主要不足</strong></p>
<ol>
<li><p>通信使用明文（不加密），内容可能被窃听。</p>
</li>
<li><p>不验证通信双方的身份，因此可能遭遇伪装。</p>
</li>
<li><p>无法证明报文的完整性，所以有可能已被篡改。</p>
</li>
</ol>
<p>其实除此之外，HTTP本身还有很多缺点。</p>
<h2 id="HTTP的缺点–明文通信"><a href="#HTTP的缺点–明文通信" class="headerlink" title="HTTP的缺点–明文通信"></a>HTTP的缺点–明文通信</h2><p>由于HTTP本身不具备加密的功能，所以无法做到对通信整体（使用HTTP协议通信的请求和响应的内容）进行加密，即HTTP报文使用明文（指未经过加密的报文）方式发送。这样就导致有可能报文在发送过程中被窃听的风险存在。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>针对明文通信的问题，有两种解决方案。一种是内容加密，一种是通信加密。<br><strong>通信加密</strong><br>HTTP协议中没有加密机制，但可以通过和SSL/TLS的组合使用，加密HTTP的通信过程（稍后详细说明）。</p>
<p><strong>补充：SSL/TLS</strong><br>为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，SSL是表示层的一个加密/解密协议。网景公司开发过SSL3.0之前的版本，目前主导权已转移到IETF（Internet 工程任务组）手中，IETF以SSL3.0位基准，后又制定了TLS1.0、TLS1.1、TLS1.2，实际上我们现在的HTTPS都是用的TLS协议，但是由于SSL出现的时间比较早，并且依旧被现在浏览器所支持，因此SSL依然是HTTPS的代名词，但无论是TLS还是SSL都是上个世纪的事情，SSL最后一个版本是3.0，今后TLS将会继承SSL优良血统继续为我们进行加密服务。</p>
<p><strong>内容加密</strong><br>既然HTTP协议中没有加密机制，那么就对HTTP协议传输的内容本身加密。这样就要求要在客户端和服务端同时具备加密和解密的机制，由于它不同于SSL/TLS将整个通信线路加密处理，所以任存在被篡改的风险（稍后说明）。</p>
<h2 id="HTTP的缺点–不验证身份"><a href="#HTTP的缺点–不验证身份" class="headerlink" title="HTTP的缺点–不验证身份"></a>HTTP的缺点–不验证身份</h2><p>HTTP协议中的请求和响应不会对通信方进行确认。也就是说存在“服务器是否就是发送请求中URI真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题。</p>
<h3 id="不验证身份的问题"><a href="#不验证身份的问题" class="headerlink" title="不验证身份的问题"></a>不验证身份的问题</h3><ol>
<li><p>无法确定请求发送至目标的web服务器是否是按真实意图返回响应的那台服务器。有可能伪造web服务器。</p>
</li>
<li><p>无法确定响应返回到的客户端是否是按正式意图接受响应的那个客户端。有可能已伪造。</p>
</li>
<li><p>无法确定正在通信的对方是否具备权限。因为某些web服务器上保存着重要的信息，只能发给特定用户通信权限。</p>
</li>
<li><p>无法判定请求时来自何方、出自何手。</p>
</li>
<li><p>即时是无意义的请求也会照单全收。（DoS攻击）</p>
</li>
</ol>
<h3 id="解决方案：证书机制"><a href="#解决方案：证书机制" class="headerlink" title="解决方案：证书机制"></a>解决方案：证书机制</h3><p>虽然使用HTTP协议无法确定通信方，但如果使用SSL则可以实现。SSL不但提供了加密处理，而且还使用了一种被称为证书的手段，用于确定通信方。</p>
<p>证书是由值得信赖的第三方机构颁发，用以证明服务器和客户端是真实存在的。证书伪造是异常困难的。</p>
<h2 id="HTTP的缺点–无法确定报文的完整性"><a href="#HTTP的缺点–无法确定报文的完整性" class="headerlink" title="HTTP的缺点–无法确定报文的完整性"></a>HTTP的缺点–无法确定报文的完整性</h2><p>由于HTTP协议无法证明通信的报文完整性，因此，在请求或者响应送出之后直到对方接受之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获悉（像这样，请求或响应在传输过程中，遭攻击者拦截并篡改内容的攻击方式称为中间人攻击）。</p>
<p>虽然有使用HTTP协议确定报文完整性的方法，但事实上并不便捷、可靠。其中常用的MD5和SHA-1等散列值校检的方法来确认文件的数字签名。但是MD5和SHA-1本身如果被改写就不行了。所以最终的解决方案就是HTTPS使用SSL提供的认证和加密处理及摘要功能来解决这个问题。</p>
<h1 id="HTTPS出现"><a href="#HTTPS出现" class="headerlink" title="HTTPS出现"></a>HTTPS出现</h1><p>通过前面的介绍，我们可以得出以下几个结论：</p>
<blockquote>
<p><strong>1. HTTPS = HTTP + 加密 + 认证 + 完整性保护</strong><br><strong>2. HTTPS是身披SSL/TLS外壳的HTTP</strong></p>
</blockquote>
<p>原先的HTTP是http协议和tcp协议合作。现在的HTTPS是http协议先和ssl协议合作，ssl在和tcp协议合作。那就有一个问题出现了“他们是怎样合作的呢？”。</p>
<h2 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h2><p>介绍HTTPS的工作流程前需要先介绍两种加密方法。</p>
<p>公开密钥加密（非对称密钥加密）：加密和解密两个算法，前者公开，又称为公开密钥；后者保密，又称为私有密钥。<br>共享密钥加密（对称密钥加密）：加密和解密用听一个算法。</p>
<p>SSL就是使用的公开密钥加密对通信线路进行加密。</p>
<p><strong>两种加密方式的区别</strong></p>
<ol>
<li><p>两种加密都得把密钥发送给另一方才能进行加密解密通信。—&gt;（密钥咋安全的传给另一方，不被窃听或篡改？）</p>
</li>
<li><p>公开密钥加密比共享密钥加密更加的复杂，所以消耗CPU和内存要更加大，导致加密/解密速度也比较慢。</p>
</li>
</ol>
<p>好的，介绍完两种加密解密算法，咱们再来看一下HTTPS是怎样工作的。</p>
<h2 id="HTTPS的加密技术"><a href="#HTTPS的加密技术" class="headerlink" title="HTTPS的加密技术"></a>HTTPS的加密技术</h2><p><strong>HTTPS采用的是SSL的公开密钥加密和共享密钥加密两者并用的混合加密机制。</strong></p>
<p>HTTPS充分利用两种加密算法的各自优势，将两种方法组合起来用于通信。在交换密钥阶段使用公开密钥加密方式，建立安全的通信线路，然后将共享密钥加密的密钥传给另一方，接下来就可以使用简单，快速的共享密钥加密了。<br><img src="/images/http/img6.png" alt="https"></p>
<p>到目前为止我们已经知道了，HTTPS结合多种加密算法进行混合加密通信，但是遗憾的是公开密钥加密还有一个问题存在：</p>
<blockquote>
<p>使用公开密钥加密的时候怎样保证此公开密钥是正确的呢？比如：正准备和某服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输工程中，正真的密钥已经被攻击者替换掉了。</p>
</blockquote>
<p>为了解决这个问题，可以使用由数字证书认证机构和其他相关机关颁发的公开密钥证书。</p>
<h2 id="HTTPS的通信郭晨"><a href="#HTTPS的通信郭晨" class="headerlink" title="HTTPS的通信郭晨"></a>HTTPS的通信郭晨</h2><p>于是现在我们可以看一下整个HTTPS的通信过程了：</p>
<ol>
<li>浏览器将自己支持的一套加密规则发送给网站服务器（通过公开密钥加密的方式）。</li>
<li>网站服务器从中选出一组加密算法与HASH算法（也是一种加密算法，如前面提及过的MD5，SHA1等），并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公开密钥，以及证书的颁发机构等信息。</li>
<li>获得网站证书之后浏览器要做以下工作：<br> a) 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。<br> b) 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。<br> c) 使用约定好的HASH计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站服务器。</li>
<li>网站接收浏览器发来的数据之后要做以下的操作：<br> a) 使用自己的私有密钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。<br> b) 使用密码加密一段握手消息，发送给浏览器。</li>
<li>浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用共享加密算法进行加密。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>只是大概的介绍了一下HTTPS的通信流程，并没有针对每个技术点进行展开介绍，想详细了解的可以参照本文借鉴的相关资料和推荐资料。</p>
<blockquote>
<p>本文借鉴资料：</p>
<ol>
<li>阮一峰的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">HTTP 协议入门</a></li>
<li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="external">《图解HTTTP》</a></li>
<li><a href="https://book.douban.com/subject/10608238/" target="_blank" rel="external">《HTML5程序设计》(第二版)</a></li>
<li><a href="http://www.guokr.com/post/114121/" target="_blank" rel="external">HTTPS那些事（一）HTTPS原理</a></li>
</ol>
<p>推荐阅读：</p>
<ol>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">SSL/TLS协议运行机制的概述</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html" target="_blank" rel="external">HTTPS的七个误解（译文）</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html" target="_blank" rel="external">HTTPS 升级指南</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/09/ssl-latency.html" target="_blank" rel="external">SSL延迟有多大？</a></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP基本认识]]></title>
      <url>https://chping2125.github.io/2016/09/18/http/</url>
      <content type="html"><![CDATA[<p>HTTP（HyperText Transfer  Protocol，超文本传输协议又叫超文本转移协议）协议是用来完成从客户端到服务器等一系列运行流程的协议，Web是建立在HTTP协议上通信的。<br><a id="more"></a><br><img src="/images/http/404.png" alt="404"></p>
<h1 id="HTTP的诞生"><a href="#HTTP的诞生" class="headerlink" title="HTTP的诞生"></a>HTTP的诞生</h1><p>早期的互联网（20世纪80年代末，90年代初）是少数人的，那时候人们想要实现一种远隔两地的研究员共享知识的设想，所以相继提出了3项（到目前为止）WWW构建技术：用SGML（Standard Generalized Markup Language,标准通用标记语言）作为页面的文本标记语言的HTML、作为文档传递协议的HTTP、指定文档所在地址的URL。<br><small>注：www现在统称web。</small><br>众所周知上世纪90年代初是互联网发展的高发期，java、JavaScript、HTML、HTTP等语言和规范的诞生，浏览器大战等等一系列事件好像都是那个时代发生的。而我们的HTTP协议也是在那个时代诞生的。</p>
<h1 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h1><p>HTTP于1990年问世，那时HTTP还没有正式的被标准化，HTTP/1.0还没有发布，所以我们称1.0之前的那个版本为0.9版。<br>该版本很简单，只有一个GET命令，返回数据只能是HTML。</p>
<h1 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h1><p>1996年5月，HTTP/1.0 版本发布，内容大大增加。</p>
<ol>
<li>任何格式的内容都可以发送。这使得互联网不仅可以传输文字，还能传输图像、视频、二进制文件。这为互联网的大发展奠定了基础。</li>
<li>除了GET命令，还引入了POST/PUT/HEAD/DELETE命令，丰富了浏览器与服务器的互动手段。</li>
<li>HTTP请求和回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。</li>
<li>其他的新增功能还包括状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等。</li>
</ol>
<h2 id="请求格式的改变"><a href="#请求格式的改变" class="headerlink" title="请求格式的改变"></a>请求格式的改变</h2><p>HTTP/0.9时的GET请求：<br><img src="/images/http/http0.9_get.png" alt="http/0.9 GET" style="margin-left:0"><br>HTTP/1.0时的GET请求：<br><img src="/images/http/http1.0_get.png" alt="http/1.0 GET" style="margin-left:0"></p>
<h2 id="响应格式的改变"><a href="#响应格式的改变" class="headerlink" title="响应格式的改变"></a>响应格式的改变</h2><p>HTTP/0.9时的响应：<br><img src="/images/http/response0.9.png" alt="http/0.9 GET" style="margin-left:0"><br>HTTP/1.0时的响应：<br><img src="/images/http/response1.0.png" alt="http/1.0 GET" style="margin-left:0"></p>
<h2 id="Content-Type字段"><a href="#Content-Type字段" class="headerlink" title="Content-Type字段"></a>Content-Type字段</h2><p>关于字符的编码，HTTP/1.0版规定，头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式，这就是Content-Type字段的作用。</p>
<p><strong>MIME Type</strong></p>
<blockquote>
<p>text/plain<br>text/html<br>text/css<br>image/jpeg<br>image/png<br>image/svg+xml<br>audio/mp4<br>video/mp4<br>application/javascript<br>application/pdf<br>application/zip<br>application/atom+xml</p>
</blockquote>
<p>上面的Content-Type类型总称为MIME type，每个值包括一级类型和二级类型，之间用斜杠分隔。</p>
<p>除了预定义的类型，厂商也可以自定义类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">application/vnd.debian.binary-package</div></pre></td></tr></table></figure></p>
<p>上面的类型表明，发送的是Debian系统的二进制数据包。</p>
<p>MIME type还可以在尾部使用分号，添加参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type: text/html; charset=utf-8</div></pre></td></tr></table></figure></p>
<p>上面的类型表明，发送的是网页，而且编码是UTF-8。</p>
<p>客户端请求的时候，可以使用Accept字段声明自己可以接受哪些数据格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept: */*</div></pre></td></tr></table></figure></p>
<p>上面代码中，客户端声明自己可以接受任何格式的数据。</p>
<h2 id="Content-Encoding字段"><a href="#Content-Encoding字段" class="headerlink" title="Content-Encoding字段"></a>Content-Encoding字段</h2><p>由于发送的数据可以是任何格式，因此可以把数据压缩后再发送。Content-Encoding字段说明数据的压缩方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Content-Encoding: gzip </div><div class="line">Content-Encoding: compress</div><div class="line">Content-Encoding: deflate</div></pre></td></tr></table></figure></p>
<p>客户端在请求时，用Accept-Encoding字段说明自己可以接受哪些压缩方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept-Encoding: gzip, deflate</div></pre></td></tr></table></figure></p>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。借助状态码，用户可以知道服务器端是否正确处理了请求。<br>状态码如200 OK，以3位数字和原因短句组成。<br>其中数字中的第一位指定了响应类别，后两位无分类。</p>
<p><strong>状态码类别：</strong><br>1xx：接受的请求正在处理。<br>2xx：请求正常处理。<br>3xx：需要进行附加操作以完成请求。<br>4xx：服务器无法处理请求。<br>5xx：服务器处理请求出错。</p>
<h3 id="2XX"><a href="#2XX" class="headerlink" title="2XX"></a>2XX</h3><p><strong>200 OK</strong>：正常处理请求。</p>
<p><strong>204 No Content</strong>：请求正常处理，但是没有任何资源返回。</p>
<p><strong>206 Partial Content</strong>：请求资源的某一部分。</p>
<h3 id="3XX"><a href="#3XX" class="headerlink" title="3XX"></a>3XX</h3><p><strong>301 Move Permanently</strong>：永久性重定向。</p>
<p><strong>302 Found</strong>：临时性重定向。</p>
<p><strong>303 See Other</strong>：请求对应的资源存在着另一个请求URI，应使用GET方法定向请求资源。303状态码和302状态码有着相同功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。</p>
<p><strong>304 Not Modified</strong>：客户端发送附带条件的请求（指采用GET方法的请求报文中包含if-Match,if-Modified-Since,if-Node-Match,if-Range,if-Unmodified-Since 中的任一首部）时，服务器准许访问，但是请求条件不满足，直接返回304 Not Modified(服务端资源未改变，可直接使用客户端未过期的缓存)。304状态码返回时，不包含任何响应的主体部分。304虽然被划分在3XX类别中，但是和重定向没有关系。</p>
<p><strong>307 Temporary Redirect</strong>：临时重定向，与302的区别就是，302标准禁止POST转为GET，但是大家不遵守。307严格按标准POST。</p>
<h3 id="4XX"><a href="#4XX" class="headerlink" title="4XX"></a>4XX</h3><p><strong>400 Bad Request</strong>：请求报文中存在语法错误。</p>
<p><strong>401 Unauthorized</strong>：请求需要HTTP认证。<br><img src="/images/http/request402.png" alt="http/1.0 GET"><br><small style="color:#989898">上图为使用 Visual SVN 在浏览器中弹出的认证框。</small></p>
<p><strong>403 Forbidden</strong>：请求被拒绝，服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样用户就可以看到了。未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源IP地址试图访问）等列举的情况都可能是发生403的原因。</p>
<p><strong>404 Not Found</strong>：没有在服务器上找到该资源，一般为url书写错误或者就是没有该资源。</p>
<h3 id="5XX"><a href="#5XX" class="headerlink" title="5XX"></a>5XX</h3><p>500 Internet Server Error：服务端在执行请求时发生了错误，代码有问题。</p>
<p>503 Service Unavailable：服务器暂时处于超负载或正在进行停机维护。</p>
<p style="color:red;">注意：1.对于处理响应时的行为，每种浏览器有可能出现的不同的情况。<br><br>2.以上关于状态码不确定是不是全是1.0版本的，可能有些为1.1版本的。</p>

<h2 id="HTTP-1-0的缺点"><a href="#HTTP-1-0的缺点" class="headerlink" title="HTTP/1.0的缺点"></a>HTTP/1.0的缺点</h2><p>HTTP/1.0 版的主要缺点是，每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。<br>TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（slow start）。所以，HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。<br>为了解决这个问题，有些浏览器在请求时，用了一个非标准的Connection字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure></p>
<p>这个字段要求服务器不要关闭TCP连接，以便其他请求复用。服务器同样回应这个字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connection: keep-alive</div></pre></td></tr></table></figure></p>
<p>一个可以复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。</p>
<h1 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h1><p>1997年1月，HTTP/1.1 版本发布，只比 1.0 版本晚了半年。它进一步完善了HTTP 协议，一直用到了20年后的今天，直到现在还是最流行的版本。<br>相比HTTP/1.0，1.1版本引入了持久链接、管道机制、Content-Length 字段、分块传输编码、新增了OPTIONS/TRACE/CONNECT命令。</p>
<h2 id="持久链接"><a href="#持久链接" class="headerlink" title="持久链接"></a>持久链接</h2><p>HTTP/1.1 版的最大变化，就是引入了持久连接（persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明<code>Connection: keep-alive</code>客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在最后一个请求时，发送Connection: close，明确要求服务器关闭TCP连接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connection: close</div></pre></td></tr></table></figure></p>
<p>目前，对于同一个域名，大多数浏览器允许同时建立<strong>6</strong>个持久连接。</p>
<p><strong>补充：浏览器最大并发限制数</strong><br>大部分浏览器允许同域名下最大的并发数量是6个（这可能在前端优化中涉及到），所以我们可以通过<strong>多域名缓存</strong>的方式来突破浏览器同域名最大并发限制数量的限制来做前端优化。<br><strong>多域名缓存的其他优点：</strong></p>
<ol>
<li>CDN缓存更加方便</li>
<li>突破浏览器并发限制</li>
<li>节约Cookie的带宽</li>
<li>防止不必要的安全问题</li>
<li>解决主机域名连接数，优化页面响应速度</li>
</ol>
<p>用图来直观的表示一下HTTP/1.1的持久链接和没有持久链接的HTTP协议:<br><img src="/images/http/img1.png" alt="http无持久链接"><br><img src="/images/http/img2.png" alt="http持久链接"></p>
<h2 id="管道机制"><a href="#管道机制" class="headerlink" title="管道机制"></a>管道机制</h2><p>HTTP/1.1 版还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。<br>举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，先发送A请求，然后等待服务器做出回应，收到后再发出B请求。管道机制则是允许浏览器同时发出A请求和B请求，但是服务器还是<strong>按照顺序</strong>，先回应A请求，完成后再回应B请求。<br><img src="/images/http/img3.png" alt="http管道机制"><br>一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的。这就是Content-length字段的作用，声明本次回应的数据长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Length: 3495</div></pre></td></tr></table></figure></p>
<p>上面代码告诉浏览器，本次回应的长度是3495个字节，后面的字节就属于下一个回应了。<br>在HTTP/1.0版中，Content-Length字段不是必需的，因为浏览器发现服务器关闭了TCP连接，就表明收到的数据包已经全了。</p>
<h2 id="分块传输编码"><a href="#分块传输编码" class="headerlink" title="分块传输编码"></a>分块传输编码</h2><p>使用Content-Length字段的前提条件是，服务器发送回应之前，必须知道回应的数据长度。<br>对于一些很耗时的动态操作来说，这意味着，服务器要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用”流模式”（stream）取代”缓存模式”（buffer）。<br>因此，1.1版规定可以不使用Content-Length字段，而使用“分块传输编码”（chunked transfer encoding）。只要请求或回应的头信息有Transfer-Encoding字段，就表明回应将由数量未定的数据块组成。<br>Transfer-Encoding: chunked 每个非空的数据块之前，会有一个16进制的数值，表示这个块的长度。最后是一个大小为0的块，就表示本次回应的数据发送完了。</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP是一种无状态的协议 。<br>无状态的优点：</p>
<ol>
<li>减少服务器的CPU内存资源的消耗。</li>
<li>使得HTTP协议本身是非常简单的，被广泛应用。</li>
</ol>
<p>但是有时是需要保存状态的，比如登录认证的web页面，如果没有状态保存，那么每一次跳转页面岂不是都要登录或者通过请求报文中附加参数来管理会话。所以为了实现期望保存状态的功能，于是引入了Cookie技术。当然Cookie也不一定只保存会话的状态，也可以保存一些其他的数据大小比较小的信息（话外：现在Cookie也令人各种诟病，于是Web Strong就应运而生了）。</p>
<p>Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。</p>
<p><strong>Cookie保存状态流程：</strong><br>Cookie会根据服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存cookie。当下次客户端在往该服务器发送请求时，客户端会自动请求报文中加入的cookie值后发送出去。</p>
<p>服务器端发现客户端发送过来的cookie后，会去检查究竟是从哪一个客户端发送来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>HTTP/1.1版还新增了许多动词方法： OPTIONS、TRACE、CONNECT。<br>另外，客户端请求的头信息新增了Host字段，用来指定服务器的域名。<br><img src="/images/http/img4.png" alt="http/1.0 GET" style="margin-left:0"><br>有了Host字段，就可以将请求发往同一台服务器上的不同网站，为虚拟主机的兴起打下了基础。</p>
<h2 id="HTTP-1-1的缺点"><a href="#HTTP-1-1的缺点" class="headerlink" title="HTTP/1.1的缺点"></a>HTTP/1.1的缺点</h2><p>说了很多HTTP/1.1相对于HTTP/1.0新功能，但是随着时代的发展，技术的进步，它的确定越来越多的暴露出来。</p>
<p>比如：虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为“队头堵塞”（Head-of-line blocking）。<br>为了避免这个问题，只有两种方法：一是减少请求数，二是同时多开持久连接。这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。如果HTTP协议设计得更好一些，这些额外的工作是可以避免的。</p>
<p>这只是一点，后面还会讲到其他的一些缺点和不足。</p>
<h1 id="HTTPS和SPDY"><a href="#HTTPS和SPDY" class="headerlink" title="HTTPS和SPDY"></a>HTTPS和SPDY</h1><p>看一下左边的文章目录，接下来按说该讲一下HTTP/2了，但是在讲HTTP/2之前需要先讲一下HTTPS和SPDY的相关协议内容在去看HTTP/2就好理解了，所以先插入讲一下HTTPS和SPDY的相关知识。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>为什么出现一个HTTPS呢？它和HTTP有啥异同呢?带着这两个问题，可以去看一下我的另一篇关于HTTPS见解的文章<a href="http://chping.website/2016/09/18/https/" target="_blank" rel="external">HTTPS基本认识</a></p>
<h2 id="SPDY"><a href="#SPDY" class="headerlink" title="SPDY"></a>SPDY</h2><p>关于SPDY的相关个人见解我也单独组织了一篇文章<a href="http://chping.website/2016/09/18/spdy/" target="_blank" rel="external">SPDY基本认识</a></p>
<h1 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h1><p>2015年，HTTP/2 发布。它不叫 HTTP/2.0，是因为标准委员会不打算再发布子版本了，下一个新版本将是 HTTP/3。<br>相比HTTP/1.1，HTTP/2版本引入了二进制协议、多工、数据流、头信息压缩、服务器推送。</p>
<p>其实看完前面的SPDY，其实HTTP/2也就差不多了，因为你会发现好多新机制就是基于SPDY的。</p>
<h2 id="HTTP-2跟SPDY的区别："><a href="#HTTP-2跟SPDY的区别：" class="headerlink" title="HTTP/2跟SPDY的区别："></a>HTTP/2跟SPDY的区别：</h2><ol>
<li>HTTP/2 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS</li>
<li>HTTP/2 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DELEFT</li>
</ol>
<h2 id="HTTP-2的优势"><a href="#HTTP-2的优势" class="headerlink" title="HTTP/2的优势"></a>HTTP/2的优势</h2><p>相比 HTTP/1.x，HTTP/2 在底层传输做了很大的改动和优化：</p>
<ol>
<li><p>HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 的文本格式。二进制格式在协议的解析和优化扩展上带来更多的优势和可能。</p>
</li>
<li><p>HTTP/2 对消息头采用 HPACK 进行压缩传输，能够节省消息头占用的网络的流量。而 HTTP/1.x 每次请求，都会携带大量冗余头信息，浪费了很多带宽资源。头压缩能够很好的解决该问题。</p>
</li>
<li><p>多路复用，直白的说就是所有的请求都是通过一个 TCP 连接并发完成。HTTP/1.x 虽然通过 pipeline 也能并发请求，但是多个请求之间的响应会被阻塞的，所以 pipeline 至今也没有被普及应用，而 HTTP/2 做到了真正的并发请求。同时，流还支持优先级和流量控制。</p>
</li>
<li><p>Server Push：服务端能够更快的把资源推送给客户端。例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 再发送这些请求。当客户端需要的时候，它已经在客户端了。</p>
</li>
</ol>
<p>HTTP/2 主要是 HTTP/1.x 在底层传输机制上的完全重构，HTTP/2 是基本兼容 HTTP/1.x 的语义的。<code>Content-Type</code> 仍然是 <code>Content-Type</code>，只不过它不再是文本传输了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>篇幅有些长，终于写完了，大部分摘自以下资料，做了个搬运工，顺便加上了部分自己的理解。</p>
<blockquote>
<p>本文借鉴资料：</p>
<ol>
<li>阮一峰的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">HTTP 协议入门</a></li>
<li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="external">《图解HTTTP》</a></li>
<li><a href="https://book.douban.com/subject/10608238/" target="_blank" rel="external">《HTML5程序设计》(第二版)</a></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git基本使用--分支和合并]]></title>
      <url>https://chping2125.github.io/2016/09/14/git2/</url>
      <content type="html"><![CDATA[<p>众所周知，Git的分支是其广受欢迎的的重要原因之一，版本的分支（branch）和合并（merge）可以很方便的对项目进行模块开发。接下来将通过一个小Demo来记录一下自己对于Git分支和合并的使用。<br><a id="more"></a><br>先讲一个需求，项目demo是一个已发布的项目，在远程仓库中发布的分支为master分支，在项目运行过程中出现了两个问题。第一，demo项目出现了一个小BUG；第二，需要扩展一个新功能。这两个问题需要两个程序员(小李修改Bug，小王添加新功能)来单独完成，那么他们应该怎样去合理的使用Git的分支和合并来完成工作呢？</p>
<h1 id="clone项目到本地"><a href="#clone项目到本地" class="headerlink" title="clone项目到本地"></a>clone项目到本地</h1><p>小李和小王都将远程仓库的项目通过<code>$ git clone demo</code>命令克隆到本地仓库。接下来我们想一下，我们是不是要保证项目master的分支不能被修改，还得保证两个人单独完成工作且相互不能影响，最后两个人完成各自任务后提交项目，并能很好的合并呢？要想完成这样的目的就需要借助Git的分支和合并的概念来完成这个需求了。</p>
<h1 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h1><p>将项目clone到本地以后，小王和小李可以在他们的本地仓库进行新建分支，新建的分支相当于从master分支重新复制一份出来进行各自的操作（但实际并没有复制，是指针的变化）<br><img src="/images/git/git_img9.png" alt="git checkout"><br>Git代码解释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">// 列出所有本地分支</div><div class="line">$ git branch</div><div class="line"></div><div class="line">// 列出所有远程分支</div><div class="line">$ git branch -r</div><div class="line"></div><div class="line">// 列出所有本地分支和远程分支</div><div class="line">$ git branch -a</div><div class="line"></div><div class="line">// 新建一个分支，但依然停留在当前分支</div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line">// 新建一个分支，并切换到该分支</div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line">// 新建一个分支，指向指定commit</div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line">// 新建一个分支，与指定的远程分支建立追踪关系</div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line">// 切换到指定分支，并更新工作区</div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line">// 切换到上一个分支</div><div class="line">$ git checkout -</div><div class="line"></div><div class="line">// 建立追踪关系，在现有分支与指定的远程分支之间</div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line">// 合并指定分支到当前分支</div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line">// 选择一个commit，合并进当前分支</div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line">// 删除分支</div><div class="line">$ git branch -d [branch-name]</div><div class="line"></div><div class="line">// 删除远程分支</div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure></p>
<p>就这样小李和小王各自建立一个分支开始了辛勤的创造。<br>由于小李只是修改一个bug，多以很快小李就完成了自己的工作，于是他将自己的分支提交到远程仓库中，并且请测试人员去测试。</p>
<h1 id="提交分支到远程仓库"><a href="#提交分支到远程仓库" class="headerlink" title="提交分支到远程仓库"></a>提交分支到远程仓库</h1><p>小李完成里本地代码的工作，准备提交代码到远程仓库。但是，此时远程仓库中的master分支可能已经被其他程序员修改了（比如小王提前完成了任务并通过测试已上线，我手动修改了一下远程仓库的master分支的一个文件来模拟这个过程），所以小李需要将远程仓库的mater分支与他自己的分支进行一下合并，以保证他的分支是最新的。</p>
<h2 id="小李合并分支"><a href="#小李合并分支" class="headerlink" title="小李合并分支"></a>小李合并分支</h2><p>首先小李将自己的分支切换到master分支，并通过<code>$ git pull</code>来从远程仓库获取master的最新内容，然后在切回自己的工作分支，执行<code>$ git merge master</code>将自己的工作分支和最新的master分支进行合并。<br><img src="/images/git/git_img10.png" alt="git merge"></p>
<h2 id="小李提交分支"><a href="#小李提交分支" class="headerlink" title="小李提交分支"></a>小李提交分支</h2><p>然后小李将自己的分支提交到远程仓库<br><img src="/images/git/git_img11.png" alt="git merge"><br>至此，小李的工作就基本完成了，如果测试通过的话，才算真正完成。</p>
<h2 id="测试人员合并分支并发布"><a href="#测试人员合并分支并发布" class="headerlink" title="测试人员合并分支并发布"></a>测试人员合并分支并发布</h2><p>测试人员从远程仓库中clone下小李提交的的工作分支，然后进行测试，经过测试后，测试人员将小李的工作分支和master的工作分支进行合并（注意：小李操作的是他的工作分支和master合并，改变的是他的工作分支；而测试人员操作的是maste分支和小李的工作分支，改变的是master分支），然后可以选择删除小李的工作分支（也可以不删除），最终上线项目。<br><img src="/images/git/git_img12.png" alt="git merge"><br><img src="/images/git/git_img13.png" alt="git merge"><br>删除小李的工作分支<br><img src="/images/git/git_img14.png" alt="git merge"><br>这样小李的工作彻底完成了，接下来咱们在看一下小王的工作情况。</p>
<p>小王经过一段时间的拼搏挣扎之后，新功能也完成了，他要做的也是想小李一下提交分支并请测试人员测试，然后再由测试人员合并分支并发布项目，过程和上面一样，下图为模拟流程。<br><strong>小王的工作：</strong><br><img src="/images/git/git_img15.png" alt="git merge"><br><img src="/images/git/git_img16.png" alt="git merge"><br><strong>测试人员的工作：</strong><br><img src="/images/git/git_img17.png" alt="git merge"><br><img src="/images/git/git_img18.png" alt="git merge"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文通过小李和小王以及测试人员对一个需求的实际场景进行了模拟Git的分支和合并的操作，其中截图部分代码在实际操作中可能不尽相同，但整个流程就是这样。</p>
<p>本文部分解释和说法借鉴自阮一峰关于Git的博文。<br><strong>阮一峰关于Git的文章</strong></p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="external">Git使用规范流程</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用Git命令清单</a><br><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">Git分支管理策略</a><br><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">Git远程操作详解</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external">Git工作流程</a></p>
</blockquote>
<p><strong>廖雪峰的Git教程</strong></p>
<blockquote>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">Git教程</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git基本使用]]></title>
      <url>https://chping2125.github.io/2016/09/14/git/</url>
      <content type="html"><![CDATA[<p>Git作为目前最流行的版本控制系统，它的优点不言而喻，那么怎样去使用Git呢？对于初学者来说可能有一点的难度，再加上它全是英文的，要是像我这样的英语水平，可能就更有些难度了。通过这篇文章，我想记录一下我自己对Git初学的一些认识和见解，可能有对也有错。<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先需要说明的是现在网上有很多关于Git的教程，虽然质量值得商榷，但是阮一峰和廖雪峰关于Git的教程或者说文章还是不错的，本文部分内容和描述借鉴自阮一峰的博文。</p>
<p><strong>阮一峰关于Git的文章</strong></p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="external">Git使用规范流程</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用Git命令清单</a><br><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">Git分支管理策略</a><br><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">Git远程操作详解</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external">Git工作流程</a></p>
</blockquote>
<p><strong>廖雪峰的Git教程</strong></p>
<blockquote>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">Git教程</a></p>
</blockquote>
<p>正文开始~~~<br>Git作为一款版本控制系统，自然我们就要介绍它的版本控制的流程，本文也只是记录一些关于Git实际使用的一些常见命令的个人解读。<br><img src="/images/git/git_img1.png" alt="git常用命令"><br>上面这样图引自软一峰的博文，我觉着这张图很好的解释了Git的流程。</p>
<h1 id="Git专用名词"><a href="#Git专用名词" class="headerlink" title="Git专用名词"></a>Git专用名词</h1><blockquote>
<p>Remote: 远程主机（远程仓库）<br>Repository: 本地仓库（本地你的仓库，每次commit就是提交到你的本地仓库，push会提交到远程仓库）<br>Index: 缓存区（可以通过add命令添加你的文件到缓存区）<br>Workspace: 工作区</p>
</blockquote>
<p>以上这几个专用名词在整个Git的流程中经常提到，所以事先说明一下。</p>
<h1 id="Git使用流程"><a href="#Git使用流程" class="headerlink" title="Git使用流程"></a>Git使用流程</h1><p>假设你已经对Git已经有了一定的了解，我们有一个项目要求使用Git进行版本控制，那么我们可以通过两种方式进行初始化。第一种就是直接在你要进行版本控制的项目的根目录打开git bash,进行init初始化,然后与你远程仓库对应的项目进行关联；第二种就是事先在Git的远程仓库创建一个对应的项目后，然后本地进行clone，然后将你的项目再放到clone下来的目录下，即可进行接下来的Git操作。为了方便介绍，我们约定前者称为“本地初始化项目方式”，后者称为“远程clone方式”。</p>
<h2 id="本地初始化项目方式"><a href="#本地初始化项目方式" class="headerlink" title="本地初始化项目方式"></a>本地初始化项目方式</h2><p>使用该种方式进行托管项目到Git和“远程clone方式”的不同就是需要先进行一步上传本地项目到Git远程仓库的操作。</p>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><p>在你的项目（或者要上传到Git的的文件）的根目录右键打开git bash here，然后输入git的init命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//在当前目录下新建一个Git仓库，</div><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<p><img src="/images/git/git_img2.png" alt="git init"><br>如上图，我在demo文件夹（假设这是我的项目根目录）中打开git bash,然后输入了<code>$ git init</code>命令，然后在我的demo文件夹中出现了一个”.git”的文件夹（该文件为隐藏文件，windows默认关闭隐藏文件），这就说明我的demo文件夹已经在本地创建了一个Git仓库了，但是它还没有和远程仓库有任何联系，接下来我们就是要建立两者之间的联系。</p>
<h3 id="添加到本地仓库"><a href="#添加到本地仓库" class="headerlink" title="添加到本地仓库"></a>添加到本地仓库</h3><p>由于初始化仓库后相当于文章开头的Git流程图中workspace的创建，所以接下来就是要通过add添加到缓存区，再通过本地仓库。但是此时可能会有一个问题需要讨论，那就是咱们这个demo文件夹里面没有文件呀，没有文件你交给Git管理，它管理啥呀？所以咱们得先添加一个文件，然后再执行add和commit操作。<br><img src="/images/git/git_img6.png" alt="git init"><br>git命令解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//提交所有更新</div><div class="line">$ git add .  </div><div class="line"></div><div class="line">//提交暂存区到仓库区</div><div class="line">$ git commit -m [message]  </div><div class="line"></div><div class="line">//提交暂存区的指定文件到仓库区</div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line">//提交工作区自上次commit之后的变化，直接到仓库区</div><div class="line">$ git commit -a</div><div class="line"></div><div class="line">//提交时显示所有diff信息</div><div class="line">$ git commit -v</div><div class="line"></div><div class="line">//使用一次新的commit，替代上一次提交</div><div class="line">//如果代码没有任何新变化，则用来改写上一次commit的提交信息</div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line">//重做上一次commit，并包括指定文件的新变化</div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure></p>
<h3 id="添加远程主机"><a href="#添加远程主机" class="headerlink" title="添加远程主机"></a>添加远程主机</h3><p>上一步中我们已经在将我们的项目添加到本地仓库中了，按照文章开头的Git流程图来说，我们接下来应该要执行的应该是<code>$ git push</code>操作,但是此时会报如下错误。<br><img src="/images/git/git_img3.png" alt="git init"><br>用我蹩脚的英语翻译一下报错信息就是：</p>
<blockquote>
<p>第一行：没有配置push的目的地<br>第二行：从命令行指定一个URL或者配置一个远程主机的仓库使用<br>第三行：可以使用该命令创建远程主机的仓库“git remote add <remote-name> <url>”<br>第四行：然后你就可以用这个新建的远程主机的仓库进行push操作了<br>第五行：git又给你提示了怎样进行push”git push <name>“</name></url></remote-name></p>
</blockquote>
<p>这是因为什么原因呢？其实在报错信息中已经说得很明白了，你在本地新建了一个仓库，但是远程仓库中并没有与之对应的呀，你直接执行push操作，我到底把它（新建的本地仓库）push哪里去呀？于是就提示我们要配置一个远程主机的仓库，并且报错中还给出了创建远程主机仓库的方式，git很友好吗。那么就试试吧！<br><img src="/images/git/git_img4.png" alt="git remote"><br>git命令解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git remote //列出所有的远程主机</div><div class="line">$ git remote -v //查看远程主机的网址</div><div class="line">$ git remote show &lt;主机名&gt;    //查看该主机的详细信息</div><div class="line">$ git remote add  &lt;主机名&gt;  &lt;网址&gt;   //添加远程主机</div><div class="line">$ git remote rm   &lt;主机名&gt;   //删除远程主机</div><div class="line">$ git remote rename   &lt;原主机名&gt;  &lt;新主机名&gt;   //重命名远程主机</div></pre></td></tr></table></figure></p>
<p>好的，我们按照要求成功的添加了一台远程主机，并且按照他的要求重新进行了push操作，但是又报错了。。。<br><img src="/images/git/git_img5.png" alt="git push"></p>
<p>我们在看看报错信息，这次报错信息有很多，其实上面一大部分（红色框）是说的Git2.0版本和以前不一样了，你可以怎样怎样。。。。（想了解自己去翻译，都是很简单的英文）。<br>重要的是最后那三行，意思是“当前的分支master(git的默认分支)还没有在上游分支中，push当前分支必须得设置上游分支，可以使用以下命令<code>git push --set-upstream origin master</code>”，现在知道原因和做法了，那就再去试试吧。<br><img src="/images/git/git_img7.png" alt="git push"><br>经过为不谢努力终于成功使得本地的demo项目和远程仓库简历联系。<br>“本地初始化项目”的方式到这里就完成了，接下来在说说“远程clone”的方式。</p>
<h2 id="远程clone方式初始化项目"><a href="#远程clone方式初始化项目" class="headerlink" title="远程clone方式初始化项目"></a>远程clone方式初始化项目</h2><p>相比较“本地初始化项目”的方式来说，该方式相对简单，只需要事先在远程仓库创建一个空的仓库，并在本地你的工作目录，单击右键打开git bash,然后执行clone命令即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 从远程仓库克隆项目到本地仓库</div><div class="line">$ git clone &lt;地址&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/images/git/git_img8.png" alt="git push"><br>这样就把远程仓库里的一个项目克隆到你的本地仓库了，接下来你就可以按要求对该项目进行操纵了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>到这里，两种方式实现本地仓库和远程仓库建立联系就结束了，很简单的Git操作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm和cnpm区别]]></title>
      <url>https://chping2125.github.io/2016/09/12/npm%E5%92%8Ccnpm/</url>
      <content type="html"><![CDATA[<p>npm（node package manager）是node的包管理工具，关于npm的详细内容可以看一下<a href="http://chping.website/2016/09/12/npm/" target="_blank" rel="external">NPM介绍</a>，本文主要是对上一篇文章的补充和介绍CNPM的介绍。<br><a id="more"></a><br>上一篇关于NPM介绍的文章中发现最后少介绍了一个知识点，所以先在这里介绍一下。</p>
<h1 id="关于package-json"><a href="#关于package-json" class="headerlink" title="关于package.json"></a>关于package.json</h1><p>这货在官网似乎没有详细的描述，其实就是包的描述信息啦。假设当我们下载了node应用，这个node应用依赖于A、B、C三个包，如果没有package.json，我们需要人肉安装这个三个包（如果对版本有特定要求就更悲剧了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install A</div><div class="line">$ npm install B</div><div class="line">$ npm install C</div></pre></td></tr></table></figure></p>
<p>有了package.json，一行命令安装所有依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<h2 id="package-json字段简介"><a href="#package-json字段简介" class="headerlink" title="package.json字段简介"></a>package.json字段简介</h2><p>字段相当多，但最重要的的是下面几个</p>
<ol>
<li><strong>name:</strong> package的名字（由于他会成为url的一部分，所以 non-url-safe 的字母不会通过，也不允许出现”.”、”_”），最好先在<a href="http://registry.npmjs.org/上搜下你取的名字是否已经存在" target="_blank" rel="external">http://registry.npmjs.org/上搜下你取的名字是否已经存在</a></li>
<li><strong>version:</strong> package的版本，当package发生变化时，version也应该跟着一起变化，同时，你声明的版本需要通过semver的校验（semver可自行谷歌）</li>
<li><strong>dependencies:</strong> package的应用依赖模块，即别人要使用这个package，至少需要安装哪些东东。应用依赖模块会安装到当前模块的node_modules目录下。</li>
<li><strong>devDependencies:</strong> package的开发依赖模块，即别人要在这个package上进行开发<br>其他：参见官网</li>
</ol>
<h2 id="package版本"><a href="#package版本" class="headerlink" title="package版本"></a>package版本</h2><p>在package.json里，你经常会在包名后看到类似”~0.1.0”这样的字符串，这就是包的版本啦。下面会列举最常见的版本声明形式，以及版本书写的要求：</p>
<p><strong>常见版本声明形式</strong><br>a、”~1.2.3” 是神马意思呢，看下面领悟</p>
<p>“~1.2.3” = “&gt;=1.2.3 &lt;1.3.0”</p>
<p>“~1.2” = “&gt;=1.2.0 &lt;1.3.0”</p>
<p>“~1” = “&gt;=1.0.0 &lt;1.1.0”<br>b、”1.x.x”是什么意思呢，继续自行领悟</p>
<p>“1.2.x” = “&gt;=1.2.0 &lt;1.3.0”</p>
<p>“1.x.x” = “&gt;=1.0.0 &lt;2.0.0”</p>
<p>“1.2” = “1.2.x”</p>
<p>“1.x” = “1.x.x”</p>
<p>“1” = “1.x.x”</p>
<p><strong>版本书写要求</strong></p>
<ol>
<li>版本可以v开头，比如 v1.0.1（v只是可选）</li>
<li>1.0.1-7，这里的7是所谓的“构建版本号”，不理是神马，反正版本大于1.0.1</li>
<li>1.0.1beta，或者1.0.1-beta，如果1.0.1后面不是 “连字符加数字” 这种形式，那么它是pre release 版本，即版本小于 1.0.1</li>
<li>根据b、c，有：0.1.2-7 &gt; 0.1.2-7-beta &gt; 0.1.2-6 &gt; 0.1.2 &gt; 0.1.2beta</li>
</ol>
<h1 id="CNPM"><a href="#CNPM" class="headerlink" title="CNPM"></a>CNPM</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。<br>来自<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a>官网的说明：</p>
<blockquote>
<p>“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”</p>
</blockquote>
<h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><p>只需要在你的git bash或者mac的终端中输入一下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>cnpm支持npm除了publish之外的所有命令，所以说你可以放心的使用cnpm来代替npm使用，这样可能使用包管理的时候更加的方便，因为服务器就在国内。但是，有时候如果你的网络情况比较渣的话，用啥都一样。</p>
<blockquote>
<p>本文借鉴自：<a href="http://www.cnblogs.com/chyingp/p/npm.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/chyingp/p/npm.html?utm_source=tuicool&amp;utm_medium=referral</a>和<a href="http://blog.csdn.net/shelly1072/article/details/51524029" target="_blank" rel="external">http://blog.csdn.net/shelly1072/article/details/51524029</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm介绍]]></title>
      <url>https://chping2125.github.io/2016/09/12/npm/</url>
      <content type="html"><![CDATA[<p>nodejs的出现，可以算是前端里程碑式的一个事件，它让前端攻城狮们摆脱了浏览器的束缚，踏上了一个更加宽广的舞台。前端的可能性，从此更加具有想象空间。<br><a id="more"></a><br>随着一系列基于nodes的应用/工具的出现，工作中与nodejs打交道的机会越来越多。无论在node应用的开发，还是使用中，包管理都扮演着一个很重要的作用。NPM（node package manager），作为node的包管理工具，极大地便利了我们的开发工作，很有必要了解一下。</p>
<h1 id="NPM是什么？"><a href="#NPM是什么？" class="headerlink" title="NPM是什么？"></a>NPM是什么？</h1><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。</p>
<p>npm的背后，是基于couchdb的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>
<p>npm官网： <a href="[https://npmjs.org/">https://npmjs.org/</a></p>
<p>npm官方文档： <a href="https://npmjs.org/doc/README.html" target="_blank" rel="external">https://npmjs.org/doc/README.html</a></p>
<h1 id="NPM能做什么？"><a href="#NPM能做什么？" class="headerlink" title="NPM能做什么？"></a>NPM能做什么？</h1><p>npm的安装、卸载、升级、配置<br>npm的使用：package的安装、卸载、升级、查看、搜索、发布<br>npm包的安装模式：本地 vs 全局<br>package.json：包描述信息<br>package版本：常见版本声明形式</p>
<h2 id="npm包安装模式"><a href="#npm包安装模式" class="headerlink" title="npm包安装模式"></a>npm包安装模式</h2><p>在具体介绍npm包的管理之前，我们首先得来了解一下npm包的两种安装模式。</p>
<p>本地安装 vs 全局安装（重要）</p>
<p>node包的安装分两种：本地安装、全局安装。两者的区别如下，后面会通过简单例子说明</p>
<blockquote>
<p>本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。<br>全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。</p>
</blockquote>
<p><strong>本地安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install pkg //本地安装命令</div></pre></td></tr></table></figure></p>
<p>运行如下命令，就会在当前目录下安装 grunt-cli （grunt命令行工具）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install grunt-cli</div></pre></td></tr></table></figure></p>
<p>安装结束后，当前目录下回多出一个 node_modules 目录，grunt-cli就安装在里面。同时注意控制台输出的信息：</p>
<blockquote>
<p>grunt-cli@0.1.9 node_modules/grunt-cli<br>├── resolve@0.3.1<br>├── nopt@1.0.10 (abbrev@1.0.4)<br>└── findup-sync@0.1.2 (lodash@1.0.1, glob@3.1.21)</p>
</blockquote>
<p>简单说明一下：<br>grunt-cli@0.1.9：当前安装的package为grunt-cli，版本为0.19<br>node_modules/grunt-cli：安装目录<br>resolve@0.3.1：依赖的包有resolve、nopt、findup-sync，它们各自的版本、依赖在后面的括号里列出来</p>
<p><strong>全局安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g pkg //全局安装命令</div></pre></td></tr></table></figure></p>
<p>上面已经安装了grunt-cli，然后你跑到其他目录下面运行如下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install grunt-cli</div></pre></td></tr></table></figure>
<p>果断提示你grunt命令不存在，为什么呢？因为上面只是进行了<strong>本地安装</strong>，grunt命令只能在对应安装目录下使用。<br>控制台输出的信息：</p>
<blockquote>
<p>-bash: grunt: command not found</p>
</blockquote>
<p>如果为了使用grunt命令，每到一个目录下都得重新安装一次，那不抓狂才怪。肿么办呢？<br>很简单，采用全局安装就行了，很简单，加上参数 -g 就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g grunt-cli</div></pre></td></tr></table></figure></p>
<p>于是，在所有目录下都可以无压力使用 grunt 命令了。这个时候，你会注意到控制台输入的信息有点不同。主要的区别在于安装目录，现在变成了 /usr/local/lib/node_modules/grunt-cli ， /usr/local/lib/node_modules/ 也就是之前所说的全局安装目录啦。</p>
<blockquote>
<p>grunt-cli@0.1.9 /usr/local/lib/node_modules/grunt-cli<br>├── resolve@0.3.1<br>├── nopt@1.0.10 (abbrev@1.0.4)<br>└── findup-sync@0.1.2 (lodash@1.0.1, glob@3.1.21)</p>
</blockquote>
<h2 id="npm包管理"><a href="#npm包管理" class="headerlink" title="npm包管理"></a>npm包管理</h2><p>npm的包管理命令是使用频率最高的，所以也是我们需要牢牢记住并熟练使用的。其实无非也就是几个动作：安装、卸载、更新、查看、搜索、发布等。</p>
<p><strong>安装最新版本的grunt-cli</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install grunt-cli</div></pre></td></tr></table></figure></p>
<p><strong>安装0.1.9版本的grunt-cli</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install grunt-cli@&quot;0.1.9&quot;</div></pre></td></tr></table></figure></p>
<p><strong>通过package.json进行安装</strong><br>如果我们的项目依赖了很多package，一个一个地安装那将是个体力活。我们可以将项目依赖的包都在package.json这个文件里声明，然后一行命令搞定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p><strong>其他package安装命令</strong><br>运行如下命令，列出所有 npm install 可能的参数形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --help</div></pre></td></tr></table></figure></p>
<p>输出如下，有兴趣的童鞋可以了解下</p>
<blockquote>
<p>npm install &lt;tarball file&gt;<br>npm install &lt;tarball url&gt;<br>npm install &lt;folder&gt;<br>npm install &lt;pkg&gt;<br>npm install &lt;pkg&gt;@&lt;tag&gt;<br>npm install &lt;pkg&gt;@&lt;version&gt;<br>npm install &lt;pkg&gt;@&lt;version range&gt;</p>
</blockquote>
<h2 id="卸载package"><a href="#卸载package" class="headerlink" title="卸载package"></a>卸载package</h2><p>比如卸载grunt-cli<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall grunt-cli</div></pre></td></tr></table></figure></p>
<p><strong>卸载0.1.9版本的grunt-cli</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall grunt-cli@&quot;0.1.9&quot;</div></pre></td></tr></table></figure></p>
<h2 id="查看package"><a href="#查看package" class="headerlink" title="查看package"></a>查看package</h2><p>运行如下命令，就可以查看当前目录安装了哪些package<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls</div></pre></td></tr></table></figure></p>
<p>控制台输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/private/tmp/npm</div><div class="line">└─┬ grunt-cli@0.1.9</div><div class="line">  ├─┬ findup-sync@0.1.2</div><div class="line">  │ ├─┬ glob@3.1.21</div><div class="line">  │ │ ├── graceful-fs@1.2.3</div><div class="line">  │ │ ├── inherits@1.0.0</div><div class="line">  │ │ └─┬ minimatch@0.2.12</div><div class="line">  │ │   ├── lru-cache@2.3.0</div><div class="line">  │ │   └── sigmund@1.0.0</div><div class="line">  │ └── lodash@1.0.1</div><div class="line">  ├─┬ nopt@1.0.10</div><div class="line">  │ └── abbrev@1.0.4</div><div class="line">  └── resolve@0.3.1</div></pre></td></tr></table></figure>
<p>同样，如果是要查看package的全局安装信息，加上 -g 就可以。</p>
<p><strong>查看特定package的信息</strong><br>运行如下命令，输出grunt-cli的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls grunt-cli</div></pre></td></tr></table></figure></p>
<p>输出的信息比较有限，只有安装目录、版本，如下：</p>
<blockquote>
<p>/private/tmp/npm<br>    └── grunt-cli@0.1.9 </p>
</blockquote>
<p>如果要查看更详细信息，可以通过 <code>npm info pkg</code>，输出的信息非常详尽，包括作者、版本、依赖等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm info grunt-cli</div></pre></td></tr></table></figure></p>
<h2 id="package更新"><a href="#package更新" class="headerlink" title="package更新"></a>package更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update grunt-cli</div></pre></td></tr></table></figure>
<h2 id="package搜索"><a href="#package搜索" class="headerlink" title="package搜索"></a>package搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm search grunt-cli</div></pre></td></tr></table></figure>
<p>返回结果如下</p>
<blockquote>
<p>npm http GET <a href="http://registry.npmjs.org/-/all/since?stale=update_after&amp;startkey=1375519407838" target="_blank" rel="external">http://registry.npmjs.org/-/all/since?stale=update_after&amp;startkey=1375519407838</a><br>npm http 200 <a href="http://registry.npmjs.org/-/all/since?stale=update_after&amp;startkey=1375519407838" target="_blank" rel="external">http://registry.npmjs.org/-/all/since?stale=update_after&amp;startkey=1375519407838</a><br>NAME                  DESCRIPTION                                        AUTHOR            DATE              KEYWORDS<br>grunt-cli             The grunt command line interface.                  =cowboy =tkellen  2013-07-27 02:24<br>grunt-cli-dev-exitprocess The grunt command line interface.              =dnevnik          2013-03-11 16:19<br>grunt-client-compiler Grunt wrapper for client-compiler.                 =rubenv           2013-03-26 09:15  gruntplugin<br>grunt-clientside      Generate clientside js code from CommonJS modules  =jga              2012-11-07 01:20  gruntplugin</p>
</blockquote>
<h2 id="npm发布"><a href="#npm发布" class="headerlink" title="npm发布"></a>npm发布</h2><p>这个命令我自己也还没实际用过，不误导大家，语法如下，也可参考官方对于package发布的说明 <a href="https://npmjs.org/doc/developers.html" target="_blank" rel="external">https://npmjs.org/doc/developers.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm publish &amp;lt;tarball&amp;gt;</div><div class="line">$ npm publish &amp;lt;folder&amp;gt;</div></pre></td></tr></table></figure></p>
<h1 id="NPM配置"><a href="#NPM配置" class="headerlink" title="NPM配置"></a>NPM配置</h1><p>npm的配置工作主要是通过 npm config 命令，主要包含增、删、改、查几个步骤，下面就以最为常用的proxy配置为例。</p>
<h2 id="设置proxy"><a href="#设置proxy" class="headerlink" title="设置proxy"></a>设置proxy</h2><p>内网使用npm很头痛的一个问题就是代理，假设我们的代理是  <a href="http://proxy.example.com:8080，那么命令如下：" target="_blank" rel="external">http://proxy.example.com:8080，那么命令如下：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config set proxy http://proxy.example.com:8080</div></pre></td></tr></table></figure></p>
<p>由于 npm config set 命令比较常用，于是可以如下简写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm set proxy http://proxy.example.com:8080</div></pre></td></tr></table></figure></p>
<h2 id="查看proxy"><a href="#查看proxy" class="headerlink" title="查看proxy"></a>查看proxy</h2><p>设置完，我们查看下当前代理设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config get proxy</div></pre></td></tr></table></figure></p>
<p>输出如下：</p>
<blockquote>
<p><a href="http://proxy.example.com:8080/" target="_blank" rel="external">http://proxy.example.com:8080/</a></p>
</blockquote>
<p>同样可如下简写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm get proxy</div></pre></td></tr></table></figure></p>
<h2 id="删除proxy"><a href="#删除proxy" class="headerlink" title="删除proxy"></a>删除proxy</h2><p>代理不需要用到了，那删了吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm delete proxy</div></pre></td></tr></table></figure></p>
<h2 id="查看所有配置"><a href="#查看所有配置" class="headerlink" title="查看所有配置"></a>查看所有配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config list</div></pre></td></tr></table></figure>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>有时候觉得一条配置一条配置地修改有些麻烦，就直接进配置文件修改了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config edit</div></pre></td></tr></table></figure></p>
<p>内容只是简单地把最常见的命令，以及一些需要了解的内容列了出来。如要进一步了解，可参考官网说明。此外， npm help 是我们最好的朋友，如果忘了有哪些命令，命令下有哪些参数，可通过help进行查看。</p>
<blockquote>
<p>原文：<a href="http://www.cnblogs.com/chyingp/p/npm.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/chyingp/p/npm.html?utm_source=tuicool&amp;utm_medium=referral</a><br>原文总结的很好，本人只是做了部分修改。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux基本命令]]></title>
      <url>https://chping2125.github.io/2016/09/12/linuxCommand/</url>
      <content type="html"><![CDATA[<p>前端学习路线中，npm命令的使用是不可避免的，这就要求我们得掌握点基本的Linux命令来进行前端工程化。所以就像写一篇基础的Linux基本常用命令的小文章来记录一下，以备以后查阅。<br><a id="more"></a></p>
<p>首先需要说明的是在使用Linux的CLI（command line interface）的时候，Windows系统一般是使用GIT的git bash（如果没有安装git，可以自己去官网下一个安装）来实现Linux命令对操作系统的操作，有人可能说windows有自带的windows PowerShell,这个东西可以执行命令行，但是对于Linux命令，它就无能为力了；而MAC系统有其自带的“终端”窗口可以直接执行Linux。</p>
<h2 id="常用文件和目录操作"><a href="#常用文件和目录操作" class="headerlink" title="常用文件和目录操作"></a>常用文件和目录操作</h2><p>文件和目录的操作一般包括进入目录，查看目录，查看文件，新建文件夹，新建文件，复制文件或文件夹，剪切（移动）文件或文件夹，删除文件或文件夹这些常用的操作。下面就详细的介绍一下这几个小命令。</p>
<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p><strong>新建文件夹</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir newDir //newDir为新建的文件夹名称</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img1.png" alt="mkDir"><br><strong>新建文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch README.md //README.md为一个markdown文件</div></pre></td></tr></table></figure></p>
<p>如果你不了解markdown格式文件，可以<a href="http://localhost:4000/2016/09/02/markDown/" target="_blank" rel="external">点击这里</a><br><img src="/images/linuxCommand/linux_img2.png" alt="mkDir"></p>
<h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><p><strong>进入当前目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   $ cd newDir    //newDir为待进入的目录名称</div><div class="line">   $ cd ../       //后退</div><div class="line">   $ cd ../../    //这样也是可以的，回退两部</div><div class="line">   $ cd ./        //打开当前目录（没什么变化）</div><div class="line">$ cd ~         //返回到根目录</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img3.png" alt="mkDir"><br><img src="/images/linuxCommand/linux_img7.png" alt="mkDir"></p>
<p><strong>查看当前目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ls      //查看目录下的文件</div><div class="line">$ ls -l   //查看目录下的文件详细信息，包括是否可读写/文件大小/时间等信息</div><div class="line">$ ls -la  //显示目录下隐藏的文件</div><div class="line">$ ls -lh  //显示目录下文件的大小</div><div class="line">$ ls -lt  //显示目录下文件，按时间排序</div><div class="line">$ ls -ltr //显示目录下文件，按时间倒序</div><div class="line">$ ls -R   //显示该目录及其文件夹的子目录</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img5.png" alt="mkDir"><br>ls的命令，也可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ls      //查看目录下的文件</div><div class="line">$ ls -l   //查看目录下的文件详细信息，包括是否可读写/文件大小/时间等信息</div><div class="line">$ ls -a   //显示目录下隐藏的文件</div><div class="line">$ ls -h   //显示目录下文件的大小</div><div class="line">$ ls -t   //显示目录下文件，按时间排序</div><div class="line">$ ls -tr  //显示目录下文件，按时间倒序</div><div class="line">$ ls -R   //显示该目录及其文件夹的子目录</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img6.png" alt="mkDir"><br>效果就是展示不同，加了“l”后，可以显示详细信息，不加则只显示文件或文件夹的名称。</p>
<p><strong>查看文件</strong><br>当我们打开了一个目录（或者说文件夹）后，可能要做的是打开一个文件或者一个子文件夹，打开一个子文件夹已经说过了<code>cd fildName</code>，而打开一个文件就需要一个新命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat README.md     //打开文件名为README.md的文件</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img8.png" alt="mkDir"></p>
<h3 id="复制-剪切（移动）-删除"><a href="#复制-剪切（移动）-删除" class="headerlink" title="复制/剪切（移动）/删除"></a>复制/剪切（移动）/删除</h3><p><strong>复制</strong><br>当然我们可以对一个文件或者文件夹进行复制操作，同时，在复制的同时可以对文件或者文件夹进行重命名操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cp README.md ./app   //复制一个文件到指定目录</div><div class="line">$ cp README.md ./app/index/README2.md   //复制一个文件到指定目录并重命名</div><div class="line">$ cp -a app app2         //复制一个文件到指定目录</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img9.png" alt="mkDir"><br><img src="/images/linuxCommand/linux_img10.png" alt="mkDir"><br><img src="/images/linuxCommand/linux_img11.png" alt="mkDir"></p>
<p><strong>剪切（移动）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mv app2 app         //复制一个文件到指定目录</div><div class="line">$ mv README.md ../    //复制一个文件到指定目录</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img12.png" alt="mkDir"><br><img src="/images/linuxCommand/linux_img13.png" alt="mkDir"></p>
<p><strong>删除</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm README.md       //删除一个文件</div><div class="line">$ rm -r app          //删除一个文件夹</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img14.png" alt="mkDir"><br><img src="/images/linuxCommand/linux_img15.png" alt="mkDir"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>清屏</strong><br>有时命令敲多了，git bash窗口内全是命令，看着有些不舒服，可以通过clear命令来清屏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ clear</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img16.png" alt="mkDir"><br><img src="/images/linuxCommand/linux_img17.png" alt="mkDir"><br><strong>显示当前工作路径</strong><br>有时可能需要显示一下当前的工作路径，git bash好像不怎么需要，而mac好像需要，于是你可以输入以下命令查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pwd</div></pre></td></tr></table></figure></p>
<p><img src="/images/linuxCommand/linux_img18.png" alt="mkDir"></p>
<p><strong>显示文本文件内容</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat index.html</div></pre></td></tr></table></figure></p>
<p><strong>改变文件权限</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod <span class="number">777</span></div></pre></td></tr></table></figure></p>
<p><strong>查看系统进程</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ps</div><div class="line"></div><div class="line"><span class="comment">//查看当前用户的所有进程</span></div><div class="line">$ ps -a</div><div class="line"></div><div class="line"><span class="comment">//查看系统中的所有进程</span></div><div class="line">$ ps -e</div></pre></td></tr></table></figure></p>
<p><strong>杀死指定进程号的进程，配合 ps 使用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kill <span class="number">9133</span></div><div class="line"><span class="comment">//有些进程不能直接杀死，这时候我们需要加一个参数“ -9 ”，“ -9 ” 代表强制结束。</span></div></pre></td></tr></table></figure></p>
<p><strong>解压打包</strong><br><a href="http://www.jb51.net/LINUXjishu/43356.html" target="_blank" rel="external">功能很强大，详细请看这里</a></p>
<p><strong>修改PATH环境变量</strong><br><a href="http://www.cnblogs.com/amboyna/archive/2008/03/08/1096024.html" target="_blank" rel="external">同样直接看连接</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天先记录到这里，这只是常用的针对文件和文件夹的一些基本操作，Linux命令还有很多，比如对系统信息的获取，开关机操作，文件搜索，网络操作等等，之后有时间在总结吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络请求过程扫盲]]></title>
      <url>https://chping2125.github.io/2016/09/11/netword/</url>
      <content type="html"><![CDATA[<p>最近在刷前端的笔试和面试题的时候，经常遇到让简述一下“从页面请求到后端响应再到页面呈现的整个过程”的问题。于是自己通过查找相关大牛的博文后，决定自己动手总结一下，以便以后复习之用。<br><a id="more"></a></p>
<blockquote>
<p>本文总结主要借鉴自阮一峰的<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="external">互联网协议入门（一）</a>、<a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="external">互联网协议入门（二）</a>、<a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="external">DNS 原理入门</a>。顺便一提，阮大神的每篇博客都很有价值，建议初学者可以多多去取经。</p>
</blockquote>
<p>正文开始</p>
<p>其实在我看来，不管是前端开发还是后端开发的工程师都应该了解这个过程，了解这个过程可以让你整体把握整个软件的运行流程，同时可以让你更好地理解一些前后端优化、SEO，甚至一些网络安全的问题。<br>要想讲清楚“网络请求的整个过程”的话，其中涉及到的网络基础、HTTP协议、浏览器的工作原理等都应该是必备的知识储备，接下来的文章中，我也会在讲清楚整个请求过程的同时穿插补充这些相关知识，已经对这些知识有了解和深入研究的同学可以权当复习了。</p>
<h1 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h1><p>当我们在客户端（浏览器）的地址栏输入一个网址并敲回车的时候，首先会执行的一步操作的就是DNS解析（也叫域名解析）。那什么是DNS解析呢？又为什么要进行DNS解析呢？带着这两个问题，我们来看看DNS解析。</p>
<h2 id="DNS（域名系统）"><a href="#DNS（域名系统）" class="headerlink" title="DNS（域名系统）"></a>DNS（域名系统）</h2><p><strong>1.DNS是什么？</strong></p>
<blockquote>
<p>DNS：Domain Name System（域名系统），互联网上作为域名和IP地址<strong>相互映射</strong>的一个分布式<strong>数据库</strong>。注意，我加粗了两个词“相互映射”和“数据库”，稍后再解释为什么要加粗它俩。</p>
</blockquote>
<p><strong>2.为什么要DNS解析？</strong><br>看了DNS的概念，有些同学可能觉着更加迷惑了，不要着急，咱们从DNS解析的过程方面来更好地了解它。要讲DNS的解析过程，首先咱们得先来了解一下计算机之间是怎样进行通信的。</p>
<h2 id="两台电脑之间通信"><a href="#两台电脑之间通信" class="headerlink" title="两台电脑之间通信"></a>两台电脑之间通信</h2><p>有两台电脑A和B，A电脑想向B电脑发送一条信息，那该怎么办呢？<br>其实很简单，就像邮递员（假设为电脑A）要给某栋大楼内的某个房间的客户（假设为电脑B）送邮件一样，邮递员要想把邮件送到客户手上，那他必须知道客户的大楼名称（或者说地址）以及客户在这栋大楼内的房间号。在互联网的世界中也是一样，电脑A想向电脑B发送一条信息，电脑A就得知道电脑B的<strong>MAC地址</strong>和<strong>IP地址</strong>。</p>
<p><strong>补充1：MAC地址</strong></p>
<blockquote>
<p>以太网规定，连入网络的所有设备，都必须具有“网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p>
</blockquote>
<p>就是说要想上网就得有块叫做“网卡”的东西，电脑的网卡很好理解，大家经常接触；而像路由器，交换机，手机，平板等联网的设备都有“网卡”这个东西。而两台设备（也可以理解为电脑）之间的通信就相当于两块网卡之间的通信，而这个网卡就是MAC地址，MAC地址就相当于“送邮件”例子中的客户房间号（啰嗦了一下，怕新手看不懂）。</p>
<blockquote>
<p>而每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。<br>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p>
</blockquote>
<p><img src="/images/mac.png" alt="MAC地址图片"></p>
<p>至于IP地址就不用再补充了吧，既然学计算机了，肯定知道IP地址。IP地址就相当于“送邮件”例子中的大楼名称（或者说地址）。</p>
<p><strong>总结：A电脑想向B电脑发送一条信息，首先A电脑要知道B电脑的MAC地址和IP地址，这其中IP地址一般是已知的，而MAC地址是未知的。这时候就需要通过ARP协议来确定B电脑的MAC地址，这其实也包括两种情况（不做详细介绍，更多了解请看阮一峰的<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="external">互联网协议入门（一）</a>）。只要拿到了电脑B的IP地址和MAC地址，两台电脑就可以通信了。</strong></p>
<h2 id="域名出现"><a href="#域名出现" class="headerlink" title="域名出现"></a>域名出现</h2><p>上面讲到一台电脑要想和另一台通信就需要知道另一台电脑的IP地址和MAC地址，MAC地址未知但可以通过ARP协议去获取，而IP地址是事先知道的，所以就可以通信了。但是，大家都知道IP地址这个东西是个由32位二进制组成的网络地址（IPv4），即使习惯上把它表示为四段十进制的形式（如202.201.112.232），也是不好记忆的，所以神通广大的人类就发明了<strong>域名</strong>来代替IP地址，其实就是给IP地址起了一个别名，这样就解决了IP地址不好记忆的问题了。</p>
<blockquote>
<p>任何一个域名都对应一个或者多个ip地址，但是大部分都是一个域名对应一个ip地址。</p>
</blockquote>
<h2 id="DNS小结"><a href="#DNS小结" class="headerlink" title="DNS小结"></a>DNS小结</h2><p>现在咱们再来看最初的问题:</p>
<blockquote>
<p>DNS：Domain Name System（域名系统），互联网上作为域名和IP地址<strong>相互映射</strong>的一个分布式<strong>数据库</strong>。</p>
</blockquote>
<p>现在应该明白了吧，域名系统就是储存IP地址和域名映射的一个数据库。而DNS解析，就是通过这个数据库去查找到可以使两台联网设备进行通信的IP地址的一个过程。当然这个过程是非常的繁琐的，想继续深入研究的同学可以查看阮一峰的<a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="external">DNS 原理入门</a>，现在你可以回答最初前面提到的那个问题了。<br>DNS是什么？<br>又为什么需要DNS解析？</p>
<h1 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h1><p>当两台联网设备通过IP地址和MAC地址完成了“链接”之后，接下来就是通信了，而通信就需要传输数据（哪怕只是一个没有数据的请求）。要想传输数据，就需要建立一个传输数据的链接（注意，我前面的链接加了引号，是因为那个时候两台电脑并为真正意义是的链接，只是找到对方了）。而这就牵扯到了另一个面试官常问的问题<strong>TCP的三次握手</strong>和<strong>TCP的四次挥手</strong>。</p>
<p><strong>补充2：端口</strong><br>首先来说，UDP和TCP都是传输层的协议，不同点就是传输的方式不同（简单的说，后面会详细说明他们的不同点）。<br>咱们在前面多次提到过通过IP地址和MAC地址可以建立两台电脑的“链接”，那么链接以后，应该怎样就行数据的传输呢？传输的数据是哪一个程序需要的呢（例如：同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？）？于是人们发明了一个叫做“端口”的参数来区别不同程序之间的通信。</p>
<blockquote>
<p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>
</blockquote>
<p>这样就可以进行数据的传输了。</p>
<h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p>UDP协议简单来说就是在数据包中插入一段数据用来标记端口信息，然后将数据发送出去，至于发送出去的数据包有没有被目标设备接收到，它就不管了。以这种方式发送数据包的有点就是<strong>简单</strong>，<strong>容易实现</strong>，但是缺点就是<strong>可靠性差</strong>，因为通过UDP协议发送出去的数据包无法确定发送的数据包是否到达目标设备。</p>
<h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>而TCP协议就是为了解决UDP协议的缺点而诞生的，它虽然实现上比UDP协议复杂，但是可靠性好，可以保证数据被发送到目标设备上。</p>
<h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p>TCP协议是如何保证可靠性的呢？就是通过三次与目标设备的通信来确定数据包发送成功。以浏览器和服务器的通信来打比方：</p>
<blockquote>
<p>浏览器：你好服务器，我是 <strong>浏览器A</strong>。<br>服务器：你好 <em>浏览器A</em>，我是 <strong>服务器B</strong>。<br>浏览器：<em>服务器B</em> 你好。</p>
</blockquote>
<p><strong>官方描述</strong><br><img src="/images/tcp.png" alt="TCP三次握手"></p>
<blockquote>
<ol>
<li>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</li>
<li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li>
<li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</li>
</ol>
</blockquote>
<p>完成三次握手，客户端与服务器开始传送数据。这样就保证了，每次传送数据都会准确到达目标设备了。</p>
<h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><p>当数据包发送完毕需要断开连接的时候，就需要TCP的四次挥手来保证链接的合理断开。再次以浏览器和服务器的通信打比方：</p>
<blockquote>
<p>主动结束方：你好，我的数据发送完毕了，我要进入准备断开的状态了。（此时它虽然不再发送数据了，但是可以接受数据）<br>另一方：我知道了，我还没有发送完毕的，你等着吧。<br>另一方：我也发送完毕了，可以断开链接了。（此时它也进入准备断开的状态）<br>主动结束方：好的，那断开吧。</p>
</blockquote>
<p><strong>官方描述</strong><br><img src="/images/tcp2.jpg" alt="TCP四次挥手"></p>
<blockquote>
<p>1.客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。<br>2.服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。<br>3.服务器B关闭与客户端A的连接，发送一个FIN给客户端A。<br>4.客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。</p>
</blockquote>
<h3 id="TCP为什么建立链接是三次，关闭链接是四次呢？"><a href="#TCP为什么建立链接是三次，关闭链接是四次呢？" class="headerlink" title="TCP为什么建立链接是三次，关闭链接是四次呢？"></a>TCP为什么建立链接是三次，关闭链接是四次呢？</h3><p>这是前端面试中在设计HTTP协议问题时，经常会被问的一个问题。其实也不难理解，因为服务端的listen状态下的socket当收到SYN报文的建连请求后，它可以把ACK和SYN（ACK起应答作用，而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。</p>
<p>通过TCP协议使得两台设备成功链接，并成功发送了数据，接下来，就需要服务器端来处理数据了。</p>
<h1 id="服务器处理数据并返回响应"><a href="#服务器处理数据并返回响应" class="headerlink" title="服务器处理数据并返回响应"></a>服务器处理数据并返回响应</h1><p>当服务器成功的接受到了浏览器发送的数据之后，接下来就是根据浏览器发送过来的数据就行后台程序的处理。这个过程就是在运行后端代码，当程序运行完成以后就产生了返回数据包，然后服务器端在通过TCP协议将数据包发送回浏览器。<br>这个过程和前面相比是不是很简单，其实不然，这个过程也相当复杂，只不过不是本文的重点就不详细介绍了，贴上一张Struts2的处理流程图，自己体会一下服务器端的某一个小阶段吧。<br><img src="/images/struts2.png" alt="Struts2流程图"></p>
<h1 id="浏览器解析数据并呈现"><a href="#浏览器解析数据并呈现" class="headerlink" title="浏览器解析数据并呈现"></a>浏览器解析数据并呈现</h1><p>当服务器返回数据包以后，接下来的工作就交给浏览器自己去处理这些数据，最后展示在页面上。这个过程涉及到了浏览器的运行原理的相关只是，本人也不是很懂，所以只是大概记录一下。</p>
<h2 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h2><p><strong>1. 用户界面：</strong>包括地址栏、后退/前进按钮、书签目录等，也就是你所看到的除了用来显示你所请求页面的主窗口之外的其他部分。<br><strong>2. 浏览器引擎：</strong>用来查询及操作渲染引擎的接口。<br><strong>3. 渲染引擎：</strong>用来显示请求的内容，例如，如果请求内容为html，它负责解析html及css，并将解析后的结果显示出来。<br><strong>4. 网络：</strong>用来完成网络调用，例如http请求，它具有平台无关的接口，可以在不同平台上工作。<br><strong>5. UI后端：</strong>用来绘制类似组合选择框及对话框等基本组件，具有不特定于某个平台的通用接口，底层使用操作系统的用户接口。<br><strong>6. JS解释器：</strong>用来解释执行JS代码。<br><strong>7. 数据存储：</strong>属于持久层，浏览器需要在硬盘中保存类似cookie的各种数据，HTML5定义了web database技术，这是一种轻量级完整的客户端存储技术</p>
<h2 id="渲染的流程"><a href="#渲染的流程" class="headerlink" title="渲染的流程"></a>渲染的流程</h2><p><img src="/images/rander.png" alt="渲染主流程"><br>可以简单的描述为以下四部分：<br>1.解析HTML以构建DOM树<br>2.构建render树<br>3.布局render树<br>4.绘制render树</p>
<p>但实际上渲染的过程是这样的：<br>1.在浏览器进行渲染的时候，渲染引擎首先会解析HTML代码，然后将标签转化为<strong>DOM树</strong>上的一个个对应节点（我们可以在chorme的Elements面板中查看到）。<br>2.接着，渲染引擎解析外部CSS文件及style标签中的样式信息。这些样式信息以及HTML中的可见性指令将被用来构建另一棵树—<strong>render树</strong>。Render树由一些包含有颜色和大小等属性的矩形组成，它们将被按照正确的顺序显示到屏幕上。<br>3.Render树构建好了之后，将会执行布局过程，它将确定每个节点在屏幕上的确切坐标。<br>4.然后就是绘制，即遍历render树，并使用UI后端层绘制每个节点。</p>
<p>值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>
<p><strong>补充WEBKIT渲染引擎和GECKO渲染引擎</strong><br><img src="/images/webkit.png" alt="WEBKIT渲染引擎流程图"><br><img src="/images/gecko.png" alt="GECKO渲染引擎流程图"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里基本上整个网络请求的过程就结束了，你在浏览器地址框输入了域名并回车，然后通过<strong>DNS解析</strong>找到相应的IP地址；然后通过<strong>HTTP协议建立了链接</strong>，找到了目标服务器的位置；接着就是<strong>TCP三次握手</strong>建立可靠链接，发送数据，<strong>服务器处理数据</strong>，<strong>TCP四次挥手</strong>断开链接；最后浏览器根据返回的数据<strong>解析渲染呈现页面</strong>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SASS基础入门]]></title>
      <url>https://chping2125.github.io/2016/09/02/sass/</url>
      <content type="html"><![CDATA[<p>早就听说过SASS,一直没来得及学习，最近正好有时间，就去学习了一下。做过前端的人知道，css不是一门编程语言，全程Cascading Style Sheet(层叠样式表)，自然它也就没有什么变量、语句、操作符、函数这些概念。所以说css有时候被前端诟病经常重复写，及时在优化也不如写编程语言来的直接，所以人们就开始思考，慢慢的css也有了一些编程性的元素。于是“CSS预处理器”就光荣诞生了。这些“CSS预处理器”的核心或者说思路就是工程师用一门编程语言去书写前端样式，然后交给“CSS预处理器”去转化成css文件。SASS就是其中之一。<br><a id="more"></a></p>
<h2 id="SASS简介"><a href="#SASS简介" class="headerlink" title="SASS简介"></a>SASS简介</h2><p>SASS是css开发的一种工具，SASS的使用可以是前端css开发更加高效，使得css代码更加的方便维护和简单。</p>
<h2 id="SASS的安装"><a href="#SASS的安装" class="headerlink" title="SASS的安装"></a>SASS的安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。<br>假定你已经安装好了Ruby，接着在命令行输入下面的命令：<br>    <code>gem install SASS</code><br>然后，就可以使用了。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>SASS文件就是普通的文本文件，里面可以直接使用CSS语法。<br>SASS有两种后缀名文件：一种后缀名为SASS，不使用大括号和分号。<br>另一种就是我们这里使用的scss文件，这种和我们平时写的css文件格式差不多，使用大括号和分号。<br>而本文中所说的所有SASS文件都指后缀名为scss的文件。在此也建议使用后缀名为scss的文件，以避免SASS后缀名的严格格式要求报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//文件后缀名为SASS的语法</div><div class="line">body</div><div class="line">  background: #eee</div><div class="line">  font-size:12px</div><div class="line">p</div><div class="line">  background: #0982c1</div><div class="line"></div><div class="line">//文件后缀名为scss的语法  </div><div class="line">body &#123;</div><div class="line">  background: #eee;</div><div class="line">  font-size:12px;</div><div class="line">&#125;</div><div class="line">p&#123;</div><div class="line">  background: #0982c1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面的命令，可以在屏幕上显示.scss文件转化的css代码（假设文件名为test）。<br>　　    <code>SASS test.scss</code></p>
<p>如果要将显示结果保存成文件，后面再跟一个.css文件名。<br>　　    <code>SASS test.scss test.css</code></p>
<p>SASS提供四个<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#output_style" target="_blank" rel="external">编译风格</a>的选项:</p>
<ul>
<li>nested：嵌套缩进的css代码，它是默认值。</li>
<li>expanded：没有缩进的、扩展的css代码。</li>
<li>compact：简洁格式的css代码。</li>
<li>compressed：压缩后的css代码。</li>
</ul>
<p>生产环境当中，一般使用最后一个选项。<br>    <code>SASS --style compressed test.SASS test.css</code><br>你也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// watch a file</div><div class="line">SASS --watch input.scss:output.css</div><div class="line">// watch a directory</div><div class="line">SASS --watch app/SASS:public/stylesheets</div></pre></td></tr></table></figure></p>
<p>SASS的官方网站，提供了一个<a href="http://www.sassmeister.com" target="_blank" rel="external">在线转换器</a>。你可以在那里，试运行下面的各种例子。</p>
<h2 id="SASS基本语法"><a href="#SASS基本语法" class="headerlink" title="SASS基本语法"></a>SASS基本语法</h2><p>接下来我们按照学习一门编程语言的顺序来讲讲SASS的基础语法。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>SASS共有两种注释风格。<br>标准的CSS注释 /<em> 注释内容 </em>/ ，会保留到编译后的文件。<br>单行注释 // 注释内容，只保留在SASS源文件中，<strong>编译后被省略</strong>。<br>在/*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/*!</div><div class="line"> 	重要注释！</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>SASS中可以使用变量，所有的变量是以$开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(:)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。</p>
<h4 id="普通变量和默认变量"><a href="#普通变量和默认变量" class="headerlink" title="普通变量和默认变量"></a>普通变量和默认变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	$blue: #1875e7;  //普通变量</div><div class="line"></div><div class="line">	div&#123;</div><div class="line">		color: $blue;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//默认变量：sass的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可</div><div class="line">	$baseLineHeight:        2;</div><div class="line">	$baseLineHeight:        1.5 !default;</div><div class="line">	body&#123;</div><div class="line">	    line-height: $baseLineHeight; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果变量需要嵌套在字符串中的话，需要写在#{}中再利用$引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$side: left;</div><div class="line"></div><div class="line">div&#123;</div><div class="line">	border-#&#123;$side&#125;: 1px solid #f00;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="多值变量"><a href="#多值变量" class="headerlink" title="多值变量"></a>多值变量</h4><p>多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。</p>
<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>list数据可通过空格，逗号或小括号分隔多个值，可用nth(\$var,\$index)取值。关于list数据操作还有很多其他函数如length(\$list)，join(\$list1,\$list2,[\$separator])，append(\$list,\$value,[\$separator])等，具体可参考sass Functions（搜索List Functions即可）<br><strong>定义</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//一维数据</div><div class="line">$px: 5px 10px 20px 30px;</div><div class="line"></div><div class="line">//二维数据，相当于js中的二维数组</div><div class="line">$px: 5px 10px, 20px 30px;</div><div class="line">$px: (5px 10px) (20px 30px);</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$linkColor:         #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值</div><div class="line">a&#123;</div><div class="line">  color:nth($linkColor,1);</div><div class="line"></div><div class="line">  &amp;:hover&#123;</div><div class="line">    color:nth($linkColor,2);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map数据以key和value成对出现，其中value又可以是list。格式为：\$map: (key1: value1, key2: value2, key3: value3);可通过map-get(\$map,\$key)取值。关于map数据还有很多其他函数如map-merge(\$map1,\$map2)，map-keys(\$map)，map-values($map)等，具体可参考<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html" target="_blank" rel="external">sass Functions</a>（搜索Map Functions即可）<br><strong>定义</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</div><div class="line">@each $header, $size in $headings &#123;</div><div class="line">  #&#123;$header&#125; &#123;</div><div class="line">    font-size: $size;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>在变量值后面加上!global即为全局变量。这个目前还用不上，不过将会在sass 3.4后的版本中正式应用。目前的sass变量范围饱受诟病，所以才有了这个全局变量。<br>目前变量机制<br>在选择器中声明的变量会覆盖外面全局声明的变量。(这也就人们常说的sass没有局部变量)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$fontSize:      12px;</div><div class="line">body&#123;</div><div class="line">    $fontSize: 14px;        </div><div class="line">    font-size:$fontSize;</div><div class="line">&#125;</div><div class="line">p&#123;</div><div class="line">    font-size:$fontSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启用global之后的机制<br>请注意，这个目前还无法使用，所以样式不是真实解析出来的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$fontSize:      12px;</div><div class="line">$color:         #333;</div><div class="line">body&#123;</div><div class="line">    $fontSize: 14px;        </div><div class="line">    $color：   #fff !global;</div><div class="line">    font-size:$fontSize;</div><div class="line">    color:$color;</div><div class="line">&#125;</div><div class="line">p&#123;</div><div class="line">    font-size:$fontSize;</div><div class="line">    color:$color;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里设置了两个变量，然后在body里面重新设置了下，有点不同的是对于$color变量，我们设置了!global。通过编译后的css可以看到font-size取值不同，而color取值相同。与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了!global之后才会成为全局变量。<br>关于变量的详细分析请查阅<a href="http://www.w3cplus.com/preprocessor/sass-basic-variable.html" target="_blank" rel="external">sass揭秘之变量</a>。</p>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>SASS中也可以使用一些对数值型的Value(如：数字、颜色、变量等)进行加减乘除四则运算。请注意运算符前后请留一个空格，不然会出错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">　　　　margin: (14px/2);</div><div class="line">　　　　top: 50px + 100px;</div><div class="line">　　　　right: $var * 10%;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>SASS的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。我们一般说起或用到的都是选择器的嵌套。</p>
<h4 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h4><p>所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//css代码</div><div class="line">div h1 &#123;</div><div class="line">　　　　color : red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　div &#123;</div><div class="line">　　　　hi &#123;</div><div class="line">　　　　　　color:red;</div><div class="line">　　　　&#125;</div></pre></td></tr></table></figure></p>
<h4 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h4><p>属性也可以嵌套，比如border-color属性，可以写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　p &#123;</div><div class="line">　　　　border: &#123;</div><div class="line">　　　　　　color: red;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>注意，border后面必须加上<strong>冒号</strong>。<br>在嵌套的代码块内，可以使用&amp;引用父元素。比如a:hover伪类，可以写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　a &#123;</div><div class="line">　　　　&amp;:hover &#123; color: #ffb3ff; &#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码的重用"><a href="#代码的重用" class="headerlink" title="代码的重用"></a>代码的重用</h2><h3 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h3><p>SASS的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。但是如果你在SASS文件中导入css文件如@import ‘reset.css’，那效果跟普通CSS导入样式文件一样，导入的css文件不会合并到编译后的文件中，而是以@import方式存在。<br>所有的SASS导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。<br>被导入SASS文件a.scss：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//a.scss</div><div class="line">//-------------------------------</div><div class="line">body &#123;</div><div class="line">  background: #eee;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要导入样式的SASS文件b.scss：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@import &quot;reset.css&quot;;</div><div class="line">@import &quot;a&quot;;</div><div class="line">p&#123;</div><div class="line">  background: #0982c1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>转译出来的b.css样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@import &quot;reset.css&quot;;</div><div class="line">body &#123;</div><div class="line">  background: #eee;</div><div class="line">&#125;</div><div class="line">p&#123;</div><div class="line">  background: #0982c1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据上面的代码可以看出，b.scss编译后，reset.css继续保持import的方式，而a.scss则被整合进来了。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>SASS允许一个选择器，继承另一个选择器。比如，现有class1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　.class1 &#123;</div><div class="line">　　　　border: 1px solid #ddd;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>class2要继承class1，就要使用@extend命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　.class2 &#123;</div><div class="line">　　　　@extend .class1;</div><div class="line">　　　　font-size:120%;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p><strong>占位符选择器</strong><br>从sass 3.2.0以后就可以定义占位选择器%。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了@extend去继承相应的样式，都会解析出来所有的样式。占位选择器以%标识定义，通过@extend调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//sass style</div><div class="line">//-------------------------------</div><div class="line">%ir&#123;</div><div class="line">  color: transparent;</div><div class="line">  text-shadow: none;</div><div class="line">  background-color: transparent;</div><div class="line">  border: 0;</div><div class="line">&#125;</div><div class="line">%clearfix&#123;</div><div class="line">  @if $lte7 &#123;</div><div class="line">    *zoom: 1;</div><div class="line">  &#125;</div><div class="line">  &amp;:before,</div><div class="line">  &amp;:after &#123;</div><div class="line">    content: &quot;&quot;;</div><div class="line">    display: table;</div><div class="line">    font: 0/0 a;</div><div class="line">  &#125;</div><div class="line">  &amp;:after &#123;</div><div class="line">    clear: both;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.ir&#123;</div><div class="line">  @extend %ir;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>则%clearfix不会被编译成css。</p>
<h3 id="Mixin-混合"><a href="#Mixin-混合" class="headerlink" title="Mixin(混合)"></a>Mixin(混合)</h3><p>Mixin有点像C语言的宏（macro），是可以重用的代码块。<br>使用@mixin命令，定义一个代码块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　@mixin left &#123;</div><div class="line">　　　　float: left;</div><div class="line">　　　　margin-left: 10px;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>使用@include命令，调用这个mixin。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　div &#123;</div><div class="line">　　　　@include left;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>mixin的强大之处，在于可以指定参数和缺省值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　@mixin left($value: 10px) &#123;</div><div class="line">　　　　float: left;</div><div class="line">　　　　margin-right: $value;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>使用的时候，根据需要加入参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　div &#123;</div><div class="line">　　　　@include left(20px);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>下面是一个mixin的实例，用来生成浏览器前缀。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　@mixin rounded($vert, $horz, $radius: 10px) &#123;</div><div class="line">　　　　border-#&#123;$vert&#125;-#&#123;$horz&#125;-radius: $radius;</div><div class="line">　　　　-moz-border-radius-#&#123;$vert&#125;#&#123;$horz&#125;: $radius;</div><div class="line">　　　　-webkit-border-#&#123;$vert&#125;-#&#123;$horz&#125;-radius: $radius;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>使用的时候，可以像下面这样调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　#navbar li &#123; @include rounded(top, left); &#125;</div><div class="line">　　#footer &#123; @include rounded(top, left, 5px); &#125;</div></pre></td></tr></table></figure></p>
<h3 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h3><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　lighten(#cc3, 10%) // #d6d65c</div><div class="line">　　darken(#cc3, 10%) // #a3a329</div><div class="line">　　grayscale(#cc3) // #808080</div><div class="line">　　complement(#cc3) // #33c</div></pre></td></tr></table></figure></p>
<p>更多关于颜色函数的内容可以参阅<a href="http://www.w3cplus.com/preprocessor/sass-color-function.html" target="_blank" rel="external">Sass基础——颜色函数</a></p>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>@if可以用来判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　p &#123;</div><div class="line">　　　　@if 1 + 1 == 2 &#123; border: 1px solid; &#125;</div><div class="line">　　　　@if 5 &lt; 3 &#123; border: 2px dotted; &#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>配套的还有@else命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　@if lightness($color) &gt; 30% &#123;</div><div class="line">　　　　background-color: #000;</div><div class="line">　　&#125; @else &#123;</div><div class="line">　　　　background-color: #fff;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>SASS支持for循环：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　@for $i from 1 to 10 &#123;</div><div class="line">　　　　.border-#&#123;$i&#125; &#123;</div><div class="line">　　　　　　border: #&#123;$i&#125;px solid blue;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>也支持while循环：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　$i: 6;</div><div class="line">　　@while $i &gt; 0 &#123;</div><div class="line">　　　　.item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</div><div class="line">　　　　$i: $i - 2;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>each命令，作用与for类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　@each $member in a, b, c, d &#123;</div><div class="line">　　　　.#&#123;$member&#125; &#123;</div><div class="line">　　　　　　background-image: url(&quot;/image/#&#123;$member&#125;.jpg&quot;);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>关于循环判断详细分析请查阅：<a href="http://www.w3cplus.com/preprocessor/sass-advanced-application.html" target="_blank" rel="external">sass揭秘之@if，@for，@each</a></p>
<h3 id="三目判断"><a href="#三目判断" class="headerlink" title="三目判断"></a>三目判断</h3><p>语法为：if($condition, $if_true, $if_false) 。三个参数分别表示：条件，条件为真的值，条件为假的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if(true, 1px, 2px) =&gt; 1px</div><div class="line">if(false, 1px, 2px) =&gt; 2px</div></pre></td></tr></table></figure></p>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>SASS定义了很多函数可供使用，当然你也可以自己定义函数，以@fuction开始。实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以lighten减淡和darken加深为最，其调用方法为lighten($color,$amount)和darken($color,$amount)，它们的第一个参数都是颜色值，第二个参数都是百分比。<br>颜色函数前面提及过了，下面是自己的定义函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　@function double($n) &#123;</div><div class="line">　　　　@return $n * 2;</div><div class="line">　　&#125;</div><div class="line">　　#sidebar &#123;</div><div class="line">　　　　width: double(5px);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>关于更多关于函数的详细分析请查阅<a href="http://www.w3cplus.com/preprocessor/sass-other-function.html" target="_blank" rel="external">Sass基础——Sass函数</a></p>
<p>本文主要按照阮一峰的<a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">SASS用法指南</a>和<a href="http://www.w3cplus.com/" target="_blank" rel="external">w3cplus</a>对SASS的基础语法讲解的整合，主要为了自己学习使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown入门]]></title>
      <url>https://chping2125.github.io/2016/09/02/markDown/</url>
      <content type="html"><![CDATA[<p>这几天一直在搭建Hexo静态Bolg,其中必不可免的就要会使用Markdown的语法来写静态博客，由于本身就是做前端的，所以说学会使用Markdown没什么太大难度，也就是一刻钟的事。因为Markdown常用的语法十分简单，常用的格式输出标记不超过十个。所以说Markdown是一种轻量级的标记语言一点也不为过（创始人貌似就是为这个目的写的），比起相对复杂的HTML标记语言来说，Markdown的优势就更加明显了。<br><a id="more"></a></p>
<h2 id="认识Markdown"><a href="#认识Markdown" class="headerlink" title="认识Markdown"></a>认识Markdown</h2><p>在刚才的导语里提到，Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持 Markdown 语法的编辑器有很多，包括很多网站（例如简书）也支持了 Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。甚至可以利用 CloudApp 这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台 Tumblr，也支持使用 Mou 这类 Markdown 工具进行编辑并直接上传。</p>
<h3 id="MarkDown-官方文档"><a href="#MarkDown-官方文档" class="headerlink" title="MarkDown 官方文档"></a>MarkDown 官方文档</h3><p><blockquote class="blockquote-center">这里可以看到官方的 Markdown 语法规则文档，后文也会阐述这些语法在实际使用中的用法。</blockquote><br><a href="http://daringfireball.net/projects/markdown/syntax" style="border:0;color:#f00;" target="_blank" rel="external">创始人 John Gruber 的 Markdown 语法说明</a><br><a href="http://wowubuntu.com/markdown/#list" style="border:0;color:#f00;" target="_blank" rel="external">Markdown 中文版语法说明</a></p>
<h3 id="使用-Markdown-的优点"><a href="#使用-Markdown-的优点" class="headerlink" title="使用 Markdown 的优点"></a>使用 Markdown 的优点</h3><ol>
<li>专注你的文字内容而不是排版样式。</li>
<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>可读，直观。适合所有人的写作语言</li>
</ol>
<h2 id="MarkDown-语法的简要规则"><a href="#MarkDown-语法的简要规则" class="headerlink" title="MarkDown 语法的简要规则"></a>MarkDown 语法的简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//标题书写格式：</div><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure></p>
<p><img src="/images/markdown_img1.png" alt="标题页面展示"><br>总共六级标题，相对于HTML中的h1~h6，建议在井号后加一个<strong>空格</strong>，这是最标准的 Markdown 语法。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的<strong>空格</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//无序列表书写格式：</div><div class="line">* 无序列表</div><div class="line">* 无序列表</div><div class="line">* 无序列表</div><div class="line"></div><div class="line">//无序列表书写格式：</div><div class="line">1. 有序列表</div><div class="line">2. 有序列表</div><div class="line">3.有序列表</div></pre></td></tr></table></figure></p>
<p><img src="/images/markdown_img2.png" alt="列表页面展示"></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入 &gt; 这种尖括号（大于号）即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//引用书写格式：</div><div class="line">&gt; 引用内容</div></pre></td></tr></table></figure></p>
<p><img src="/images/markdown_img3.png" alt="引用页面展示"></p>
<h3 id="图片和和连接"><a href="#图片和和连接" class="headerlink" title="图片和和连接"></a>图片和和连接</h3><p>插入链接与插入图片的语法很像，区别在一个 !号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//插入链接书写格式：</div><div class="line">[前端小开发](http://chping.website)</div><div class="line"></div><div class="line">//插入图片书写格式：</div><div class="line">![彬仔img](http://chping.website/images/avatar.png)</div><div class="line"></div><div class="line">/**</div><div class="line"> * 插入图片时，“[]”内文本类似于HTML的img标签的alt属性</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p><a href="http://chping.website" target="_blank" rel="external">前端小开发</a></p>
<p><img src="http://chping.website/images/avatar.png" alt="彬仔img" width="100" height="100"></p>
<h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//粗体书写格式：</div><div class="line">**这是粗体**</div><div class="line"></div><div class="line">//斜体书写格式：</div><div class="line">*这是斜体*</div></pre></td></tr></table></figure></p>
<p><img src="/images/markdown_img4.png" alt="粗体和斜体页面展示"></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是 Markdown 中有些比较累人的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| Tables        | Are           | Cool  |</div><div class="line">| ------------- |:-------------:| -----:|</div><div class="line">| col 3 is      | right-aligned | $1600 |</div><div class="line">| col 2 is      | centered      |   $12 |</div><div class="line">| zebra stripes | are neat      |    $1 |</div></pre></td></tr></table></figure></p>
<p><img src="/images/markdown_img5.png" alt="表格页面展示"></p>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown 下实现也非常简单，只需要用<strong>两个 ` </strong>把中间的代码包裹起来，如`code`。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">``</div><div class="line">	代码...</div><div class="line">	默认该区域内内容是不解析的。</div><div class="line">``</div></pre></td></tr></table></figure></p>
<p>使用 tab 键即可缩进。</p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要另起一行，连续输入三个星号 <em>*</em> 即可。</p>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上内容是一些Markdown的基本语法，利用上面的这几条语法来书写博客文章已经没有太多问题了。可能还有需要注意一些空格或者缩进的规则。另外有时候可能你想自定义一些页面的样式来美化自己的博客文章，你就可以在markdown文档中直接书写HTML进一步美化，这些内容等有时间再写一篇文章介绍吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建]]></title>
      <url>https://chping2125.github.io/2016/08/31/Hexo1/</url>
      <content type="html"><![CDATA[<p>经过一天的折磨，终于在10点之前把GitHub+Hexo给搭起来了，我配置的主题是NexT，战线拉得虽然有些长，但是有很多感悟。<br><a id="more"></a><br>第一次自己搭建博客系统，尤其是对git使用还一知半解的情况下，最后取得成功感觉很满足。同时发现随着自己对行业的了解和自己能力的一步步提升，这种感触越来越深。有时，一个问题搞一天也得不到想要的结果，急的暴跳如雷，情绪异常激动，稍不留神就影响他人，同时也影响自己。但是当最后成功解决问题后，内心获得巨大的满足感的同时，相信更应该去考虑自己处理问题方式和思路。</p>
<hr>
<h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>不过多废话了，进入正题。<br>我的安装过程是按照网上百度的几篇Hexo系列教程安装的，可以说每个人的安装教程各有优缺点，但总体来说都是不错的，几篇文章相互借鉴，基本上遇到的问题都能解决，即时没有在这几篇文档里找到自己遇到的问题，百度一下(Google更好)也都能解决。</p>
<h3 id="安装参考文章"><a href="#安装参考文章" class="headerlink" title="安装参考文章"></a>安装参考文章</h3><ol>
<li><a href="https://www.mashiro.io/2015/09/hexo-guide-1/" target="_blank" rel="external">Hexo系列教程: (一)Hexo介绍</a></li>
<li><a href="http://blog.csdn.net/willxue123/article/details/50994846#0-tsina-1-88189-397232819ff9a47a7b7e80a40613cfe1" target="_blank" rel="external">Hexo系列教程之一：hexo-github搭建独立博客</a></li>
<li><a href="https://xuanwo.org/2014/08/14/hexo-usual-problem/" target="_blank" rel="external">Hexo常见问题解决方案</a></li>
</ol>
<p>按照上面三位博主的教程相互对比查看，终于在放学之前（22:30实验室关门）搭建完成整个Hexo。接下来记录一下自己的一些小问题，方便以后遇到的时候，有地方查资料,另外安装完成才发现<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>的官方文档（网站右上角有语言切换，默认英语）和<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT主题</a>的官方安装教程。</p>
<hr>
<h3 id="Hexo安装小记录"><a href="#Hexo安装小记录" class="headerlink" title="Hexo安装小记录"></a>Hexo安装小记录</h3><ol>
<li><h4 id="Git版本冲突"><a href="#Git版本冲突" class="headerlink" title="Git版本冲突"></a>Git版本冲突</h4><blockquote>
<p><strong>问题描述：</strong><br> 电脑Windows10 64位，朋友传了一个Git 32位版本，还特意告诉我没有任何问题，64位也能运行，然后我就自信满满的开始安装，结果不知道是网速原因还是Windows10的原因，始终停留在 “npm install -g hexo”这一步，死活过不去。正常来说一般挺多一两分钟就完了（可能更快），但是我这活活搞了半小时没安装上hexo,抱着试试看的态度去换了一个Git 64位版本，立马成功（可能有些电脑不会出现此情况）。</p>
</blockquote>
</li>
<li><h4 id="Hexo的文件目录"><a href="#Hexo的文件目录" class="headerlink" title="Hexo的文件目录"></a>Hexo的文件目录</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.deploy_git: hexo和gitHub的同步目录，这个文件夹在第一次本地与GitHub同步时才会出现（hexo deploy命令执行后）。</div><div class="line"></div><div class="line">node_modules：hexo本地安装的插件目录(比如：npm install hexo-deployer-git --save命令安装的插件hexo-deployer-git，就在此文件下有一个文件夹)。</div><div class="line"></div><div class="line">scaffolds：模板布局文件目录，通过“ hexo new page [文件名]”新建的文件就是利用的该目录下page.md的布局模板生成的。</div><div class="line"></div><div class="line">source：资源目录，博客、图片、站点图片等相关的资源都在这个文件目录下存着。</div><div class="line"></div><div class="line">themes: 主题的存放路径，配置主题或者自定义主题时经常用。</div><div class="line"></div><div class="line">_config.yml：hexo 配置文件，刚开始搭建的时候需要手动常用。</div></pre></td></tr></table></figure>
</li>
<li><h4 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="_config.yml配置文件"></a>_config.yml配置文件</h4><p> 为了方便阅读，我分了一下代码块，下面都是_config.yml文件内的配置项。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site                                   ##站点配置</div><div class="line">title: 前端小开发                         ##站点名称,一级标题</div><div class="line">subtitle: 随笔 分享 笔记 			 ##站点二级标题</div><div class="line">description: 分享前端技术 整理学习笔记     ##站点简介（个人简介）</div><div class="line">author: 彬仔                             ##站点博主昵称</div><div class="line">avatar: /images/avatar.png               ##站点博主头像（自定义添加的，照片存放在source/images路径下）</div><div class="line">language: zh-Hans                        ##站点语言</div><div class="line">timezone: Asia/Hong_Kong                 ##站点时区</div><div class="line"></div><div class="line"># URL  ##网址</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</div><div class="line">url: https://chping2125.github.io/    ##没有子目录则设置为username.github.io(资源的引用会将该URL拼在资源路径前面)</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/  ##如果有子目录生成文件名字的格式我改成blog/:title:year:month:day/，否则不改</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># Directory                  ##资源目录配置</div><div class="line">source_dir: source           ##站点资源文件夹（即Hexo的文件目录中source文件夹）</div><div class="line">public_dir: public           ##站点公共文件夹（这个文件夹用于存放生成的站点文件，一般为临时文件&quot;hexo g&quot;命令后会生成，“hexo clean”命令会删除该文件）</div><div class="line">tag_dir: tags                ##标签文件夹</div><div class="line">archive_dir: archives        ##归档文件夹</div><div class="line">category_dir: categories     ##分类文件夹</div><div class="line">code_dir: downloads/code     ##nclude code 文件夹</div><div class="line">i18n_dir: :lang              ##国际化（i18n）文件夹</div><div class="line">skip_render: README.md       ##跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。(GitHub中的README.md就配置在这里，防止渲染)</div><div class="line"></div><div class="line"># Writing   ##博客文章</div><div class="line">new_post_name: :title.md # File name of new posts  ##默认文章名称</div><div class="line">default_layout: post                               ##默认文章布局样式</div><div class="line">titlecase: false                                   ##小写文章标题</div><div class="line">external_link: true                                ##在新标签中打开一个外部链接，默认为true</div><div class="line">filename_case: 0  ##转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</div><div class="line">render_drafts: false                               ##是否渲染_drafts目录下的文章，默认为false</div><div class="line">post_asset_folder: false                           ###启动 Asset 文件夹</div><div class="line">relative_link: false                               ##把链接改为与根目录的相对位址，默认false</div><div class="line">future: true                                       ##显示未来的文章，默认false</div><div class="line">highlight:                                         ##代码块的设置</div><div class="line">  enable: true                        ##默认开启</div><div class="line">  line_number: true                   ##行号，默认开启</div><div class="line">  auto_detect: false                  ##自动检测</div><div class="line">  tab_replace:</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"># Category &amp; Tag                      ##分类和标签的设置</div><div class="line">default_category: uncategorized       ##默认分类</div><div class="line">category_map:                         ##分类别名</div><div class="line">tag_map:                              ##标签别名</div><div class="line"></div><div class="line"># Date / Time format </div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination ##分页</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10          ##每页显示的文章量 (0 = 关闭分页功能)</div><div class="line">pagination_dir: page  # #分页目录</div><div class="line"></div><div class="line"># Extensions        ##主题设置</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: next         ##主题名称</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:            ##部署地址github设置</div><div class="line">  type: git        ## 部署的位置  写git</div><div class="line">  repository: git@github.com:chping2125/chping2125.github.io.git </div><div class="line">  ## 这里填写项目的地址 git@github.com:Git用户名/Git用户名.github.io.git 参照上面</div><div class="line">  branch: master   ## 分支选择 master</div><div class="line"></div><div class="line">####自定义第三方插件</div><div class="line"></div><div class="line"># Share      ##博客文章分享功能</div><div class="line">##Duoshuo_Share       ##多少分享</div><div class="line">duoshuo_shortname: chping    ##就是在多少设置的站点名称</div><div class="line">duoshuo_share: true </div><div class="line"></div><div class="line">##JiaThis_Share       ##JiaThis分享</div><div class="line">jiathis: false </div><div class="line"></div><div class="line">##baidu_Share         ##百度分享</div><div class="line">baidushare: false</div><div class="line"></div><div class="line"></div><div class="line">#BaiDu_Analytics      ##百度分析</div><div class="line">baidu_analytics: c8027b8ba4beebe6ebe89d22781de0a1 </div><div class="line"></div><div class="line">##search              ##搜索功能</div><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
<p> 配置文件的第三方配置部分是自定义添加的。</p>
</li>
<li><h4 id="主题目录（以NexT为例）"><a href="#主题目录（以NexT为例）" class="headerlink" title="主题目录（以NexT为例）"></a>主题目录（以NexT为例）</h4><p> <img src="/images/heox_img1.png" alt="next目录"></p>
<ol>
<li>主题语言目录<br> 该文件夹主要是各种NexT主题内置的语言包，如果主题定制的时候，添加的内容在语言包中没有对应的映射，则需要自己添加（如：以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项：something: 有料）。</li>
<li>主题结构目录<br> 该文件夹是主题的HTML结构，想改动主题的大结构，可以在这里找到对应的部分修改。</li>
<li>主题行为目录<br> 该文件夹是主题的部分js文件。</li>
<li>主题资源目录<br> 该文件下资源比较多，有css文件、fonts文件、img文件、js文件、其他。其中最常用的就是css文件，和主题结构目录相结合进行定制用的最多的文件目录，再结合下图详细记录一下。<br> <img src="/images/hexo_img2.png" alt="next-css文件目录"><br> i. _common文件下包括三个文件夹：<pre><code>scaffolding文件夹下放得是css样式重置文件
outline文件夹下放得是主题大结构的的css文件，包括header/main/footer等结构的样式。
components文件夹下放的事主题的各个模块的样式，命名方式和模块一样，想改哪里就改哪里。
</code></pre> ii. _custom文件下包括一个custom.styl文件，在该文件内编辑的任何css样式优先级最高，所以可以将自定义修改的css样式写在这里面。<br> iii. _mixins文件下放置的事混合开发的一些样式，自适应适配用。该文件夹下也有一个custom.styl文件，用于自定义适配样式。<br> iiii. _schemes文件下放置的是NexT自带的三个主题单独配置文件，当你自定义修改时，如果在_common文件夹下没有找到对应的样式，那么它肯定在这里面呢，找到你对应的主题下修改就好了。<br> vi. _variables文件夹下放置的是变量的文件，包括数值型的变量（高度，宽度等）和默认颜色变量等。其中该文件夹下也有一个custom.styl文件，用于自定义适配样式。<br> vii. main.styl文件将各个模块的样式文件引入。<br> <strong>css优先级为：_custom &gt; _schemes &gt; _common/_mixins</strong></li>
</ol>
</li>
<li><h4 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Site Information Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /favicon.ico    ##站点图片，“/”为站点根目录下的sourse文件</div><div class="line"></div><div class="line"># Set default keywords (Use a comma to separate)</div><div class="line">keywords: &quot;前端,技术,HTML,CSS,JS,NodeJs&quot;  ##站点关键字，</div><div class="line"></div><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss:                                     ##rss设置，需下载插件</div><div class="line"></div><div class="line"># Specify the date when the site was setup</div><div class="line">since: 2015                              ##底部时间设置格式： 2015-今年</div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Menu Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</div><div class="line">menu:			##菜单设置，“/”：站点根目录下的文件或文件夹</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  tags: /tags</div><div class="line">  archives: /archives</div><div class="line">  about: /about</div><div class="line">  #commonweal: /404.html</div><div class="line"></div><div class="line"># Enable/Disable menu icons.</div><div class="line"># Icon Mapping:</div><div class="line">#   Map a menu item to a specific FontAwesome icon name.</div><div class="line">#   Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.</div><div class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</div><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes     ##next的三个scheme</div><div class="line">#scheme: Muse</div><div class="line">#scheme: Mist</div><div class="line">scheme: Pisces</div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Font Settings</div><div class="line"># - Find fonts on Google Fonts (https://www.google.com/fonts)</div><div class="line"># - All fonts set here will have the following styles:</div><div class="line">#     light, light italic, normal, normal intalic, bold, bold italic</div><div class="line"># - Be aware that setting too much fonts will cause site running slowly</div><div class="line"># - Introduce in 5.0.1</div><div class="line"># ---------------------------------------------------------------</div><div class="line">font:            ##字体设置</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</div><div class="line">  host:</div><div class="line"></div><div class="line">  # Global font settings used on &lt;body&gt; element.</div><div class="line">  global:</div><div class="line">    # external: true will load this font family from host.</div><div class="line">    external: true</div><div class="line">    family: Lato</div><div class="line"></div><div class="line">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6)</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  headings:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"></div><div class="line">  # Font settings for posts</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  posts:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"></div><div class="line">  # Font settings for Logo</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  # The `size` option use `px` as unit</div><div class="line">  logo:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line">    size:</div><div class="line"></div><div class="line">  # Font settings for &lt;code&gt; and code blocks.</div><div class="line">  codes:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Sidebar Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Social Links</div><div class="line"># Key is the link label showing to end users.</div><div class="line"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</div><div class="line">social:             ##社交账号设置</div><div class="line">  Weibo: http://weibo.com/chengping2125 </div><div class="line">  GitHub: https://github.com/chping2125 </div><div class="line"></div><div class="line"># Social Links Icons</div><div class="line"># Icon Mapping:</div><div class="line">#   Map a menu item to a specific FontAwesome icon name.</div><div class="line">#   Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.</div><div class="line">#   When an globe mask icon presenting up means that the item has no mapping icon.</div><div class="line">social_icons:        ##社交账号对应的小图标</div><div class="line">  enable: true</div><div class="line">  # Icon Mappings.</div><div class="line">  # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  Weibo: weibo</div><div class="line"></div><div class="line"># Sidebar Avatar</div><div class="line"># in theme directory(source/images): /images/avatar.jpg</div><div class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class="line">avatar: /images/avatar.png          ##站点博主头像设置，站点配置中已设置</div><div class="line"></div><div class="line"># Table Of Contents in the Sidebar</div><div class="line">toc:                    ##文章自动显示目录</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Automatically add list number to toc.</div><div class="line">  ##目录是否自动显示数字序号</div><div class="line">  number: true</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># Creative Commons 4.0 International License.</div><div class="line"># http://creativecommons.org/</div><div class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</div><div class="line">#creative_commons: by-nc-sa</div><div class="line">#creative_commons:</div><div class="line"></div><div class="line">sidebar:      ##侧边栏设置</div><div class="line">  # Sidebar Position, available value: left | right</div><div class="line">  #position: left    ##侧边栏位置设置，左右两种</div><div class="line">  position: right</div><div class="line"></div><div class="line">  # Sidebar Display, available value:</div><div class="line">  #  - post    expand on posts automatically. Default.</div><div class="line">  #  - always  expand for all pages automatically</div><div class="line">  #  - hide    expand only when click on the sidebar toggle icon.</div><div class="line">  #  - remove  Totally remove sidebar including sidebar toggler.</div><div class="line">  display: post				##侧边栏显示设置，提供四种，默认post,区别就是显示的时机不同</div><div class="line">  #display: always</div><div class="line">  #display: hide</div><div class="line">  #display: remove</div><div class="line"></div><div class="line"># Blogrolls                ##侧边栏链接设置</div><div class="line">links_title: 推荐链接</div><div class="line">#links_layout: block</div><div class="line">links_layout: inline</div><div class="line">links:</div><div class="line">  阮一峰: http://www.ruanyifeng.com/ </div><div class="line">  张鑫旭: http://www.zhangxinxu.com/ </div><div class="line">  Aaron: http://www.haorooms.com/ </div><div class="line">  牛客网: http://www.nowcoder.com/</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Misc Theme Settings  ##NexT主题中的misc主题设置</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Custom Logo.</div><div class="line"># !!Only available for Default Scheme currently.</div><div class="line"># Options:</div><div class="line">#   enabled: [true/false] - Replace with specific image</div><div class="line">#   image: url-of-image   - Images&apos;s url</div><div class="line">custom_logo:</div><div class="line">  enabled: false</div><div class="line">  image:</div><div class="line"></div><div class="line"># Code Highlight theme</div><div class="line"># Available value:</div><div class="line">#    normal | night | night eighties | night blue | night bright</div><div class="line"># https://github.com/chriskempson/tomorrow-theme</div><div class="line">highlight_theme: normal</div><div class="line"></div><div class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</div><div class="line">scroll_to_more: true</div><div class="line"></div><div class="line"># Automatically Excerpt. Not recommand.</div><div class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</div><div class="line">auto_excerpt:          ##主页文章折叠，显示查看更多按钮，不建议使用。建议使用“&lt;!-- more --&gt;”代替</div><div class="line">  enable: false</div><div class="line">  length: 150</div><div class="line"></div><div class="line"># Wechat Subscriber</div><div class="line">#wechat_subscriber:    ##微信支持</div><div class="line">  #enabled: true</div><div class="line">  #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg</div><div class="line">  #description: ex. subscribe to my blog by scanning my public wechat account</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Third Party Services Settings     ##第三方应用支持</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># MathJax Support</div><div class="line">mathjax:</div><div class="line">  enable: true</div><div class="line">  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</div><div class="line"></div><div class="line"># Swiftype Search API Key</div><div class="line">#swiftype_key:</div><div class="line"></div><div class="line"># Baidu Analytics ID</div><div class="line">#baidu_analytics: c8027b8ba4beebe6ebe89d22781de0a1 </div><div class="line"></div><div class="line"># Duoshuo ShortName</div><div class="line">#duoshuo_shortname: chping </div><div class="line"></div><div class="line"># Disqus</div><div class="line">#disqus_shortname:</div><div class="line"></div><div class="line"># Baidu Share</div><div class="line"># Available value:</div><div class="line">#    button | slide</div><div class="line">#baidushare:</div><div class="line">##  type: button</div><div class="line"></div><div class="line"># Share</div><div class="line">#jiathis:</div><div class="line">#add_this_id:</div><div class="line"></div><div class="line"># Share</div><div class="line">#duoshuo_share: true</div><div class="line"></div><div class="line"># Google Webmaster tools verification setting</div><div class="line"># See: https://www.google.com/webmasters/</div><div class="line">#google_site_verification:</div><div class="line"></div><div class="line"># Google Analytics</div><div class="line">#google_analytics:</div><div class="line"></div><div class="line"># CNZZ count</div><div class="line">#cnzz_siteid:</div><div class="line"></div><div class="line"># Make duoshuo show UA</div><div class="line"># user_id must NOT be null when admin_enable is true!</div><div class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</div><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: true</div><div class="line">  user_id: 6257465157467767553</div><div class="line">  admin_nickname: 彬仔</div><div class="line"></div><div class="line"># Facebook SDK Support.</div><div class="line"># https://github.com/iissnan/hexo-theme-next/pull/410</div><div class="line">facebook_sdk:</div><div class="line">  enable: false</div><div class="line">  app_id:       #&lt;app_id&gt;</div><div class="line">  fb_admin:     #&lt;user_id&gt;</div><div class="line">  like_button:  #true</div><div class="line">  webmaster:    #true</div><div class="line"></div><div class="line"># Show number of visitors to each article.</div><div class="line"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class="line">leancloud_visitors:</div><div class="line">  enable: true</div><div class="line">  app_id: 8oHQTcoEX25FOPclwvl0Fh2A-gzGzoHsz </div><div class="line">  app_key: QFHjBCnX5GEB8TGU5B6prx90 </div><div class="line"></div><div class="line"># Show PV/UV of the website/page with busuanzi.</div><div class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</div><div class="line">busuanzi_count:</div><div class="line">  # count values only if the other configs are false</div><div class="line">  enable: false</div><div class="line">  # custom uv span for the whole site</div><div class="line">  site_uv: true</div><div class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</div><div class="line">  site_uv_footer:</div><div class="line">  # custom pv span for the whole site</div><div class="line">  site_pv: true</div><div class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</div><div class="line">  site_pv_footer:</div><div class="line">  # custom pv span for one page only</div><div class="line">  page_pv: true</div><div class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</div><div class="line">  page_pv_footer:</div><div class="line"></div><div class="line"># Tencent analytics ID</div><div class="line"># tencent_analytics:</div><div class="line"></div><div class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</div><div class="line">baidu_push: true</div><div class="line"></div><div class="line"># Dashang           ##打赏功能</div><div class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</div><div class="line">wechatpay: /images/weixin.JPG</div><div class="line">alipay: /images/alipay.JPG</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">#! ---------------------------------------------------------------</div><div class="line">#! DO NOT EDIT THE FOLLOWING SETTINGS     ##下面的不要修改</div><div class="line">#! UNLESS YOU KNOW WHAT YOU ARE DOING</div><div class="line">#! ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Motion</div><div class="line">use_motion: true</div><div class="line"></div><div class="line"># Fancybox</div><div class="line">fancybox: true</div><div class="line"></div><div class="line"># Script Vendors.</div><div class="line"># Set a CDN address for the vendor you want to customize.</div><div class="line"># For example</div><div class="line">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</div><div class="line"># Be aware that you should use the same version as internal ones to avoid potential problems.</div><div class="line">vendors:</div><div class="line">  # Internal path prefix. Please do not edit it.</div><div class="line">  _internal: vendors</div><div class="line"></div><div class="line">  # Internal version: 2.1.3</div><div class="line">  jquery:</div><div class="line"></div><div class="line">  # Internal version: 2.1.5</div><div class="line">  # http://fancyapps.com/fancybox/</div><div class="line">  fancybox:</div><div class="line">  fancybox_css:</div><div class="line"></div><div class="line">  # Internal version: 1.0.6</div><div class="line">  # https://github.com/ftlabs/fastclick</div><div class="line">  fastclick:</div><div class="line"></div><div class="line">  # Internal version: 1.9.7</div><div class="line">  # https://github.com/tuupola/jquery_lazyload</div><div class="line">  lazyload:</div><div class="line"></div><div class="line">  # Internal version: 1.2.1</div><div class="line">  # http://VelocityJS.org</div><div class="line">  velocity:</div><div class="line"></div><div class="line">  # Internal version: 1.2.1</div><div class="line">  # http://VelocityJS.org</div><div class="line">  velocity_ui:</div><div class="line"></div><div class="line">  # Internal version: 0.7.9</div><div class="line">  # https://faisalman.github.io/ua-parser-js/</div><div class="line">  ua_parser:</div><div class="line"></div><div class="line">  # Internal version: 4.4.0</div><div class="line">  # http://fontawesome.io/</div><div class="line">  fontawesome:</div><div class="line"></div><div class="line"># Assets</div><div class="line">css: css</div><div class="line">js: js</div><div class="line">images: images</div><div class="line"></div><div class="line"># Theme version</div><div class="line">version: 5.0.1</div></pre></td></tr></table></figure>
</code></pre></li>
<li><h4 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h4><p> i. 域名绑定的时候，在万网或者其他机构购买域名，第一次可能需要填写个人信息，填完了，点击上面的域名解析-&gt;解析设置-&gt;添加解析，记录类型选A或CNAME，A记录的记录值就是ip地址，github提供了两个IP地址，192.30.252.153和192.30.252.154，随便填一个就行，解析记录设置两个www和不填，线路就默认就行了，CNAME记录值填你的github博客网址imwillxue.github.io（如下图）<br> <img src="/images/hexo_img3.png" alt="域名解析"><br> ii. 在source文件夹里创建CNAME文件，不带任何后缀，里面添加你的域名信息，如：qiuncheng.com（注意前面不添加http://）<br> <img src="/images/hexo_img4.png" alt="CNAME文件"><br> iii. 然后就hexo d &amp;&amp; hexo -g 访问你的网站吧。     </p>
</li>
<li><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4> 终于写完了自己的Hexo小记录，其实还有一些小细节的东西没有去写，抽个时间在写一篇吧。下一篇想写一下markDown的使用，也是通过Hexo的搭建和使用才接触到markDown的，基本用法已经掌握了，也记录一下。</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
